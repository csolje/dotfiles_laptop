2016-01-07 22:14:57	▶	psyq (~Psyq@unaffiliated/psyq) has joined #haskell
2016-01-07 22:14:57	ℹ	Topic for #haskell is "http://www.haskell.org/ | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | http://reddit.com/r/haskell | Administrative issues: #haskell-ops | Hackage status? http://status.haskell.org | http://downloads.haskell.org"
2016-01-07 22:14:57	ℹ	Topic set by quicksilver on Wed, 07 Oct 2015 16:39:51
2016-01-07 22:14:58	ℹ	Channel #haskell: 1526 nicks (1 op, 0 voices, 1525 normals)
2016-01-07 22:14:58	ℹ	URL for #haskell: http://www.haskell.org/
2016-01-07 22:14:59	ℹ	Channel created on Sun, 26 Nov 2006 07:42:48
2016-01-07 22:15:02	◀	guampa (~guampa@unaffiliated/guampa) has quit (Ping timeout: 240 seconds)
2016-01-07 22:15:06	◀	Th30n (~Th30n@93-136-34-166.adsl.net.t-com.hr) has quit (Ping timeout: 255 seconds)
2016-01-07 22:15:12	ℹ	aaronweiss74 is now known as aatxe
2016-01-07 22:16:48	▶	hrnz (hrnz@unaffiliated/hrnz) has joined #haskell
2016-01-07 22:16:57	ReinH	you can't
2016-01-07 22:17:05	◀	anagha (uid61274@gateway/web/irccloud.com/x-tnjucfvetqblsrpy) has quit (Quit: Connection closed for inactivity)
2016-01-07 22:17:12	▶	hiroakip (~hiroaki@ip4d150c8e.dynamic.kabel-deutschland.de) has joined #haskell
2016-01-07 22:17:13	▶	baweaver (~baweaver@173.230.196.25) has joined #haskell
2016-01-07 22:17:15	▶	pauliprice (~paulipric@207.251.103.46) has joined #haskell
2016-01-07 22:17:35	▶	M-davidar (davidarmat@gateway/shell/matrix.org/x-kicjgutjjeuirmma) has joined #haskell
2016-01-07 22:17:38	◀	baweaver (~baweaver@173.230.196.25) has quit (Remote host closed the connection)
2016-01-07 22:18:00	◀	oisdk_ (~oisdk_@95.45.70.25) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-07 22:18:11	◀	hellertime (~hellertim@a72-246-0-10.deploy.akamaitechnologies.com) has quit (Ping timeout: 245 seconds)
2016-01-07 22:18:21	hunteriam	we can delete the first instance
2016-01-07 22:18:33	hunteriam	we need a new instance
2016-01-07 22:19:03	◀	JagaJaga (~JagaJaga@109.205.252.215) has quit (Ping timeout: 256 seconds)
2016-01-07 22:19:04	hunteriam	http://lpaste.net/148634
2016-01-07 22:19:10	hunteriam	still doesnt work though
2016-01-07 22:19:42	statusfailed	hunteriam: what's this for?
2016-01-07 22:19:49	hunteriam	servant
2016-01-07 22:19:53	◀	jaffachief (~textual@cpc11-broo8-2-0-cust51.14-2.cable.virginm.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-07 22:20:28	▶	aaronlevin (~aaronlevi@37.120.18.174) has joined #haskell
2016-01-07 22:21:00	andromeda-galaxy	ReinH: why not?
2016-01-07 22:21:07	ℹ	dmj`` is now known as dmj`
2016-01-07 22:21:12	▶	Denommus (~user@unaffiliated/denommus) has joined #haskell
2016-01-07 22:21:48	▶	danilo2 (5944f6e1@gateway/web/freenode/ip.89.68.246.225) has joined #haskell
2016-01-07 22:21:55	▶	jaffachief (~textual@cpc11-broo8-2-0-cust51.14-2.cable.virginm.net) has joined #haskell
2016-01-07 22:22:00	◀	jay6981 (~Adium@2601:646:8d01:7f7d:d9c5:92ae:fc5f:292d) has quit (Quit: Leaving.)
2016-01-07 22:22:04	◀	Ziltrum (~Destol@public-122-91.nat.utoronto.ca) has quit (Quit: leaving)
2016-01-07 22:22:11	◀	amyers (~icarus127@128.177.89.240) has quit (Ping timeout: 272 seconds)
2016-01-07 22:22:11	ReinH	andromeda-galaxy: you can't write negative constraints. You can't say "not Ord a" or w/e.
2016-01-07 22:22:15	▶	chrisramsey (~chrisrams@192.171.117.210) has joined #haskell
2016-01-07 22:22:21	◀	choosetw1 (~jmeyer@nat.sierrabravo.net) has quit (Ping timeout: 245 seconds)
2016-01-07 22:22:23	◀	Denommus (~user@unaffiliated/denommus) has quit (Client Quit)
2016-01-07 22:22:29	ReinH	or "a that is not a -> b"
2016-01-07 22:23:02	ReinH	hunteriam: so the solution for adding auth to routes didn't work for you?
2016-01-07 22:23:13	danilo2	Hello guys! I've got a funny notice for you. I've got a file here that compiles TWICE as fast if I replace type alias with closed type family (with just one member). the alias is pretty simple: type XQ1 m a = Targets (Match m a)  and the file uses it extensively and compiles about 15 seconds. After changing to type family XQ1 m a where XQ1 m a = Targets (Match m a) the comp time drops to 7
2016-01-07 22:23:15	andromeda-galaxy	ReinH: ah, that makes sense
2016-01-07 22:23:17	danilo2	just to let you know
2016-01-07 22:23:17	hunteriam	ReinH: doing that later
2016-01-07 22:23:23	andromeda-galaxy	I was hoping that there was some way to do it that I just didn't know...
2016-01-07 22:23:27	▶	guampa (~guampa@unaffiliated/guampa) has joined #haskell
2016-01-07 22:23:32	danilo2	I think it is connected to the famous slow type families resolution bug
2016-01-07 22:23:46	◀	M-Quora (quoramatri@gateway/shell/matrix.org/x-gkircisdhpmbwhjd) has quit (Quit: node-irc says goodbye)
2016-01-07 22:24:01	▶	Coldblackice (~anonz@unaffiliated/coldblackice) has joined #haskell
2016-01-07 22:24:03	◀	yfeldblum (~yfeldblum@2620:10d:c090:180::1:a172) has quit (Ping timeout: 240 seconds)
2016-01-07 22:24:07	ReinH	danilo2: but you said type families were faster?
2016-01-07 22:24:12	◀	raichoo (~raichoo@i59F6B53E.versanet.de) has quit (Ping timeout: 260 seconds)
2016-01-07 22:24:21	danilo2	ReinH: yes, I'm also surprised
2016-01-07 22:24:51	danilo2	ReinH: I noticed a BIG performance loss when using type aliases and big win when replacing them with just closed TFs 
2016-01-07 22:25:01	glittershark	is there a typeclass like Semigroup for types with a commutative (and associative) operator?
2016-01-07 22:25:26	◀	M-Illandan (illandanma@gateway/shell/matrix.org/x-uynpmiywsvlgfseh) has quit (Quit: node-irc says goodbye)
2016-01-07 22:25:35	glittershark	conversely, is it possible to write rewrite rules that will try commutativity during the simplifier?
2016-01-07 22:25:40	bitemyapp	glittershark: I've only seen abelian groups.
2016-01-07 22:25:45	bitemyapp	glittershark: you'd be rolling your own.
2016-01-07 22:25:48	andromeda-galaxy	ReinH: Just out of curiosity, is there any way to do that operation?
2016-01-07 22:26:02	glittershark	bitemyapp: no identity, just a commutative operator
2016-01-07 22:26:07	glittershark	thus semigroup rather than monoid
2016-01-07 22:26:14	bitemyapp	glittershark: I understood that. What I said stands.
2016-01-07 22:26:15	byorgey	glittershark: yes, there is a Semigroup typeclass in the semigroups package
2016-01-07 22:26:19	glittershark	no, I mean
2016-01-07 22:26:19	exio4	ReinH: well, you kind can for some constraints...
2016-01-07 22:26:24	byorgey	soon it will be moving into base
2016-01-07 22:26:25	ReinH	bitemyapp, glittershark: not so fast! https://hackage.haskell.org/package/algebra-4.2/docs/Numeric-Algebra.html#t:Abelian
2016-01-07 22:26:26	bitemyapp	byorgey: they're asking for something that specifies commutativity.
2016-01-07 22:26:35	glittershark	like semigroup, but commutative in addition to associative
2016-01-07 22:26:37	▶	oisdk_ (~oisdk_@95.45.70.25) has joined #haskell
2016-01-07 22:26:43	bitemyapp	ReinH: I'll be goddamned. Good find.
2016-01-07 22:26:44	glittershark	yeah
2016-01-07 22:26:49	byorgey	oh, sorry, I should read more carefully =)
2016-01-07 22:27:06	ReinH	bitemyapp: it's the most ridiculous tower ever but o_O
2016-01-07 22:27:08	bitemyapp	ReinH: nice instance list, but how does it know which to do for stuff like Int?
2016-01-07 22:27:21	ReinH	bitemyapp: I don't claim to know anything about it :D
2016-01-07 22:27:24	▶	sphinxo (~sphinxo@212-139-66-70.dynamic.dsl.as9105.com) has joined #haskell
2016-01-07 22:27:26	glittershark	ReinH: is there a version without the Monoid superclass? I don't have an identity function
2016-01-07 22:27:36	bitemyapp	ReinH: given it builds on Additive, I can guess.
2016-01-07 22:27:36	exio4	ReinH: type family Not (x :: k) (xs :: [k]) :: Constraint where Not x (x ': xs) = "A" ~ "B" ; Not x (y ': ys) = Not x ys ; Not x '[] = ()  :p
2016-01-07 22:27:42	ReinH	glittershark: what Monoid superclass?
2016-01-07 22:27:44	bitemyapp	ReinH: must be doing a split tower.
2016-01-07 22:27:51	ReinH	bitemyapp: lattice, really
2016-01-07 22:27:59	glittershark	https://hackage.haskell.org/package/groups-0.4.0.0/docs/Data-Group.html
2016-01-07 22:28:00	dmwit	bitemyapp: I would guess there's a separate class for the multiplicative semigroup.
2016-01-07 22:28:07	glittershark	@src Group
2016-01-07 22:28:07	lambdabot	Source not found. Sorry.
2016-01-07 22:28:09	bitemyapp	dmwit: that's what I mean by split, yes.
2016-01-07 22:28:17	glittershark	`class Monoid m => Group m`
2016-01-07 22:28:23	ReinH	glittershark: what Group?
2016-01-07 22:28:26	dmwit	bitemyapp: ...and then a Ring class or similar that demands both an additive and multiplicative semigroup with appropriate laws.
2016-01-07 22:28:34	ReinH	glittershark: look at my link again...
2016-01-07 22:28:43	◀	Jesin (~Jesin@198.24.30.100) has quit (Quit: Leaving)
2016-01-07 22:28:44	bitemyapp	dmwit: you seen Izbicki's stuff?
2016-01-07 22:28:58	glittershark	oh, lol, that's a different package
2016-01-07 22:29:00	dmwit	Not sure. Can you say a bit about the content of this stuff?
2016-01-07 22:29:16	ReinH	dmwit: it has stufflike qualities.
2016-01-07 22:30:18	▶	Xzip (~Xzip@81-230-143-111-no169.tbcn.telia.com) has joined #haskell
2016-01-07 22:30:31	ReinH	bitemyapp: oh. Yeah. It distinguishes additive from multiplicative, but you figured that out.
2016-01-07 22:30:49	glittershark	@quote ReinH dmwit: it has stufflike qualities
2016-01-07 22:30:49	lambdabot	No quotes match. Maybe if you used more than just two fingers...
2016-01-07 22:31:01	ReinH	Not really worth quoting
2016-01-07 22:31:01	▶	M-Quora (quoramatri@gateway/shell/matrix.org/x-whmjityeqwmrgulp) has joined #haskell
2016-01-07 22:31:03	▶	ph88^ (~ph88@541E4F6E.cm-5-7b.dynamic.ziggo.nl) has joined #haskell
2016-01-07 22:31:05	glittershark	@remember ReinH dmwit: it has stufflike qualities
2016-01-07 22:31:05	lambdabot	Done.
2016-01-07 22:31:07	ReinH	:(
2016-01-07 22:31:09	glittershark	hee
2016-01-07 22:31:12	glittershark	I giggled
2016-01-07 22:31:22	glittershark	worth quoting in my book
2016-01-07 22:31:32	ReinH	Probably should have included context then...
2016-01-07 22:31:32	▶	M-radix (radixmatri@gateway/shell/matrix.org/x-hilgitnwscrywckm) has joined #haskell
2016-01-07 22:31:33	bitemyapp	glittershark: book?
2016-01-07 22:31:35	ReinH	anyway
2016-01-07 22:31:36	sphinxo	Recommend pretty print lib?
2016-01-07 22:31:43	ReinH	bitemyapp: literal book, by which I mean figurative.
2016-01-07 22:31:48	ReinH	@hackage pretty
2016-01-07 22:31:48	lambdabot	http://hackage.haskell.org/package/pretty
2016-01-07 22:31:55	▶	nour_ (~nour@tmo-097-127.customers.d1-online.com) has joined #haskell
2016-01-07 22:32:17	glittershark	I find it funnier out of context
2016-01-07 22:32:18	▶	Tobisl (~pi@x4db5c9d5.dyn.telefonica.de) has joined #haskell
2016-01-07 22:32:20	bitemyapp	ReinH: are you glittershark?
2016-01-07 22:32:28	ReinH	bitemyapp: I am surmising from context.
2016-01-07 22:32:28	▶	Sixmsj (~Sixmsj@c-73-189-102-185.hsd1.ca.comcast.net) has joined #haskell
2016-01-07 22:32:33	bitemyapp	I am bad at that
2016-01-07 22:32:38	glittershark	yes, by book I mean opinion
2016-01-07 22:32:38	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-07 22:32:42	ReinH	'in my book' is an idiom
2016-01-07 22:32:50	bitemyapp	I can deal with that.
2016-01-07 22:32:53	◀	cognominal (~cognomina@29.144.11.109.rev.sfr.net) has quit (Quit: This computer has gone to sleep)
2016-01-07 22:32:54	ReinH	"he's ok in my book"
2016-01-07 22:32:54	bitemyapp	thankee
2016-01-07 22:32:56	glittershark	basically means "according to me"
2016-01-07 22:33:03	bitemyapp	I've never seen it used for a quote sorta thing before
2016-01-07 22:33:07	ReinH	wherein neither he nor his ok-ness are in an actual book.
2016-01-07 22:33:08	bitemyapp	or WRT "recording"
2016-01-07 22:33:11	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-07 22:33:14	glittershark	I mean
2016-01-07 22:33:21	bitemyapp	I've heard the "ok in my book" instance before
2016-01-07 22:33:23	glittershark	in this case it's basically "this thing is true in my book"
2016-01-07 22:33:25	bitemyapp	sorry for derailing :)
2016-01-07 22:33:38	frerich	ReinH: You mean, neither one nor the other are actual books, in your book.
2016-01-07 22:33:39	glittershark	np
2016-01-07 22:33:44	ReinH	bitemyapp: happy to be of service
2016-01-07 22:33:53	ReinH	frerich: ok sure
2016-01-07 22:33:56	glittershark	idioms are weird; english is weird
2016-01-07 22:34:40	puregreen	@remember ReinH: Not really worth quoting
2016-01-07 22:34:40	lambdabot	Nice!
2016-01-07 22:35:00	Tuplanolla	Are there up-to-date versions of Hackage diagrams?
2016-01-07 22:35:04	puregreen	maybe one day someone would do “@quote ReinH” and that would pop up
2016-01-07 22:35:14	Tobisl	Hey fellas, i am new to Haskell. Which source do you recommend me to get a good introduction to haskell?
2016-01-07 22:35:19	dmwit	?forget ReinH: Not really worth quoting
2016-01-07 22:35:19	lambdabot	Done.
2016-01-07 22:35:35	◀	nour (~nour@x5ce50dc2.dyn.telefonica.de) has quit (Ping timeout: 276 seconds)
2016-01-07 22:35:41	dmwit	If you do want to remember that, at least use `ReinH` instead of `ReinH:`...
2016-01-07 22:35:41	▶	baweaver (~baweaver@173.230.196.25) has joined #haskell
2016-01-07 22:36:03	⚡	ReinH sighs
2016-01-07 22:36:03	dmwit	But, also: please don't want to remember that.
2016-01-07 22:36:09	ReinH	+1
2016-01-07 22:36:12	◀	M-davidar (davidarmat@gateway/shell/matrix.org/x-kicjgutjjeuirmma) has quit (Quit: node-irc says goodbye)
2016-01-07 22:36:13	⚡	puregreen exhales
2016-01-07 22:36:16	puregreen	'kay, 'kay, sorry
2016-01-07 22:36:22	▶	ironChicken (~richard@195.110.9.28) has joined #haskell
2016-01-07 22:36:22	puregreen	won't want to remember that
2016-01-07 22:36:33	glittershark	Tobisl: Learn You A Haskell is fantastic
2016-01-07 22:36:34	◀	nkhodyunya (~Adium@171.33.253.32) has quit (Quit: Leaving.)
2016-01-07 22:36:43	dmwit	Tobisl: I prefer the Gentle Introduction.
2016-01-07 22:36:45	dmwit	?where gentle
2016-01-07 22:36:46	lambdabot	http://www.haskell.org/tutorial/
2016-01-07 22:36:52	ReinH	glittershark: Strongly disagree.
2016-01-07 22:36:57	glittershark	why's that?
2016-01-07 22:37:00	bitemyapp	@where guide
2016-01-07 22:37:00	lambdabot	https://github.com/bitemyapp/learnhaskell
2016-01-07 22:37:03	byorgey	Tuplanolla: what do you mean by Hackage diagrams?
2016-01-07 22:37:04	bitemyapp	@where book
2016-01-07 22:37:04	lambdabot	http://haskellbook.com/
2016-01-07 22:37:11	bitemyapp	Tobisl: ^^ pick one. Free or $$$.
2016-01-07 22:37:11	◀	elperdut_ (~elperdut@38.125.180.209) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-07 22:37:23	▶	gbarboza1 (~gbarboza@104.238.145.153) has joined #haskell
2016-01-07 22:37:25	bitemyapp	Tobisl: run a lot of people through learning Haskell. Haven't found what most people will recommend to work very well.
2016-01-07 22:37:26	frerich	Tobisl: I liked http://www.cs.nott.ac.uk/~pszgmh/book.html a lot
2016-01-07 22:37:28	Tuplanolla	A directed graph of dependencies, byorgey.
2016-01-07 22:37:32	◀	baweaver (~baweaver@173.230.196.25) has quit (Remote host closed the connection)
2016-01-07 22:37:38	ReinH	It is not fantastic. It is not even good. It is superficial and it contains no exercises. People that use it tend to be disappointed that they don't actually know any Haskell when they finish, and either quit or have to use something else to progress.
2016-01-07 22:37:55	dmwit	byorgey: heh, you get notified when "diagrams" appears, huh? =)
2016-01-07 22:37:56	byorgey	Tuplanolla: you mean for all of Hackage? Or for individual packages?
2016-01-07 22:38:07	glittershark	that's just, like, your opinion, man
2016-01-07 22:38:08	Tuplanolla	All of it.
2016-01-07 22:38:10	byorgey	dmwit: ...MAYBE
2016-01-07 22:38:21	glittershark	I like it because it's really good at getting people *interested* in writing haskell
2016-01-07 22:38:25	glittershark	because it's really approachable
2016-01-07 22:38:25	ReinH	We get plenty of people with questions of the form "I finished LYAH now how do I actually do anything?"
2016-01-07 22:38:26	glittershark	but like
2016-01-07 22:38:29	Tobisl	Thanks guys i'll take a look at Learn you A Haskell and the Gentle Introduction!
2016-01-07 22:38:29	glittershark	ha
2016-01-07 22:38:29	▶	twilkens (~twilkens@38.84.192.170) has joined #haskell
2016-01-07 22:38:38	bitemyapp	wasting peoples' time is not a way to get them to want to learn more Haskell
2016-01-07 22:38:42	glittershark	yeah I guess I don't run the support-line on #haskell nearly enough to have strong opinions
2016-01-07 22:38:43	◀	k_bx (b25ea964@gateway/web/cgi-irc/kiwiirc.com/ip.178.94.169.100) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2016-01-07 22:38:49	bitemyapp	Tobisl: they aren't going to help much...
2016-01-07 22:38:53	bitemyapp	Tobisl: I tried :\
2016-01-07 22:39:00	frerich	ReinH: To be fair, I imagine people for whom LYAH worked won't come here as much asking how to actually do anything.
2016-01-07 22:39:02	◀	coot_ (~marcin@bl5-234-92.dsl.telepac.pt) has quit (Quit: coot_)
2016-01-07 22:39:04	Tobisl	bitemyapp: what do you recommend
2016-01-07 22:39:08	bitemyapp	@where guide
2016-01-07 22:39:08	lambdabot	https://github.com/bitemyapp/learnhaskell
2016-01-07 22:39:10	bitemyapp	@where book
2016-01-07 22:39:10	lambdabot	http://haskellbook.com/
2016-01-07 22:39:13	bitemyapp	Tobisl: ^^ one of those two.
2016-01-07 22:39:23	ReinH	frerich: that's a good point, but it doesn't invalidate the frequency with which we *do* get such people.
2016-01-07 22:39:26	glittershark	for the record, I started out with LYAH
2016-01-07 22:39:29	bitemyapp	Tobisl: first one if you won't pay for anything, second if you will (it's my book, I'm biased)
2016-01-07 22:39:35	bitemyapp	glittershark: that means little.
2016-01-07 22:39:39	glittershark	I know
2016-01-07 22:39:47	glittershark	I'm not claiming to be objectively right here :)
2016-01-07 22:39:51	◀	M-radix (radixmatri@gateway/shell/matrix.org/x-hilgitnwscrywckm) has quit (Ping timeout: 245 seconds)
2016-01-07 22:39:57	bitemyapp	glittershark: I've spent years doing damage control on people set adrift by bad resources. Please.
2016-01-07 22:39:59	◀	M-Quora (quoramatri@gateway/shell/matrix.org/x-whmjityeqwmrgulp) has quit (Ping timeout: 250 seconds)
2016-01-07 22:40:00	◀	gbarboza (~gbarboza@unaffiliated/sonicvanajr) has quit (Ping timeout: 240 seconds)
2016-01-07 22:40:05	glittershark	christ
2016-01-07 22:40:09	bitemyapp	I'm serious.
2016-01-07 22:40:10	bitemyapp	It's bad.
2016-01-07 22:40:11	Tuplanolla	I know my experience is quite unusual, but I read LYaH at work during breaks and only started writing Haskell later.
2016-01-07 22:40:17	frerich	ReinH: Sure, just saying that I suspect the book is probably less worse than it may seem if you usually are in touch with people for whom it did not work :-)
2016-01-07 22:40:25	glittershark	I mean like
2016-01-07 22:40:30	bitemyapp	frerich: PiH is has a lot of problems too.
2016-01-07 22:40:33	ReinH	frerich: understood.
2016-01-07 22:40:38	Tuplanolla	It was quite good for that.
2016-01-07 22:40:44	bitemyapp	frerich: http://bitemyapp.com/posts/2014-12-31-functional-education.html
2016-01-07 22:40:47	dmwit	Well. If that's the kind of evidence we're using... I never hear people saying "I just finished the Gentle Intro and how do I write anything now?". =D
2016-01-07 22:40:54	glittershark	it's all well and good to say "a lot of people who ask me questions were lead astray by LYAH" but bringing emotions + anger into it isn't really constructive
2016-01-07 22:40:57	◀	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has quit (Remote host closed the connection)
2016-01-07 22:41:02	frerich	bitemyapp: Well *all* documentation about Haskell tends to have problems, you know :-)
2016-01-07 22:41:09	bitemyapp	glittershark: I'm not bring emotions or anger into it, I'm bringing experience.
2016-01-07 22:41:10	dmwit	glittershark++
2016-01-07 22:41:23	ReinH	dmwit: I never hear people saying "I read the gentle intro", full stop.
2016-01-07 22:41:32	◀	jetpacmonkey (~jeremytic@38.108.221.50) has quit (Ping timeout: 240 seconds)
2016-01-07 22:41:33	bitemyapp	frerich: that doesn't excuse recommending worse-than-necessary options.
2016-01-07 22:41:43	glittershark	tone is difficult to read over the internet; some of the onus is on the person saying things to do so in a kind and friendly way
2016-01-07 22:41:50	◀	Xilov (~Xilov@unaffiliated/xilov) has quit (Quit: I just want you to be happy. And maybe a little bit naked.)
2016-01-07 22:42:30	▶	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined #haskell
2016-01-07 22:42:35	bitemyapp	that's true up to a point, but people can read things through the lens of their own emotional state too.
2016-01-07 22:42:38	frerich	bitemyapp: Hm? I think people are just saying that various resources were helpful to them. Whether they are 'worse-than-necessary' (???) is a different thing.
2016-01-07 22:42:49	bitemyapp	emoji mostly doesn't work over IRC or I'd slap happy bear faces all over everything
2016-01-07 22:42:49	frerich	I liked 'Programming in Haskell', 'tis all I'm saying :-)
2016-01-07 22:42:59	bitemyapp	frerich: it's not about what I like or not
2016-01-07 22:43:00	◀	twilkens (~twilkens@38.84.192.170) has quit (Ping timeout: 255 seconds)
2016-01-07 22:43:10	bitemyapp	frerich: it's about what has worked better or worse for learners and PiH hasn't rated well.
2016-01-07 22:43:17	⚡	hackagebot HaRe 0.8.2.2 - the Haskell Refactorer.  https://hackage.haskell.org/package/HaRe-0.8.2.2 (AlanZimmerman)
2016-01-07 22:43:19	bitemyapp	frerich: this isn't about one personal experience learning Haskell
2016-01-07 22:43:21	frerich	It's "timeless" in a sense because it doesn't talk about libraries a lot, but it does talk about reasoning and proving things.
2016-01-07 22:43:27	▶	PatrickRobotham (uid18270@gateway/web/irccloud.com/x-sddaxgysijgukiet) has joined #haskell
2016-01-07 22:43:28	frerich	bitemyapp: Puhleeeze.
2016-01-07 22:43:33	dmwit	[citation needed]
2016-01-07 22:43:59	◀	zeroed (~zeroed@unaffiliated/zeroed) has quit (Quit: leaving)
2016-01-07 22:44:00	glittershark	eh
2016-01-07 22:44:06	▶	zeroed_ (~zeroed@93-34-146-181.ip50.fastwebnet.it) has joined #haskell
2016-01-07 22:44:10	glittershark	kinda want to say this conversation has run its course
2016-01-07 22:44:13	◀	zeroed_ (~zeroed@93-34-146-181.ip50.fastwebnet.it) has quit (Client Quit)
2016-01-07 22:44:20	▶	baweaver (~baweaver@173.230.196.25) has joined #haskell
2016-01-07 22:44:27	▶	zeroed (~zeroed@unaffiliated/zeroed) has joined #haskell
2016-01-07 22:44:34	glittershark	Tobisl is gone
2016-01-07 22:44:40	Tobisl	glittershark: so true :)
2016-01-07 22:44:46	frerich	Tobisl: One thing which is generally true is that the Haskell ecosystem (the language as well as the libraries) tend to move rather quickly. So *any* documentation may end up being a bit outdated in how it uses tools or libraries.
2016-01-07 22:45:03	bitemyapp	I realize it's easy to shrug off the differences between resources when you're already comfortable in Haskell
2016-01-07 22:45:08	ℹ	mrowe_away is now known as mrowe
2016-01-07 22:45:22	bitemyapp	but Haskell is currently _notorious_ for being difficult to learn and most of this isn't because of how the language is designed
2016-01-07 22:45:37	glittershark	bitemyapp: I'm all for improving that situation
2016-01-07 22:45:38	bitemyapp	I would beseech you to take this seriously and think carefully about why so many people burnout and fail to learn Haskell
2016-01-07 22:45:53	bartavelle	I agree, I "learned" with RWH, and I think that with other resources I could have learned a lot faster
2016-01-07 22:46:14	Tuplanolla	I have a somewhat related question: what would you recommend for someone who is already familiar with math and functional programming, but not Haskell or any ML?
2016-01-07 22:46:14	glittershark	Haskell also has a bit of a reputation for having a toxic and difficult-to-approach community...
2016-01-07 22:46:18	bitemyapp	glittershark: I am improving the situation and have been for years now, but people are very "stuck" on recommending their pet book without having really compared or tested other resources.
2016-01-07 22:46:19	◀	zipper (~luv_panda@unaffiliated/zipper) has quit (Quit: Gone to pet the sleepy panda.)
2016-01-07 22:46:25	Tobisl	btw do you know adventofcode? i did the problems inhaskell, but after a while i didnt learn very much
2016-01-07 22:46:35	puregreen	bitemyapp: just wondering: is Haskell “more notorious” for being difficult to learn than e.g. Ocaml?
2016-01-07 22:46:35	dmwit	This is not a shrug. The Gentle Intro literally changed my life. For other folks who are like me, I would happily wish my experience on them.
2016-01-07 22:46:47	frerich	bartavelle: RWH to me is (was?) more of a cookbook recipe. 'How do I do JSON' or 'How do I parse binary formats' or so.
2016-01-07 22:46:55	bitemyapp	puregreen: Real World OCaml is alright. Most people just haven't heard of OCaml period.
2016-01-07 22:46:58	Tobisl	i really want to understand the whole monoid, monad, applicative stuff
2016-01-07 22:47:18	▶	pavolzetor (4302545b@gateway/web/freenode/ip.67.2.84.91) has joined #haskell
2016-01-07 22:47:33	bartavelle	Tobisl, if gamification works for you I would recommend "codewars", it even has fun exercises on advanced topics
2016-01-07 22:47:48	dmwit	Tuplanolla: RWH might be good if you like to learn by example; I will still recommend Gentle Intro (over bitemyapp's objections) to theory-friendly folks.
2016-01-07 22:47:55	dmwit	Tobisl: You might like the Typeclassopedia.
2016-01-07 22:47:57	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-07 22:48:05	pavolzetor	hi, I am trying to represent a tree in haskell where I need fast reverse lookup (i.e. from node to branch in a tree)
2016-01-07 22:48:06	frerich	Oh yes, the Typeclassopedia is nice!
2016-01-07 22:48:07	▶	jetpacmonkey (~jeremytic@38.108.221.50) has joined #haskell
2016-01-07 22:48:08	▶	Michael__ (a578de67@gateway/web/freenode/ip.165.120.222.103) has joined #haskell
2016-01-07 22:48:21	pavolzetor	I am using IntMap currently with set of branches
2016-01-07 22:48:26	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-07 22:48:31	ℹ	Michael__ is now known as Guest17919
2016-01-07 22:48:33	pavolzetor	and another intmap with lookup from vertices to those branches
2016-01-07 22:48:43	▶	haskell020 (ac382990@gateway/web/freenode/ip.172.56.41.144) has joined #haskell
2016-01-07 22:48:47	pavolzetor	but this feel very imperative
2016-01-07 22:48:50	bartavelle	the worst thing about the typeclassopedia when I was learning was not that I didn't understand what it meant, it was that I couldn't figure why I would want to use "Applicative" or "Arrow"
2016-01-07 22:48:54	Guest17919	In Philip Wadler's paper on Theorems for Free he states in Section 2 on Parametricity that there are no naive set-theoretic models of polymorphic lambda calculus
2016-01-07 22:49:06	Tobisl	bartavelle: thanks :)
2016-01-07 22:49:06	Guest17919	In the naive set-theoretic model types are sets and functions are set-theoretic functions which is seems reasonable. So why does he say there are no naive set-theoretic models of polymorphic lambda calculus?
2016-01-07 22:49:09	▶	twilkens (~twilkens@38.84.192.170) has joined #haskell
2016-01-07 22:49:20	ReinH	pavolzetor: there is a library for bidirectional maps, fwiw
2016-01-07 22:49:20	Tobisl	dmwit: also thanks
2016-01-07 22:49:38	ReinH	I'm not sure there is a better representation for general use.
2016-01-07 22:49:39	dmwit	Guest17919: Well, what is the model of `forall a. a`?
2016-01-07 22:49:57	pavolzetor	ReinH: thanks, is it bimap?
2016-01-07 22:50:08	▶	emilypi (~emilypi@2604:2000:8006:ef00:7049:f210:7769:7616) has joined #haskell
2016-01-07 22:50:10	ReinH	pavolzetor: yep
2016-01-07 22:50:15	ReinH	it keeps track of the accounting for you
2016-01-07 22:50:22	◀	emilypi (~emilypi@2604:2000:8006:ef00:7049:f210:7769:7616) has quit (*.net *.split)
2016-01-07 22:50:22	◀	PatrickRobotham (uid18270@gateway/web/irccloud.com/x-sddaxgysijgukiet) has quit (*.net *.split)
2016-01-07 22:50:22	◀	sphinxo (~sphinxo@212-139-66-70.dynamic.dsl.as9105.com) has quit (*.net *.split)
2016-01-07 22:50:22	◀	pauliprice (~paulipric@207.251.103.46) has quit (*.net *.split)
2016-01-07 22:50:22	◀	bmm (~bram@2001:981:d3ed:1:8e70:5aff:fe81:1a9c) has quit (*.net *.split)
2016-01-07 22:50:23	◀	cschneid (cschneid@2600:3c00::f03c:91ff:fe73:9540) has quit (*.net *.split)
2016-01-07 22:50:23	◀	AndriusBartulis (~andriusb@cpc14-hawk12-2-0-cust18.18-1.cable.virginm.net) has quit (*.net *.split)
2016-01-07 22:50:23	◀	katymoe (uid135810@gateway/web/irccloud.com/x-takzkgzwwkouueiz) has quit (*.net *.split)
2016-01-07 22:50:23	◀	ixti (~ixti@36.9.165.83.dynamic.reverse-mundo-r.com) has quit (*.net *.split)
2016-01-07 22:50:23	◀	Gurkenglas (Gurkenglas@dslb-188-103-077-131.188.103.pools.vodafone-ip.de) has quit (*.net *.split)
2016-01-07 22:50:23	◀	denimuser (~denimuser@121.244.155.226) has quit (*.net *.split)
2016-01-07 22:50:23	◀	martinbjeldbak (~martin@188.226.252.120) has quit (*.net *.split)
2016-01-07 22:50:23	◀	avdi (sid16245@gateway/web/irccloud.com/x-jzghqzcnwgedcgsr) has quit (*.net *.split)
2016-01-07 22:50:23	◀	Xorlev (sid226@gateway/web/irccloud.com/x-rlfrqejpczxieazq) has quit (*.net *.split)
2016-01-07 22:50:23	◀	freekevi- (freekevin@unaffiliated/freekevin) has quit (*.net *.split)
2016-01-07 22:50:23	◀	Eagle_Er1in (~Erwin@erwinb.xs4all.nl) has quit (*.net *.split)
2016-01-07 22:50:23	◀	tessier_ (~treed@kernel-panic/copilotco) has quit (*.net *.split)
2016-01-07 22:50:23	◀	pyrtsa_ (pjahkola@gateway/shell/tkk.fi/x-ivinsgdfbrrvskyj) has quit (*.net *.split)
2016-01-07 22:50:23	◀	borkdude (~borkdude@2a02:2308:20:0:216:3eff:fe5f:4c0b) has quit (*.net *.split)
2016-01-07 22:50:23	◀	Guest63961 (nonethousa@dhcp-v238-103.pv.reshsg.uci.edu) has quit (*.net *.split)
2016-01-07 22:50:23	◀	fizruk (~anonymous@128-68-140-96.broadband.corbina.ru) has quit (*.net *.split)
2016-01-07 22:50:23	◀	spuz (~spuzz@host-78-149-207-230.as13285.net) has quit (*.net *.split)
2016-01-07 22:50:23	◀	ollef (~ollef@chap.plaimi.net) has quit (*.net *.split)
2016-01-07 22:50:23	◀	osa1 (~omer@haskell/developer/osa1) has quit (*.net *.split)
2016-01-07 22:50:23	◀	cyborg-one (~cyborg-on@31.31.100.51) has quit (*.net *.split)
2016-01-07 22:50:23	◀	Bane^ (~Bane@fsf/member/bane) has quit (*.net *.split)
2016-01-07 22:50:23	◀	manuel_ (~manuel@pD9FDEB3A.dip0.t-ipconnect.de) has quit (*.net *.split)
2016-01-07 22:50:23	◀	plutoniix (~q@node-k7m.pool-101-108.dynamic.totbb.net) has quit (*.net *.split)
2016-01-07 22:50:23	◀	jmct (jmct@2600:3c02::f03c:91ff:fedf:1bf0) has quit (*.net *.split)
2016-01-07 22:50:23	◀	kritzcreek (uid114400@gateway/web/irccloud.com/x-cwpxbnphufkcixfq) has quit (*.net *.split)
2016-01-07 22:50:23	◀	nshepperd_ (~asdfg@ppp118-209-216-187.lns20.mel8.internode.on.net) has quit (*.net *.split)
2016-01-07 22:50:23	◀	luzie (~ne@unaffiliated/ne) has quit (*.net *.split)
2016-01-07 22:50:23	◀	rcat (~us3r@host86-164-42-58.range86-164.btcentralplus.com) has quit (*.net *.split)
2016-01-07 22:50:23	◀	CurryWurst (~CurryWurs@2001:1b48:203::1:1001) has quit (*.net *.split)
2016-01-07 22:50:23	◀	justanotheruser (~Justan@unaffiliated/justanotheruser) has quit (*.net *.split)
2016-01-07 22:50:23	◀	blub (~user@2001:56a:f0a5:9c00:d523:804e:ec58:3f55) has quit (*.net *.split)
2016-01-07 22:50:23	◀	fractalcat (~sio@203-206-173-165.perm.iinet.net.au) has quit (*.net *.split)
2016-01-07 22:50:23	◀	wookiehangover (~wookiehan@2601:647:0:c832:1884:e8b8:e87d:9163) has quit (*.net *.split)
2016-01-07 22:50:23	◀	funrep (~funrep@amnesthesia.com) has quit (*.net *.split)
2016-01-07 22:50:23	◀	joco42 (sid95472@gateway/web/irccloud.com/x-ggbxshvmndgfttfp) has quit (*.net *.split)
2016-01-07 22:50:23	◀	taruti (taruti@ultra.violetti.org) has quit (*.net *.split)
2016-01-07 22:50:24	◀	Skuzzzy (~Skuzzzy@host-45-118.aztevds.tempe.az.us.clients.pavlovmedia.com) has quit (*.net *.split)
2016-01-07 22:50:24	◀	RevJohnnyHealey (~rev@gammaray.healeys.net) has quit (*.net *.split)
2016-01-07 22:50:24	◀	Guest3764 (~root@104.131.8.116) has quit (*.net *.split)
2016-01-07 22:50:24	◀	AustinMatherne (~AustinMat@li1047-129.members.linode.com) has quit (*.net *.split)
2016-01-07 22:50:36	▶	AustinMatherne (~AustinMat@li1047-129.members.linode.com) has joined #haskell
2016-01-07 22:50:45	dmwit	Guest17919: Or, okay, I understand that's maybe an objectionable choice; how about `forall a. a -> a` instead? You want a model which can contain the set of functions no matter what set those functions operate on.
2016-01-07 22:51:00	dmwit	Guest17919: Which gives a pretty direct paradox.
2016-01-07 22:51:02	◀	haskell020 (ac382990@gateway/web/freenode/ip.172.56.41.144) has quit (Client Quit)
2016-01-07 22:51:04	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-07 22:51:06	◀	cow_2001 (~weechat@unaffiliated/wabisabi) has quit (Quit: ASCII art of Prophet Muhammad - o<-<)
2016-01-07 22:51:08	▶	cyborg-one (~cyborg-on@31.31.100.51) has joined #haskell
2016-01-07 22:51:12	pavolzetor	ReinH: it says it is a bijection
2016-01-07 22:51:18	pavolzetor	but I need many to one map
2016-01-07 22:51:40	glittershark	bitemyapp: I'm curious actually (not antagonistically, or rhetorically, just genuinely) what your problems are with LYAH. I'm also reasonably dedicated to encouraging haskell education as someone who wants to write more Haskell from day-to-day
2016-01-07 22:51:42	▶	justanotheruser (~Justan@ip70-187-8-107.om.om.cox.net) has joined #haskell
2016-01-07 22:51:42	▶	emilypi (~emilypi@2604:2000:8006:ef00:7049:f210:7769:7616) has joined #haskell
2016-01-07 22:51:42	▶	PatrickRobotham (uid18270@gateway/web/irccloud.com/session) has joined #haskell
2016-01-07 22:51:42	▶	sphinxo (~sphinxo@212-139-66-70.dynamic.dsl.as9105.com) has joined #haskell
2016-01-07 22:51:42	▶	pauliprice (~paulipric@207.251.103.46) has joined #haskell
2016-01-07 22:51:42	▶	bmm (~bram@2001:981:d3ed:1:8e70:5aff:fe81:1a9c) has joined #haskell
2016-01-07 22:51:42	▶	cschneid (cschneid@2600:3c00::f03c:91ff:fe73:9540) has joined #haskell
2016-01-07 22:51:42	▶	katymoe (uid135810@gateway/web/irccloud.com/x-takzkgzwwkouueiz) has joined #haskell
2016-01-07 22:51:42	▶	ixti (~ixti@36.9.165.83.dynamic.reverse-mundo-r.com) has joined #haskell
2016-01-07 22:51:42	▶	Gurkenglas (Gurkenglas@dslb-188-103-077-131.188.103.pools.vodafone-ip.de) has joined #haskell
2016-01-07 22:51:42	▶	denimuser (~denimuser@121.244.155.226) has joined #haskell
2016-01-07 22:51:42	▶	avdi (sid16245@gateway/web/irccloud.com/x-jzghqzcnwgedcgsr) has joined #haskell
2016-01-07 22:51:42	▶	Xorlev (sid226@gateway/web/irccloud.com/x-rlfrqejpczxieazq) has joined #haskell
2016-01-07 22:51:42	▶	borkdude (~borkdude@2a02:2308:20:0:216:3eff:fe5f:4c0b) has joined #haskell
2016-01-07 22:51:42	▶	Eagle_Erwin (~Erwin@erwinb.xs4all.nl) has joined #haskell
2016-01-07 22:51:42	▶	tessier_ (~treed@kernel-panic/copilotco) has joined #haskell
2016-01-07 22:51:42	▶	pyrtsa_ (pjahkola@gateway/shell/tkk.fi/x-ivinsgdfbrrvskyj) has joined #haskell
2016-01-07 22:51:42	▶	Guest63961 (nonethousa@dhcp-v238-103.pv.reshsg.uci.edu) has joined #haskell
2016-01-07 22:51:42	▶	fizruk (~anonymous@128-68-140-96.broadband.corbina.ru) has joined #haskell
2016-01-07 22:51:42	▶	spuz (~spuzz@host-78-149-207-230.as13285.net) has joined #haskell
2016-01-07 22:51:42	▶	ollef (~ollef@chap.plaimi.net) has joined #haskell
2016-01-07 22:51:42	▶	osa1 (~omer@haskell/developer/osa1) has joined #haskell
2016-01-07 22:51:42	▶	Bane^ (~Bane@fsf/member/bane) has joined #haskell
2016-01-07 22:51:42	▶	manuel_ (~manuel@pD9FDEB3A.dip0.t-ipconnect.de) has joined #haskell
2016-01-07 22:51:42	▶	plutoniix (~q@node-k7m.pool-101-108.dynamic.totbb.net) has joined #haskell
2016-01-07 22:51:42	▶	jmct (jmct@2600:3c02::f03c:91ff:fedf:1bf0) has joined #haskell
2016-01-07 22:51:42	▶	kritzcreek (uid114400@gateway/web/irccloud.com/x-cwpxbnphufkcixfq) has joined #haskell
2016-01-07 22:51:42	▶	nshepperd_ (~asdfg@ppp118-209-216-187.lns20.mel8.internode.on.net) has joined #haskell
2016-01-07 22:51:42	▶	luzie (~ne@unaffiliated/ne) has joined #haskell
2016-01-07 22:51:42	▶	rcat (~us3r@host86-164-42-58.range86-164.btcentralplus.com) has joined #haskell
2016-01-07 22:51:42	▶	CurryWurst (~CurryWurs@2001:1b48:203::1:1001) has joined #haskell
2016-01-07 22:51:42	▶	blub (~user@2001:56a:f0a5:9c00:d523:804e:ec58:3f55) has joined #haskell
2016-01-07 22:51:42	▶	fractalcat (~sio@203-206-173-165.perm.iinet.net.au) has joined #haskell
2016-01-07 22:51:42	▶	wookiehangover (~wookiehan@2601:647:0:c832:1884:e8b8:e87d:9163) has joined #haskell
2016-01-07 22:51:42	▶	funrep (~funrep@amnesthesia.com) has joined #haskell
2016-01-07 22:51:42	▶	joco42 (sid95472@gateway/web/irccloud.com/x-ggbxshvmndgfttfp) has joined #haskell
2016-01-07 22:51:42	▶	taruti (taruti@ultra.violetti.org) has joined #haskell
2016-01-07 22:51:42	▶	Skuzzzy (~Skuzzzy@host-45-118.aztevds.tempe.az.us.clients.pavlovmedia.com) has joined #haskell
2016-01-07 22:51:42	▶	RevJohnnyHealey (~rev@gammaray.healeys.net) has joined #haskell
2016-01-07 22:51:42	▶	Guest3764 (~root@104.131.8.116) has joined #haskell
2016-01-07 22:51:44	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-07 22:51:45	◀	dsh (~daishi@ool-18bd7436.dyn.optonline.net) has quit (Quit: Leaving)
2016-01-07 22:51:45	◀	PatrickRobotham (uid18270@gateway/web/irccloud.com/session) has quit (Changing host)
2016-01-07 22:51:45	▶	PatrickRobotham (uid18270@gateway/web/irccloud.com/x-zvmxcdntmnyenqjq) has joined #haskell
2016-01-07 22:51:49	▶	pytmand (~pytmand@80-71-135-134.u.parknet.dk) has joined #haskell
2016-01-07 22:51:52	▶	martinbjeldbak (~martin@188.226.252.120) has joined #haskell
2016-01-07 22:51:57	◀	avdi (sid16245@gateway/web/irccloud.com/x-jzghqzcnwgedcgsr) has quit (Max SendQ exceeded)
2016-01-07 22:51:57	◀	Xorlev (sid226@gateway/web/irccloud.com/x-rlfrqejpczxieazq) has quit (Max SendQ exceeded)
2016-01-07 22:51:58	◀	cschneid (cschneid@2600:3c00::f03c:91ff:fe73:9540) has quit (Max SendQ exceeded)
2016-01-07 22:51:58	◀	katymoe (uid135810@gateway/web/irccloud.com/x-takzkgzwwkouueiz) has quit (Max SendQ exceeded)
2016-01-07 22:51:58	◀	justanotheruser (~Justan@ip70-187-8-107.om.om.cox.net) has quit (Max SendQ exceeded)
2016-01-07 22:52:08	bitemyapp	glittershark: ReinH described a lot of the basic problem already.
2016-01-07 22:52:10	◀	mrb_bk_ (uid2099@gateway/web/irccloud.com/x-tynldjlpbghmksvv) has quit (Quit: Connection closed for inactivity)
2016-01-07 22:52:11	▶	cschneid (cschneid@2600:3c00::f03c:91ff:fe73:9540) has joined #haskell
2016-01-07 22:52:12	glittershark	and I'm totally ready to stop recommending LYAH if it's really a bad starting point for historically imprerative programmers
2016-01-07 22:52:17	glittershark	namely that it doesn't have exercises?
2016-01-07 22:52:18	bitemyapp	glittershark: my post talks about the problem more broadly: http://bitemyapp.com/posts/2014-12-31-functional-education.html
2016-01-07 22:52:28	▶	katymoe (sid135810@gateway/web/irccloud.com/x-puozgpwdmornjzjs) has joined #haskell
2016-01-07 22:52:29	bitemyapp	glittershark: yes but that's not some small thing
2016-01-07 22:52:39	▶	nour__ (~nour@x5ce50dc2.dyn.telefonica.de) has joined #haskell
2016-01-07 22:52:39	▶	avdi (sid16245@gateway/web/irccloud.com/x-bjoiymnnaeajfldl) has joined #haskell
2016-01-07 22:52:42	ReinH	Guest17919: See John C. Reynolds, _Polymoprhism is Not Set-Theoretic_ and Andrew M. Pitts, _Polymorphism is Set Theoretic, Constructively_
2016-01-07 22:52:43	dmwit	glittershark: For what it's worth, I also rarely recommend LYAH. It's style rubbed me the wrong way when I tried it. However I have no objection to other folks finding it useful the way bitemyapp appears to.
2016-01-07 22:52:50	▶	Xorlev (Xorlev@gateway/web/irccloud.com/x-uodsashcwiobvrog) has joined #haskell
2016-01-07 22:53:12	glittershark	basically my situation is I'm the only haskell programmer at my job and want all my coworkers to learn haskell so they can help me work on the haskell service I've been writing
2016-01-07 22:53:26	ReinH	Guest17919: They should contain the anwers you seek.
2016-01-07 22:53:29	bitemyapp	glittershark: there are other problems with it, but it comes down to LYAH not explaining anything, not providing you exercises for figuring it out, not examples substantive enough to stimulate understanding nor counter-examples to excise misunderstandings.
2016-01-07 22:53:31	ReinH	or the answers
2016-01-07 22:53:32	glittershark	I already had success with one of my coworkers (hi jetpacmonkey) sending him LYAH
2016-01-07 22:53:35	◀	bennofs (~benno@2a02:810a:8200:2934:ce3d:82ff:fec6:6d58) has quit (Quit: WeeChat 1.3)
2016-01-07 22:53:37	bitemyapp	glittershark: LYAH is a pedogogical black hole.
2016-01-07 22:53:38	jetpacmonkey	hi!
2016-01-07 22:53:42	▶	freekevin (freekevin@unaffiliated/freekevin) has joined #haskell
2016-01-07 22:53:53	bitemyapp	glittershark: it's a brief tour through some simple Haskell code. That's really it.
2016-01-07 22:53:54	◀	clynamen (~clynamen@93-50-191-217.ip153.fastwebnet.it) has quit (Read error: Connection reset by peer)
2016-01-07 22:53:56	bitemyapp	glittershark: and cartoons.
2016-01-07 22:53:59	bitemyapp	it has cartoons.
2016-01-07 22:54:05	glittershark	but there are other coworkers who are moving more slowly, so if there are better books I'm all ears
2016-01-07 22:54:08	ReinH	I mean, let's not underestimate the pedagogic value of cartoons.
2016-01-07 22:54:15	◀	fizruk (~anonymous@128-68-140-96.broadband.corbina.ru) has quit (Quit: fizruk)
2016-01-07 22:54:18	bartavelle	bitemyapp, cartoons *might* be enticing to some
2016-01-07 22:54:20	bitemyapp	the hermeneutics of cartoons.
2016-01-07 22:54:29	bitemyapp	glittershark: I'm writing a book. People like it a lot.
2016-01-07 22:54:37	▶	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has joined #haskell
2016-01-07 22:54:46	glittershark	do you have a problem with the cartoons or are you just being reductionist?
2016-01-07 22:54:54	bitemyapp	glittershark: it's comprehensive, targets beginners, and aims to get people as far as they need to go to use real Haskell that is actually needed to understand modern Haskell libraries.
2016-01-07 22:55:05	glittershark	that's a pretty solid value proposition
2016-01-07 22:55:07	◀	razi1 (uid90126@gateway/web/irccloud.com/x-mffqqorzywshbfms) has quit (Ping timeout: 260 seconds)
2016-01-07 22:55:07	◀	spicydonuts (sid61882@gateway/web/irccloud.com/x-qefhuteqsrzwxbon) has quit (Ping timeout: 260 seconds)
2016-01-07 22:55:15	▶	xiinotulp (~q@node-660.pool-125-25.dynamic.totbb.net) has joined #haskell
2016-01-07 22:55:16	bitemyapp	@where book
2016-01-07 22:55:16	lambdabot	http://haskellbook.com/
2016-01-07 22:55:25	dmwit	(I couldn't handle the Poignant Guide to ruby for the same reasons. I'm a professional. I don't need or want cutesy nonsense, just give me the high points first and delve into the details as soon as possible.)
2016-01-07 22:55:25	blub	bitemyapp: i just finished doing cis194 on your recommendation, i was really pleased with it :)
2016-01-07 22:55:25	bitemyapp	glittershark: ^^ check the reviews and progress pages.
2016-01-07 22:55:36	bitemyapp	blub: glad you liked it, byorgey is here if you want to thank him :)
2016-01-07 22:55:42	◀	latro`a_ (~latro`a@2601:14a:4002:86bb:31e4:896c:b570:a66d) has quit (Ping timeout: 260 seconds)
2016-01-07 22:55:43	bitemyapp	blub: since it was byorgey that wrote it :D
2016-01-07 22:55:44	glittershark	I for one *like* cutesy nonsense
2016-01-07 22:55:45	▶	k_bx (b25ea964@gateway/web/cgi-irc/kiwiirc.com/ip.178.94.169.100) has joined #haskell
2016-01-07 22:55:48	ReinH	dmwit: _why's guide taught an entire generation to write frankly awful Ruby.
2016-01-07 22:55:51	glittershark	it makes me happy, and emotions are important
2016-01-07 22:55:52	▶	justanotheruser (~Justan@unaffiliated/justanotheruser) has joined #haskell
2016-01-07 22:55:58	byorgey	glad you liked it blub =)
2016-01-07 22:56:01	◀	Jackneill (~Jackneill@gateway/vpn/privateinternetaccess/jackneill) has quit (Ping timeout: 260 seconds)
2016-01-07 22:56:02	ReinH	His obsession with metaprogramming is not useful for beginners.
2016-01-07 22:56:12	blub	thank you !
2016-01-07 22:56:17	◀	mindos_cloud____ (sid13388@gateway/web/irccloud.com/x-cjoztkrlrovtayfw) has quit (Ping timeout: 260 seconds)
2016-01-07 22:56:17	◀	thoughtpolice (sid71856@haskell/developer/thoughtpolice) has quit (Ping timeout: 260 seconds)
2016-01-07 22:56:17	jetpacmonkey	I really enjoyed the cutesy nonsense in LYAH, and couldn't finish _why's guide
2016-01-07 22:56:30	◀	drot (~user@unaffiliated/drot) has quit (Quit: rcirc on GNU Emacs 24.5.1)
2016-01-07 22:56:32	jetpacmonkey	it's not at the same level, even if it might be in the same general category
2016-01-07 22:56:37	dmwit	glittershark: I would not claim to speak for other people, of course. There are clearly many who like that style.
2016-01-07 22:56:42	◀	nour_ (~nour@tmo-097-127.customers.d1-online.com) has quit (Ping timeout: 264 seconds)
2016-01-07 22:57:04	bitemyapp	aesthetics aren't the issue here
2016-01-07 22:57:05	◀	k_bx (b25ea964@gateway/web/cgi-irc/kiwiirc.com/ip.178.94.169.100) has quit (Client Quit)
2016-01-07 22:57:08	bitemyapp	or at least, not the objection.
2016-01-07 22:57:13	glittershark	that's what I'm trying to point out
2016-01-07 22:57:16	dmwit	not *your* objection =)
2016-01-07 22:57:18	⚡	frerich thinks it's pretty obvious that different books work differently well for different people, so now that we enumerated a few of them, maybe we can move on?
2016-01-07 22:57:19	◀	mizu_no_oto (~textual@c-67-189-145-156.hsd1.ma.comcast.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-07 22:57:30	bitemyapp	frerich: it's not that rosy.
2016-01-07 22:57:40	◀	rcat (~us3r@host86-164-42-58.range86-164.btcentralplus.com) has quit (Remote host closed the connection)
2016-01-07 22:57:42	bitemyapp	frerich: you talk about it as if most resources are close enough to ideal and that it's a mere matter of taste.
2016-01-07 22:57:47	frerich	bitemyapp: Probably not. Can we move on anyway?
2016-01-07 22:57:50	frerich	:-]
2016-01-07 22:57:52	bitemyapp	frerich: the situation is far more dire than that.
2016-01-07 22:57:53	ReinH	I think this horse is well dead by now.
2016-01-07 22:57:54	glittershark	yeah, bitemyapp, if I'm understanding you correctly, the issue is that LYAH teaches the what rather than the why and the how?
2016-01-07 22:57:55	Guest17919	<dmwit> thanks
2016-01-07 22:58:00	bitemyapp	glittershark: it's worse than that.
2016-01-07 22:58:01	▶	mindos_cloud____ (sid13388@gateway/web/irccloud.com/x-aiysbhtjfrtjqsif) has joined #haskell
2016-01-07 22:58:02	◀	plutoniix (~q@node-k7m.pool-101-108.dynamic.totbb.net) has quit (Ping timeout: 240 seconds)
2016-01-07 22:58:02	▶	thoughtpolice (sid71856@haskell/developer/thoughtpolice) has joined #haskell
2016-01-07 22:58:06	▶	spicydonuts (sid61882@gateway/web/irccloud.com/x-etoigqspljxcslra) has joined #haskell
2016-01-07 22:58:09	▶	razi1 (uid90126@gateway/web/irccloud.com/x-infxhfxqummqphrl) has joined #haskell
2016-01-07 22:58:09	bitemyapp	glittershark: I've said my piece.
2016-01-07 22:58:22	ReinH	Guest17919: did you see my reply?
2016-01-07 22:58:22	glittershark	I'm not convinced yet but I really want to be
2016-01-07 22:58:30	Guest17919	no
2016-01-07 22:58:32	ReinH	Maybe move it to -blah?
2016-01-07 22:58:33	Guest17919	let me go back
2016-01-07 22:58:36	bitemyapp	glittershark: if you have questions about the why/what/how/etc. of the book I am working on with my co-author Julie, ping me in another channel.
2016-01-07 22:58:44	ReinH	Guest17919:  See John C. Reynolds, _Polymoprhism is Not Set-Theoretic_ and Andrew M. Pitts, _Polymorphism is Set Theoretic, Constructively_
2016-01-07 22:58:59	Guest17919	thanks mate
2016-01-07 22:59:03	Guest17919	i will check it
2016-01-07 22:59:08	ReinH	Guest17919: np
2016-01-07 22:59:16	ReinH	should answer all your questinos
2016-01-07 22:59:19	ReinH	or your questions
2016-01-07 22:59:21	bitemyapp	ReinH: /query?
2016-01-07 22:59:27	Guest17919	yep you hit the nail on the head
2016-01-07 22:59:51	◀	gamsd (~gamsd@201.16.142.13) has quit (Ping timeout: 256 seconds)
2016-01-07 23:00:46	▶	rodlogic_ (~rodlogic@179.159.96.218) has joined #haskell
2016-01-07 23:00:47	◀	deavmi_mobile (~deavmi@41.164.24.122) has quit (Read error: Connection reset by peer)
2016-01-07 23:00:48	◀	Nik05 (~Nik05@unaffiliated/nik05) has quit (Read error: Connection reset by peer)
2016-01-07 23:00:51	▶	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has joined #haskell
2016-01-07 23:01:15	◀	rodlogic (~rodlogic@179.159.96.218) has quit (Read error: Connection reset by peer)
2016-01-07 23:01:41	▶	clynamen (~clynamen@93-50-191-217.ip153.fastwebnet.it) has joined #haskell
2016-01-07 23:01:44	◀	{AS} (uid45026@gateway/web/irccloud.com/x-lmqwuioofihomhbt) has quit (Quit: Connection closed for inactivity)
2016-01-07 23:01:44	jetpacmonkey	glittershark: if you do continue that discussion in another channel, let me know. I dropped into this discussion late.
2016-01-07 23:02:27	◀	erochester (~Adium@137.54.17.249) has quit (Quit: Leaving.)
2016-01-07 23:02:37	▶	pavonia (~user@dslb-178-000-102-193.178.000.pools.vodafone-ip.de) has joined #haskell
2016-01-07 23:03:22	▶	Nik05 (~Nik05@unaffiliated/nik05) has joined #haskell
2016-01-07 23:04:22	◀	pavolzetor (4302545b@gateway/web/freenode/ip.67.2.84.91) has quit (Ping timeout: 252 seconds)
2016-01-07 23:04:36	dmwit	After stewing a bit, I think the book I want my past self to have read to learn Haskell was TAPL.
2016-01-07 23:04:37	◀	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2016-01-07 23:04:48	◀	Guest17919 (a578de67@gateway/web/freenode/ip.165.120.222.103) has quit (Quit: Page closed)
2016-01-07 23:04:49	◀	m0rphism (~m0rphism@HSI-KBW-095-208-106-119.hsi5.kabel-badenwuerttemberg.de) has quit (Quit: WeeChat 1.3)
2016-01-07 23:05:38	beepbeep_	dmwit, https://www.cis.upenn.edu/~bcpierce/tapl/ ?
2016-01-07 23:05:39	▶	Ziltrum (~Destol@public-251-249.nat.utoronto.ca) has joined #haskell
2016-01-07 23:05:52	◀	animated (~mike@207.35.29.137) has quit (Ping timeout: 240 seconds)
2016-01-07 23:05:54	dmwit	yes
2016-01-07 23:06:01	dmwit	I admit it does not appear to be about Haskell.
2016-01-07 23:06:05	▶	Fullma (~fullma@ram94-2-82-66-69-246.fbx.proxad.net) has joined #haskell
2016-01-07 23:06:10	▶	richardiii (~richardii@209.119.95.194) has joined #haskell
2016-01-07 23:07:37	ℹ	kipras is now known as kipras`away
2016-01-07 23:07:44	bartavelle	I wish I had started trying to do an actual project sooner instead of reading books for learning Haskell ;)
2016-01-07 23:08:08	▶	TheLemonMan (~lemonboy@unaffiliated/thelemonman) has joined #haskell
2016-01-07 23:08:23	dmwit	actually executing code is for the weak
2016-01-07 23:08:30	▶	m0rphism (~m0rphism@HSI-KBW-095-208-106-119.hsi5.kabel-badenwuerttemberg.de) has joined #haskell
2016-01-07 23:08:31	◀	pytmand (~pytmand@80-71-135-134.u.parknet.dk) has quit (Quit: Lingo: www.lingoirc.com)
2016-01-07 23:08:39	bartavelle	if I wasn't weak I would only write asm
2016-01-07 23:08:44	bartavelle	:p
2016-01-07 23:09:03	ReinH	dmwit: http://www.waterfall2006.com/martin.html
2016-01-07 23:09:06	◀	dgpratt (~dpratt71@207.182.208.2) has quit (Ping timeout: 255 seconds)
2016-01-07 23:09:14	▶	Niiils (~quassel@81.171.75.67) has joined #haskell
2016-01-07 23:09:34	◀	HaskellHacka (a1b5fd14@gateway/web/cgi-irc/kiwiirc.com/ip.161.181.253.20) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2016-01-07 23:10:00	dmwit	I'm cracking up over here
2016-01-07 23:10:07	glittershark	I'm with bartavelle here, the one thing that got me really learning haskell was writing haskell
2016-01-07 23:10:22	ReinH	dmwit: all the proceedings are pretty awesome.
2016-01-07 23:10:29	bartavelle	I think it's the same for every one, and that's why exercises are nice
2016-01-07 23:10:34	▶	gamsd (~gamsd@201.16.142.13) has joined #haskell
2016-01-07 23:10:38	◀	rodlogic_ (~rodlogic@179.159.96.218) has quit (Read error: Connection reset by peer)
2016-01-07 23:10:52	◀	Th30n_ (~Th30n@93-136-27-7.adsl.net.t-com.hr) has quit (Quit: leaving)
2016-01-07 23:11:02	glittershark	yeah
2016-01-07 23:11:05	▶	rodlogic (~rodlogic@179.159.96.218) has joined #haskell
2016-01-07 23:11:17	glittershark	the more I read bitemyapp's review of LYAH on http://bitemyapp.com/posts/2014-12-31-functional-education.html the more I agree
2016-01-07 23:11:30	◀	caumeslasal (~Thunderbi@82.239.65.141) has quit (Quit: caumeslasal)
2016-01-07 23:11:44	▶	kaiyin (d57f762a@gateway/web/freenode/ip.213.127.118.42) has joined #haskell
2016-01-07 23:12:20	kaiyin	How do you convert this into the bind form? https://gist.github.com/kindlychung/ab2ad8ceffccac764f8f#file-stack-hs-L14-L17
2016-01-07 23:12:49	dmwit	kaiyin: stackManip = push 3 >> pop >> pop
2016-01-07 23:13:24	dmwit	?undo do { push 3; _ <- pop; pop }
2016-01-07 23:13:24	lambdabot	push 3 >> pop >>= \ _ -> pop
2016-01-07 23:13:36	dmwit	?src (>>)
2016-01-07 23:13:36	lambdabot	m >> k = m >>= \_ -> k
2016-01-07 23:14:03	◀	Niiils (~quassel@81.171.75.67) has quit (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
2016-01-07 23:14:58	▶	Niiils (~quassel@81.171.75.67) has joined #haskell
2016-01-07 23:15:11	◀	micmus (~micmus@088156129087.dynamic-ww-1.vectranet.pl) has quit (Quit: Leaving)
2016-01-07 23:15:37	kaiyin	ok, i see. thanks!
2016-01-07 23:15:40	▶	k_bx (b25ea964@gateway/web/cgi-irc/kiwiirc.com/ip.178.94.169.100) has joined #haskell
2016-01-07 23:15:50	ReinH	Which should be equivalent to... pop.
2016-01-07 23:16:35	kaiyin	ReinH: yeah. :-)
2016-01-07 23:16:42	▶	wowdog (~wowdog@s99-199-66-28.bc.hsia.telus.net) has joined #haskell
2016-01-07 23:16:43	◀	croyd_ (~croyd@129.10.9.39) has quit (Remote host closed the connection)
2016-01-07 23:16:46	kaiyin	it's from learn you a haskell.
2016-01-07 23:16:47	dolio	If you want exercises, you don't need a Haskell book.
2016-01-07 23:16:52	dolio	AIMA has exercises.
2016-01-07 23:16:56	dolio	That's what I used.
2016-01-07 23:16:56	◀	Niiils (~quassel@81.171.75.67) has quit (Read error: Connection reset by peer)
2016-01-07 23:17:10	▶	michaelneale (~textual@1.144.97.15) has joined #haskell
2016-01-07 23:17:15	◀	Uakh (~Uakh@103.17.46.214) has quit (Ping timeout: 250 seconds)
2016-01-07 23:17:18	dmwit	ReinH: That doesn't make my box hot enough! Do you want my kittens to suffer?
2016-01-07 23:18:16	◀	kurt11 (~Adium@207.191.34.198) has quit (Quit: Leaving.)
2016-01-07 23:18:37	◀	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has quit (Quit: SHUT UP SMARTMATCH)
2016-01-07 23:18:45	◀	michaelneale (~textual@1.144.97.15) has quit (Client Quit)
2016-01-07 23:18:53	beepbeep_	AIMA? http://aima.cs.berkeley.edu/
2016-01-07 23:19:02	▶	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has joined #haskell
2016-01-07 23:19:17	▶	kurt11 (~Adium@207.191.34.198) has joined #haskell
2016-01-07 23:19:25	◀	Helvekta (~enel@2601:4a:4202:d58c:edeb:eeb9:67ae:68a9) has quit (Ping timeout: 250 seconds)
2016-01-07 23:20:17	◀	hiroakip (~hiroaki@ip4d150c8e.dynamic.kabel-deutschland.de) has quit (Ping timeout: 260 seconds)
2016-01-07 23:20:29	dolio	Yes, that's the one.
2016-01-07 23:20:32	▶	lamda_sage (~ericsage@erics-mbp-2.dynamic.ucsd.edu) has joined #haskell
2016-01-07 23:20:40	beepbeep_	sweet
2016-01-07 23:20:48	beepbeep_	gotta read that one :)
2016-01-07 23:20:52	beepbeep_	thx!
2016-01-07 23:20:53	▶	michaelneale (~textual@1.144.97.15) has joined #haskell
2016-01-07 23:20:54	▶	mgsloan (~mgsloan@157.130.186.54) has joined #haskell
2016-01-07 23:20:59	Majiir	glittershark, I just gave that a read, and I might even agree... but I found LYAH to be helpful myself. I know there's a lot of disdain for it, but for some people it works.
2016-01-07 23:21:01	▶	ompaul (~ompaul@unaffiliated/ompaul) has joined #haskell
2016-01-07 23:21:05	◀	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has quit (Read error: Connection reset by peer)
2016-01-07 23:21:07	glittershark	I also did
2016-01-07 23:21:13	▶	Rizy (~Rizy@36.77.233.191) has joined #haskell
2016-01-07 23:21:17	glittershark	but that doesn't mean that I wouldn't've found something else even *more* helpful
2016-01-07 23:21:18	◀	dmj` (~user@c-50-158-126-110.hsd1.il.comcast.net) has quit (Ping timeout: 264 seconds)
2016-01-07 23:21:23	◀	phyrex1an1 (~phyrex1an@cm-84.213.46.254.getinternet.no) has quit (Remote host closed the connection)
2016-01-07 23:21:24	dolio	It won't teach you anything about Haskell, but you can write any programs in the exercises in Haskell.
2016-01-07 23:21:25	▶	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has joined #haskell
2016-01-07 23:21:27	▶	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has joined #haskell
2016-01-07 23:21:42	◀	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has quit (Remote host closed the connection)
2016-01-07 23:22:00	lamda_sage	How large can my Data.Map get before I start to see performance degredation? I am storing a mapping of IDs to URLs where I expect over 100k mappings.
2016-01-07 23:22:02	◀	erkin (~erkin@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2016-01-07 23:22:27	dmwit	?djinn ((a -> Identity b) -> s -> Identity t) -> (a -> b) -> s -> t
2016-01-07 23:22:27	lambdabot	f a b c =
2016-01-07 23:22:27	lambdabot	    case a (\ d -> Identity (b d)) c of
2016-01-07 23:22:27	lambdabot	    Identity e -> e
2016-01-07 23:22:39	hpc	what is the ID type?
2016-01-07 23:22:52	lamda_sage	A ByteString
2016-01-07 23:23:06	Majiir	glittershark, the biggest gap I still have is how the underlying 'machine' works. It's easy to see how conventional languages map to CPU instructions, but less easy (for me, anyway) to infer how GHC works under the hood. Do you know of any good resources for this?
2016-01-07 23:23:12	dolio	Degradation in what sense?
2016-01-07 23:23:24	dmwit	lamda_sage: You might like to use bytestring-trie
2016-01-07 23:23:25	⚡	hackagebot imagemagick 0.0.3.7 - bindings to imagemagick library  https://hackage.haskell.org/package/imagemagick-0.0.3.7 (AlexanderVershilov)
2016-01-07 23:23:29	glittershark	Majiir: -fdump-simpl is what I do
2016-01-07 23:23:37	◀	gamsd (~gamsd@201.16.142.13) has quit (Ping timeout: 272 seconds)
2016-01-07 23:23:42	glittershark	Majiir: but that can be a little daunting (it certainly was for me)
2016-01-07 23:23:56	glittershark	Majiir: -ddump-simple, rather. My mistake
2016-01-07 23:24:00	glittershark	-ddump-simpl. dammit
2016-01-07 23:24:01	▶	Mongoose (~Mongoose@unaffiliated/mongoose) has joined #haskell
2016-01-07 23:24:01	◀	hurrah (~jimmyhurr@84.216.130.226) has quit (Ping timeout: 260 seconds)
2016-01-07 23:24:05	lamda_sage	dolio: Slowness or crashes (even though RAM is still available)
2016-01-07 23:24:25	glittershark	https://youtu.be/McFNkLPTOSY this was a pretty good talk that I stumbled on
2016-01-07 23:24:26	lamda_sage	dmwit: Thanks, a trie does make sense here
2016-01-07 23:24:32	dmwit	Majiir: The spineless-tagless G-machine paper is good for this.
2016-01-07 23:25:02	dmwit	http://twister.43foldrs.com/spineless-tagless-gmachine.pdf
2016-01-07 23:25:03	frerich	glittershark: Ah, that seems interesting, thanks for pointing that out!
2016-01-07 23:25:18	◀	beepbeep_ (~beepbeep_@78-23-142-12.access.telenet.be) has quit (Ping timeout: 255 seconds)
2016-01-07 23:25:34	glittershark	in general GHC provides a *ton* of options for telling you what it's doing under the hood, if you're comfortable with Core/STG
2016-01-07 23:25:36	◀	nour__ (~nour@x5ce50dc2.dyn.telefonica.de) has quit (Quit: Leaving)
2016-01-07 23:25:41	glittershark	which, admittedly, I am not.
2016-01-07 23:25:47	▶	negatratoron (~negatrato@c-107-4-157-85.hsd1.mn.comcast.net) has joined #haskell
2016-01-07 23:25:52	◀	bmm (~bram@2001:981:d3ed:1:8e70:5aff:fe81:1a9c) has quit (Quit: Ex-Chat)
2016-01-07 23:26:02	◀	koshmar (~koshmar@unaffiliated/koshmar) has quit (Ping timeout: 260 seconds)
2016-01-07 23:26:26	▶	gamsd (~gamsd@201.16.142.13) has joined #haskell
2016-01-07 23:26:30	⚡	frerich blushes as he notices that that youtube link already *is* part of his 'Haskell stuff to look at when I have some time' list...
2016-01-07 23:26:45	Majiir	Thanks and thanks. I'm more interested in a general view so I can at least have some idea of how stuff is stored in memory, how evaluation proceeds, etc
2016-01-07 23:26:57	glittershark	hee
2016-01-07 23:27:02	dmwit	frerich: youtube link?
2016-01-07 23:27:05	bitemyapp	glittershark: ghc-core package gives you a way to get some prettier output, I think
2016-01-07 23:27:14	dmwit	frerich: never mind, I'm blind
2016-01-07 23:27:16	glittershark	yeah? I'll take a look at that, thanks
2016-01-07 23:27:20	bitemyapp	glittershark: failing that, the suppression flags help a lot too
2016-01-07 23:27:28	frerich	dmwit: I guess 'youtu.be link' would've been more accurate :-)
2016-01-07 23:27:37	bitemyapp	glittershark: http://hackage.haskell.org/package/ghc-core yeah so this has colorized output and the like
2016-01-07 23:27:38	Majiir	I read through the Reduceron paper and that was at least interesting
2016-01-07 23:27:43	glittershark	bitemyapp: I've had good luck with opening it in vim and doing :set ft=haskell.
2016-01-07 23:27:49	dmwit	frerich: Somehow my vgrep completely missed it. Not your fault for being imprecise.
2016-01-07 23:27:55	glittershark	-ddump-to-file already indents pretty well
2016-01-07 23:28:07	◀	Guest63961 (nonethousa@dhcp-v238-103.pv.reshsg.uci.edu) has quit (Read error: Connection timed out)
2016-01-07 23:28:14	▶	mac10688 (~mac10688@c-69-180-251-120.hsd1.tn.comcast.net) has joined #haskell
2016-01-07 23:28:14	bitemyapp	glittershark: then -dsuppress-all makes the usual output a lot more readable.
2016-01-07 23:28:19	▶	HaskellHacka (a1b5fd14@gateway/web/cgi-irc/kiwiirc.com/ip.161.181.253.20) has joined #haskell
2016-01-07 23:28:23	bitemyapp	glittershark: try it, if you haven't before. Way less noisy.
2016-01-07 23:28:30	dmwit	Majiir: The STG-machine paper is exactly about how stuff is stored in memory and how evaluation proceeds...
2016-01-07 23:28:32	▶	dgpratt (~dpratt71@pool-72-65-99-242.ptldme.east.myfairpoint.net) has joined #haskell
2016-01-07 23:28:49	▶	Guest63961 (nonethousa@dhcp-v238-103.pv.reshsg.uci.edu) has joined #haskell
2016-01-07 23:28:52	Majiir	dmwit, I will give it a read :-)
2016-01-07 23:28:59	◀	baweaver (~baweaver@173.230.196.25) has quit (Remote host closed the connection)
2016-01-07 23:29:00	glittershark	I'll do that, bitemyapp, thanks
2016-01-07 23:29:18	bitemyapp	glittershark: I had a really hard time reading GHC Core before finding -dsuppress-all :)
2016-01-07 23:29:19	◀	pantsman_ (~pantsman@cpc85034-haye22-2-0-cust50.17-4.cable.virginm.net) has quit (Ping timeout: 256 seconds)
2016-01-07 23:29:21	◀	ompaul (~ompaul@unaffiliated/ompaul) has quit (Quit: and zebedee said its time for other stuff)
2016-01-07 23:29:29	frerich	Majiir: Alas, I'd *really* like to avoid bitemyapp going ballistic again, so I'll refrain from mentioning that 'Programming in Haskell' (the book) has a nice chapter on evaluation strategies (innermost, outermost and whatnot). You can see the slides at http://www.cs.nott.ac.uk/~pszgmh/chapter12.pdf
2016-01-07 23:29:30	bitemyapp	glittershark: I think it was carter_cloud that told me about it.
2016-01-07 23:29:34	bitemyapp	glittershark: cheers :)
2016-01-07 23:29:36	▶	Wes[SA-PHI] (~textual@72.182.46.146) has joined #haskell
2016-01-07 23:29:37	frerich	Majiir: So again, I won't mention that.
2016-01-07 23:29:50	◀	Mongoose (~Mongoose@unaffiliated/mongoose) has left #haskell ("Au Revoir")
2016-01-07 23:29:55	dmwit	bitemyapp: Cool, didn't know about -dsuppress-*
2016-01-07 23:30:01	◀	HaskellHacka (a1b5fd14@gateway/web/cgi-irc/kiwiirc.com/ip.161.181.253.20) has quit (Client Quit)
2016-01-07 23:30:06	bitemyapp	see! they're awesome flags.
2016-01-07 23:30:16	bitemyapp	GHC Core is a freakin' mess if you don't shut at least some of it off.
2016-01-07 23:30:29	ReinH	Majiir: you might also enjoy Thinking Functionally with Haskell for that.
2016-01-07 23:32:24	◀	Neseth (~neseth@unaffiliated/neseth) has quit (Quit: ZNC - 1.6.0 - http://znc.in)
2016-01-07 23:32:29	▶	deavmi_mobile (~deavmi@41.164.24.122) has joined #haskell
2016-01-07 23:33:04	sphinxo	How would I turn this into a GADT? http://lpaste.net/148637
2016-01-07 23:33:25	⚡	hackagebot telegram-api 0.1.0.1 - Telegram Bot API bindings  https://hackage.haskell.org/package/telegram-api-0.1.0.1 (klappvisor)
2016-01-07 23:33:59	▶	jedws (~jedws@c58-109-75-176.randw4.nsw.optusnet.com.au) has joined #haskell
2016-01-07 23:34:02	dmwit	sphinxo: It wouldn't be terribly to turn this into a GADT yet, but:
2016-01-07 23:34:46	▶	albertus1 (~albertus1@x55b5c4d3.dyn.telefonica.de) has joined #haskell
2016-01-07 23:35:06	▶	davyjones (~davyjones@85.17.30.206) has joined #haskell
2016-01-07 23:35:07	dmwit	data Expr a where Lit :: Lit -> Expr Lit; (:+:) :: Expr a -> Expr a -> Expr a; (:*:) :: Expr a -> Expr a -> Expr a
2016-01-07 23:35:11	dmwit	would be one way
2016-01-07 23:35:42	dmwit	s/terribly/terribly useful/
2016-01-07 23:36:18	▶	srpx (b3d25081@gateway/web/freenode/ip.179.210.80.129) has joined #haskell
2016-01-07 23:36:23	sphinxo	hmm ok
2016-01-07 23:36:25	▶	nerfando (~textual@187.121.129.18) has joined #haskell
2016-01-07 23:36:49	srpx	Is it impossible to have list functions such as cons, nil, reverse on the simply typed lc?
2016-01-07 23:36:51	◀	zeroed (~zeroed@unaffiliated/zeroed) has quit (Quit: leaving)
2016-01-07 23:37:01	andromeda-galaxy	also, about ghcjs: Luite talked about using Cloud Haskell with ghcjs last May (https://yow.eventer.com/yow-lambda-jam-2015-1305/heterogeneous-computation-with-cloud-haskell-and-ghcjs-by-luite-stegeman-1899), but said that it wasn't possible to use it yet; does anyone know what the hcurrent status is?
2016-01-07 23:37:02	◀	nerfando (~textual@187.121.129.18) has quit (Max SendQ exceeded)
2016-01-07 23:37:13	◀	k_bx (b25ea964@gateway/web/cgi-irc/kiwiirc.com/ip.178.94.169.100) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2016-01-07 23:37:18	srpx	I would think it is since those need polymorphic functions, but, when I think about it, if you just don't annotate types and use inference, then you'll have proper solid types such as List Int, so that should work?
2016-01-07 23:37:22	◀	davyjones (~davyjones@85.17.30.206) has left #haskell ("Leaving...later guys!")
2016-01-07 23:37:35	▶	nerfando (~textual@187.121.129.18) has joined #haskell
2016-01-07 23:37:50	▶	baweaver (~baweaver@173.230.196.25) has joined #haskell
2016-01-07 23:37:54	◀	michaelneale (~textual@1.144.97.15) has quit (Ping timeout: 255 seconds)
2016-01-07 23:38:17	sbrg	If I have a project that uses lts-3.10 and I'd like to convert to 4.0, how would I go about doing this? I would like the newer versions of the packages in the snapshot.
2016-01-07 23:38:24	▶	k_bx (b25ea964@gateway/web/cgi-irc/kiwiirc.com/ip.178.94.169.100) has joined #haskell
2016-01-07 23:38:32	srpx	i.e., you can't write "cons :: ∀ a . a -> List a -> List a", but you can leave the type later and allow the inferencer to see that, in "cons 1 []", "cons : Int -> List Int -> List Int"
2016-01-07 23:38:32	▶	michaelneale (~textual@1.129.96.231) has joined #haskell
2016-01-07 23:38:35	◀	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2016-01-07 23:38:38	◀	VeiledSpectre (~Faust@static-72-94-30-36.phlapa.fios.verizon.net) has quit (Quit: Leaving)
2016-01-07 23:38:44	srpx	makes sense?
2016-01-07 23:38:57	▶	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has joined #haskell
2016-01-07 23:39:06	dmwit	You can have `consInt :: Int -> List Int -> List Int`, yes.
2016-01-07 23:39:22	Tuplanolla	Yes, but where does that definition live before you specialize the type?
2016-01-07 23:39:25	dmwit	Provided your STLC has provision for data types at all, of course.
2016-01-07 23:40:05	◀	L8D (~L8D@216.201.168.18) has quit (Ping timeout: 272 seconds)
2016-01-07 23:40:06	dolio	Parameterized data types, too. Very advanced.
2016-01-07 23:40:36	dmwit	Oh, yes, it might have to be `consInt :: Int -> IntList -> IntList`. Good point.
2016-01-07 23:40:54	▶	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2016-01-07 23:40:57	carter_cloud	bitemyapp: yeah was me.  Though I think Dolio then popularized it
2016-01-07 23:41:11	▶	Denommus (~user@unaffiliated/denommus) has joined #haskell
2016-01-07 23:41:16	ℹ	slasktask is now known as kungp
2016-01-07 23:41:24	▶	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has joined #haskell
2016-01-07 23:41:33	◀	Wes[SA-PHI] (~textual@72.182.46.146) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-01-07 23:41:35	◀	michaelneale (~textual@1.129.96.231) has quit (Read error: Connection reset by peer)
2016-01-07 23:41:38	dolio	I'd be surprised. I was writing a vim mode to make ghc core less noisy because I didn't know about the suppress stuff when I gave a presentation on it.
2016-01-07 23:41:53	▶	michaelneale (~textual@1.129.96.231) has joined #haskell
2016-01-07 23:41:55	sphinxo	Could this be simplified? snd $ runIdentity $ runKleisli (elimWriter program) initial
2016-01-07 23:42:04	sphinxo	where initial = undefined :: n
2016-01-07 23:42:05	◀	Tehnix (~nobody@ec2-52-8-178-236.us-west-1.compute.amazonaws.com) has quit (Remote host closed the connection)
2016-01-07 23:42:06	▶	slackircbot (~nobody@ec2-52-8-113-46.us-west-1.compute.amazonaws.com) has joined #haskell
2016-01-07 23:42:22	◀	slackircbot (~nobody@ec2-52-8-113-46.us-west-1.compute.amazonaws.com) has left #haskell
2016-01-07 23:42:23	▶	Tehnix (~nobody@ec2-52-8-81-103.us-west-1.compute.amazonaws.com) has joined #haskell
2016-01-07 23:42:32	▶	Wes[SA-PHI] (~textual@72.182.46.146) has joined #haskell
2016-01-07 23:42:36	sphinxo	What am I doing: http://lpaste.net/148638
2016-01-07 23:42:47	sphinxo	have an lpaste
2016-01-07 23:43:49	sphinxo	X86_64 is type X86_64 a b = WriterArrow [Instr] (Kleisli Identity) a b
2016-01-07 23:44:28	srpx	dmwit: I see, but do you need a new definition of `cons` for each new specialized list type, or is it possible to have a single definition of cons?
2016-01-07 23:44:53	dmwit	I doubt you could have a single definition.
2016-01-07 23:44:54	srpx	dmwit: (I asked this on SO as I need to go, in case anyone is interested.)
2016-01-07 23:45:18	dmwit	Having a single definition is sort of the motivation for polymorphism in the first place.
2016-01-07 23:46:12	dmwit	In fact, let me strengthen from "I doubt" to just saying it: you can not have a single term with two different types in STLC.
2016-01-07 23:47:01	glittershark	how necessary is it to put in {-# INLINE #-} pragmas for nullary (basically constant) functions
2016-01-07 23:47:04	glittershark	?
2016-01-07 23:47:11	▶	Uakh (~Uakh@103.17.46.214) has joined #haskell
2016-01-07 23:47:55	bitemyapp	glittershark: what's a nullary function?
2016-01-07 23:48:01	bitemyapp	glittershark: you mean a constant function?
2016-01-07 23:48:11	dmwit	I think he means a constant.
2016-01-07 23:48:16	dmwit	As in, not a function at all.
2016-01-07 23:48:18	bitemyapp	oh
2016-01-07 23:48:22	glittershark	yeah
2016-01-07 23:48:27	glittershark	nullary meaning 0-arity
2016-01-07 23:48:28	⚡	hackagebot airship 0.4.2.0 - A Webmachine-inspired HTTP library  https://hackage.haskell.org/package/airship-0.4.2.0 (reiddraper)
2016-01-07 23:48:28	glittershark	sorry
2016-01-07 23:48:30	glittershark	words
2016-01-07 23:48:34	bitemyapp	if it's not a function, I don't think it's necessary.
2016-01-07 23:48:40	bitemyapp	there's no "body" to inline.
2016-01-07 23:48:45	glittershark	well, the body is a value
2016-01-07 23:48:50	glittershark	a string literal, in this case
2016-01-07 23:48:54	◀	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2016-01-07 23:48:55	dmwit	It is likely a time/space tradeoff as usual. Bigger code size vs. only evaluating the stupid thing once.
2016-01-07 23:49:00	◀	Wes[SA-PHI] (~textual@72.182.46.146) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-07 23:49:10	◀	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has quit (Remote host closed the connection)
2016-01-07 23:49:15	bitemyapp	I think dmwit has it.
2016-01-07 23:49:20	glittershark	does it make a difference that the annotated return value of the function is polymorphic?
2016-01-07 23:49:20	srpx	dmwit: ah, okay, thank you. So the whole point of system F is that it works kinda like a well behaved macro system, allowings you to write only one definition, but, after compilation, everything becomes a solid type...?
2016-01-07 23:49:22	▶	Wes[SA-PHI] (~textual@cpe-72-182-46-146.austin.res.rr.com) has joined #haskell
2016-01-07 23:49:31	bitemyapp	glittershark: This is like let-floating something out vs. having the literal mentioned multiple times.
2016-01-07 23:49:34	glittershark	`myFun :: IsString a => a; myFun = "some_value"`
2016-01-07 23:49:44	dmwit	srpx: Well, System F adds more than just polymorphism.
2016-01-07 23:49:45	◀	fmauro (~fmauro@5.145.17.181) has quit (Ping timeout: 250 seconds)
2016-01-07 23:49:46	dmwit	srpx: But yes.
2016-01-07 23:49:48	bitemyapp	glittershark: if it's polymorphic, it can't get shared anyway.
2016-01-07 23:50:03	▶	nkhodyunya (~Adium@171.33.253.32) has joined #haskell
2016-01-07 23:50:03	glittershark	well, not unless I specialise it
2016-01-07 23:50:09	glittershark	which I will
2016-01-07 23:50:16	bitemyapp	you are good at adding wrinkles here
2016-01-07 23:50:20	srpx	What else does it add?
2016-01-07 23:50:20	glittershark	heh
2016-01-07 23:50:28	▶	zoku (kaizoku@unaffiliated/kaizoku) has joined #haskell
2016-01-07 23:50:37	glittershark	this probably doesn't matter, I'm just curious about what GHC will do as a learning experience
2016-01-07 23:51:04	zoku	I want to parse a really basic string, building an entire parsec thing for it seems like overkill
2016-01-07 23:51:05	srpx	System F (...) is a typed lambda calculus that differs from the simply typed lambda calculus by the introduction of a mechanism of universal quantification over types. (from wikipedia) - you mean that universal quantification allows more than polymorphism? I thought they were synonymous.
2016-01-07 23:51:09	zoku	if I have "!connect hostname port"
2016-01-07 23:51:18	zoku	how can i just extract the hostname and poart
2016-01-07 23:51:20	dmwit	srpx: I was imprecise. What I meant was that it is in some sense the "maximally polymorphic" system you could have. You could imagine (and there are many extant) systems with less powerful polymorphism.
2016-01-07 23:51:22	zoku	there's no regex method/
2016-01-07 23:51:33	srpx	ah, makes a lot of sense, thank you :)
2016-01-07 23:51:35	▶	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has joined #haskell
2016-01-07 23:51:51	◀	richardiii (~richardii@209.119.95.194) has quit (Remote host closed the connection)
2016-01-07 23:52:05	dolio	I think it's also imprecise to say that the "same term" can't have different types in the simply typed lambda calculus.
2016-01-07 23:52:08	dmwit	srpx: System F includes higher-kinded polymorphism and quantification in arbitrary locations.
2016-01-07 23:52:17	c_wraith	zoku, turns out you don't need a regex to split on spaces
2016-01-07 23:52:30	dolio	In fact, one point is exactly that there are many types for the same term, and no one best type.
2016-01-07 23:52:33	dmwit	srpx: Compare Haskell 2010 which allows quantification only at the top level, or Scala which allows only *-kinded polymorphism.
2016-01-07 23:53:01	c_wraith	> words "!connect host port" -- zoku
2016-01-07 23:53:02	lambdabot	 ["!connect","host","port"]
2016-01-07 23:53:07	dolio	Although it may depend on whether you're Church or Curry style.
2016-01-07 23:53:12	dmwit	dolio: Yes, I was imprecise there, too. Thanks for the corrections.
2016-01-07 23:53:22	srpx	So Haskell 2010 is a little less powerful than system F, that's what you said.
2016-01-07 23:53:26	◀	twilkens (~twilkens@38.84.192.170) has quit (Remote host closed the connection)
2016-01-07 23:53:30	▶	root (~root@185.107.212.94) has joined #haskell
2016-01-07 23:53:33	▶	amyers (~icarus127@c-73-172-13-116.hsd1.md.comcast.net) has joined #haskell
2016-01-07 23:53:35	dmwit	Sure.
2016-01-07 23:53:36	◀	root (~root@185.107.212.94) has left #haskell
2016-01-07 23:54:02	◀	chaosmasttter (~chaosmast@p54B7F8CF.dip0.t-ipconnect.de) has quit (Ping timeout: 260 seconds)
2016-01-07 23:54:09	dmwit	And there's lots of other little languages out there with other restrictions that you might also reasonably call "polymorphic" languages.
2016-01-07 23:54:32	▶	richardiii (~richardii@209.119.95.194) has joined #haskell
2016-01-07 23:54:34	▶	cognominal (~cognomina@29.144.11.109.rev.sfr.net) has joined #haskell
2016-01-07 23:55:01	▶	twilkens (~twilkens@38.84.192.170) has joined #haskell
2016-01-07 23:55:14	zoku	ah, thank you c_wraith 
2016-01-07 23:55:49	srpx	The STLC has a lot of interesting properties. Is there any simple extension of it that allows for scott style lists without losing most of those properties (i.e., fix)?
2016-01-07 23:55:51	◀	k_bx (b25ea964@gateway/web/cgi-irc/kiwiirc.com/ip.178.94.169.100) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2016-01-07 23:56:06	◀	negatratoron (~negatrato@c-107-4-157-85.hsd1.mn.comcast.net) has quit (Remote host closed the connection)
2016-01-07 23:56:15	◀	aaronlevin (~aaronlevi@37.120.18.174) has quit (Ping timeout: 250 seconds)
2016-01-07 23:56:25	◀	ihamid (~ihamid@204.14.239.55) has left #haskell
2016-01-07 23:56:27	dmwit	What properties are you interested in?
2016-01-07 23:56:41	dmwit	(I almost certainly won't know the answer, though. =P)
2016-01-07 23:57:24	▶	Zekka (~zekka@ip24-251-69-145.ph.ph.cox.net) has joined #haskell
2016-01-07 23:57:28	▶	NeverDie (~NeverDie@pool-98-113-171-151.nycmny.fios.verizon.net) has joined #haskell
2016-01-07 23:57:41	▶	grouzen (~grouzen@diagonal-interview.volia.net) has joined #haskell
2016-01-07 23:58:31	c_wraith	well, if fix is being objected to, I bet normalization is one of those properties 
2016-01-07 23:58:39	◀	plucas (~plucas@8.18.218.175) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-07 23:58:43	▶	AfC (~andrew@120.17.180.67) has joined #haskell
2016-01-07 23:58:48	▶	pacak (~pacak@175.156.145.194) has joined #haskell
2016-01-07 23:58:51	srpx	Strong normalization, having a decidable high order unification algorithm, etc
2016-01-07 23:58:53	▶	plucas (~plucas@8.18.218.175) has joined #haskell
2016-01-07 23:59:10	▶	ype (~ype@cpc71145-slam6-2-0-cust167.2-4.cable.virginm.net) has joined #haskell
2016-01-08 00:00:52	srpx	I'm also interested in understanding the complexity boundaries of STLC programs. I think they are much smaller than other calculi, but I'm not sure they are well defined. 
2016-01-08 00:00:52	▶	Luke (~Luke@unaffiliated/luke) has joined #haskell
2016-01-08 00:01:06	srpx	Actually the STLC looks really weird in what it can express and what it can not.
2016-01-08 00:01:45	▶	enthropy (~aavogt@d157-103-21.home4.cgocable.net) has joined #haskell
2016-01-08 00:02:01	▶	augur (~augur@c-73-46-94-9.hsd1.fl.comcast.net) has joined #haskell
2016-01-08 00:02:01	◀	Uakh (~Uakh@103.17.46.214) has quit (Ping timeout: 265 seconds)
2016-01-08 00:02:11	▶	Uakh_ (~Uakh@103.17.46.214) has joined #haskell
2016-01-08 00:02:14	dmwit	...there's a decidable unification algorithm for STLC?
2016-01-08 00:02:35	◀	augur (~augur@c-73-46-94-9.hsd1.fl.comcast.net) has quit (Remote host closed the connection)
2016-01-08 00:03:00	dmwit	(Wikipedia disagrees.)
2016-01-08 00:03:09	▶	augur (~augur@c-73-46-94-9.hsd1.fl.comcast.net) has joined #haskell
2016-01-08 00:03:13	◀	nkhodyunya (~Adium@171.33.253.32) has quit (Quit: Leaving.)
2016-01-08 00:03:24	▶	ziocroc (~ziocroc@151.74.99.167) has joined #haskell
2016-01-08 00:03:35	◀	augur (~augur@c-73-46-94-9.hsd1.fl.comcast.net) has quit (Remote host closed the connection)
2016-01-08 00:03:43	▶	latro`a_ (~latro`a@2601:14a:4002:86bb:31e4:896c:b570:a66d) has joined #haskell
2016-01-08 00:03:51	▶	augur (~augur@c-73-46-94-9.hsd1.fl.comcast.net) has joined #haskell
2016-01-08 00:05:20	◀	lyxia (~lyxia@62.ip-51-255-32.eu) has quit (Quit: WeeChat 1.3)
2016-01-08 00:05:37	▶	lyxia (~lyxia@62.ip-51-255-32.eu) has joined #haskell
2016-01-08 00:05:42	◀	amyers (~icarus127@c-73-172-13-116.hsd1.md.comcast.net) has quit (Ping timeout: 260 seconds)
2016-01-08 00:05:53	◀	mada (~mariano@unaffiliated/madariaga) has quit (Ping timeout: 265 seconds)
2016-01-08 00:06:06	⚡	srpx is trying to remember that paper
2016-01-08 00:06:15	◀	alarmmm (~alarmmm@cpe-65-190-48-161.nc.res.rr.com) has quit (Remote host closed the connection)
2016-01-08 00:07:27	▶	sathish_haskell (~sathish_h@75.143.16.8) has joined #haskell
2016-01-08 00:07:36	▶	amyers (~icarus127@c-73-172-13-116.hsd1.md.comcast.net) has joined #haskell
2016-01-08 00:07:38	dmwit	Anyway. I wouldn't be surprised if you could add polymorphic lists and a polymorphic fold operation as language primitives without breaking strong normalization.
2016-01-08 00:07:56	dmwit	unfold might be a problem, though.
2016-01-08 00:08:05	◀	lyxia (~lyxia@62.ip-51-255-32.eu) has quit (Client Quit)
2016-01-08 00:08:33	dmwit	The usual trick there is to annotate unfold operations with some strictly decreasing measure.
2016-01-08 00:08:39	▶	lyxia (~lyxia@62.ip-51-255-32.eu) has joined #haskell
2016-01-08 00:08:44	dmwit	(So push the proof burden onto the programmer.)
2016-01-08 00:08:45	⚡	srpx gives up
2016-01-08 00:08:52	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Remote host closed the connection)
2016-01-08 00:09:11	◀	caecilius (~caecilius@bdv75-9-88-165-92-126.fbx.proxad.net) has quit (Ping timeout: 276 seconds)
2016-01-08 00:09:46	◀	kurt11 (~Adium@207.191.34.198) has quit (Quit: Leaving.)
2016-01-08 00:09:47	◀	cfricke (~cfricke@unaffiliated/cfricke) has quit (Quit: leaving)
2016-01-08 00:09:49	glittershark	is there some way to "get past" functional dependencies the way I can with overlapping/overlappable instances?
2016-01-08 00:09:50	◀	NoCreativity (~quassel@179.176.26.219.dynamic.adsl.gvt.net.br) has quit (Read error: Connection reset by peer)
2016-01-08 00:09:51	◀	lyxia (~lyxia@62.ip-51-255-32.eu) has quit (Client Quit)
2016-01-08 00:10:18	▶	lyxia (~lyxia@62.ip-51-255-32.eu) has joined #haskell
2016-01-08 00:10:29	glittershark	I have a library I'm depending on that defines an instance of MonadError for a monad transformer that I don't want to use for my type that's a specialization of that monad transformer
2016-01-08 00:10:41	jle`	hm i'm not sure what you mean by "get past".  but a lot of problems that are solved by FunDeps can also be solved in an alternative way using type families
2016-01-08 00:10:43	glittershark	this may make no sense at all, in which case ignore me
2016-01-08 00:10:47	dmwit	glittershark: newtype?
2016-01-08 00:10:54	◀	umib0zu (~umib0zu@c-50-177-152-117.hsd1.ma.comcast.net) has left #haskell
2016-01-08 00:11:02	▶	kurt11 (~Adium@207.191.34.198) has joined #haskell
2016-01-08 00:11:06	glittershark	newtype could do it, yeah
2016-01-08 00:11:29	◀	poopiefacetomato (~rikonor@ool-457b460f.dyn.optonline.net) has quit (Remote host closed the connection)
2016-01-08 00:11:30	glittershark	if I controlled the library I depended on I'd refactor it to use type families, but I don't
2016-01-08 00:11:33	glittershark	wish I did
2016-01-08 00:11:33	▶	caecilius (~caecilius@bdv75-9-88-165-92-126.fbx.proxad.net) has joined #haskell
2016-01-08 00:11:37	◀	richardiii (~richardii@209.119.95.194) has quit (Remote host closed the connection)
2016-01-08 00:11:55	srpx	dmwit: no, but I'd not like to extend the type system with ADTs, but use lambda encodings. I was looking for a type system that can express both church and scott style lists that is as simple as the stlc
2016-01-08 00:12:03	dmwit	I doubt that would help anyway if I'm understanding your problem correctly.
2016-01-08 00:12:06	xplat|work	but you can't spell FunDeps without Fun
2016-01-08 00:12:11	◀	baweaver (~baweaver@173.230.196.25) has quit (Remote host closed the connection)
2016-01-08 00:12:13	srpx	In an unrelated note, any idea how the lambda cube relates with light/linear type system? I can't make the connection
2016-01-08 00:12:24	srpx	I know both things exist but I don't see how they relate
2016-01-08 00:13:15	glittershark	looks like what I want to do isn't possible
2016-01-08 00:13:16	glittershark	dang
2016-01-08 00:13:21	xplat|work	srpx: the only type systems i know that handles church/scott encodings of 'interesting types' well are System F and i guess System Fw
2016-01-08 00:13:28	kaiyin	how do you from what package you are importing when you import something?
2016-01-08 00:13:34	kaiyin	how do you know.
2016-01-08 00:13:34	xplat|work	but they definitely aren't as simple as the stlc
2016-01-08 00:13:44	srpx	xplat|work: system F doesn't handle scott encodings, does it?
2016-01-08 00:13:55	glittershark	kaiyin: :i in ghci will tell you what file something is defined in
2016-01-08 00:13:57	srpx	even CC can't express them 
2016-01-08 00:14:05	◀	Xzip (~Xzip@81-230-143-111-no169.tbcn.telia.com) has quit (Ping timeout: 256 seconds)
2016-01-08 00:14:07	▶	HaskellHacka (a1b5fd14@gateway/web/cgi-irc/kiwiirc.com/ip.161.181.253.20) has joined #haskell
2016-01-08 00:14:27	kaiyin	glittershark: only if I have already imported it. 
2016-01-08 00:14:48	▶	R0b0t1 (~realname@unaffiliated/r0b0t1) has joined #haskell
2016-01-08 00:15:00	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-08 00:15:09	kaiyin	glittershark: when you read someone else's code, how do you which module is from which package?
2016-01-08 00:15:17	kaiyin	know.
2016-01-08 00:15:20	glittershark	heh
2016-01-08 00:15:28	glittershark	you clone the code
2016-01-08 00:15:30	xplat|work	oh, right, you need recursively typed System F for Scott encodings and that isn't nice like System F
2016-01-08 00:15:37	glittershark	and launch ghci on it :)
2016-01-08 00:15:52	◀	chrisramsey (~chrisrams@192.171.117.210) has quit (Remote host closed the connection)
2016-01-08 00:16:00	◀	amyers (~icarus127@c-73-172-13-116.hsd1.md.comcast.net) has quit (Read error: Connection reset by peer)
2016-01-08 00:16:01	◀	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has quit (Remote host closed the connection)
2016-01-08 00:16:01	kaiyin	ok. sounds tedious. 
2016-01-08 00:16:21	xplat|work	srpx: well, when it comes to encodings of ADTs as pure functions the usual notion of 'more expressive' sometimes doesn't hold
2016-01-08 00:16:25	▶	amyers (~icarus127@c-73-172-13-116.hsd1.md.comcast.net) has joined #haskell
2016-01-08 00:16:28	frerich	kaiyin: You can also just stick a module name into e.g. Hayoo and see if it finds it in any package.
2016-01-08 00:16:35	Tuplanolla	Packages are specified in *.cabal files or with PackageImports, kaiyin.
2016-01-08 00:16:39	frerich	kaiyin: Like http://hayoo.fh-wedel.de/?query=Text.Parsec
2016-01-08 00:16:42	◀	osa1 (~omer@haskell/developer/osa1) has quit (Ping timeout: 240 seconds)
2016-01-08 00:16:52	▶	conal (~textual@104.255.240.10) has joined #haskell
2016-01-08 00:16:57	xplat|work	at least if you want a total language, i guess it works if you just blindly throw in impredicativity
2016-01-08 00:17:09	▶	MrDetonia (~MrDetonia@unaffiliated/mrdetonia) has joined #haskell
2016-01-08 00:17:28	kaiyin	ok, thanks, guys. 
2016-01-08 00:17:47	sphinxo	I have these data structures http://lpaste.net/148639
2016-01-08 00:17:50	srpx	what is troubling me is that scott encodings look very total, well behaved. there is nothing recursive or wild about them
2016-01-08 00:18:18	srpx	looks unfair to remove them from a language, they can do useful things that you can't do without them
2016-01-08 00:18:22	sphinxo	how would I remove push r, pop r from a list of instr?
2016-01-08 00:18:28	⚡	hackagebot not-gloss-examples 0.5.1.1 - examples for not-gloss  https://hackage.haskell.org/package/not-gloss-examples-0.5.1.1 (GregHorn)
2016-01-08 00:18:52	lyxia	sphinxo: filter
2016-01-08 00:19:18	sphinxo	I kind of came up with something like this http://lpaste.net/148640
2016-01-08 00:19:44	lyxia	ah I misread you
2016-01-08 00:20:04	Tuplanolla	You can pattern match on x : y : zs or try this fun thing: zip <*> tail
2016-01-08 00:20:06	◀	Ziltrum (~Destol@public-251-249.nat.utoronto.ca) has quit (Ping timeout: 246 seconds)
2016-01-08 00:20:29	sphinxo	Could you explain zip <*> tail ?
2016-01-08 00:20:48	Tuplanolla	Try it and see.
2016-01-08 00:21:03	▶	k_bx (b25ea964@gateway/web/cgi-irc/kiwiirc.com/ip.178.94.169.100) has joined #haskell
2016-01-08 00:21:21	lyxia	I don't think it will be useful here
2016-01-08 00:21:23	sphinxo	hmm [a] -> [(a, a)]
2016-01-08 00:21:23	◀	amyers (~icarus127@c-73-172-13-116.hsd1.md.comcast.net) has quit (Ping timeout: 250 seconds)
2016-01-08 00:21:40	lyxia	But I agree with the suggestion of pattern matching
2016-01-08 00:21:52	▶	Jesin (~Jesin@pool-108-45-39-144.washdc.fios.verizon.net) has joined #haskell
2016-01-08 00:22:15	xplat|work	srpx: 'you can do useful things with them that you can't do without them' is one of the two best reasons to remove something from a language
2016-01-08 00:22:25	sphinxo	How would I match for cases when they are both the same, instead of implemeting it for RAX, RBX ?
2016-01-08 00:22:36	xplat|work	srpx: the other being 'you can't do useful things with them that you can't do without them'
2016-01-08 00:22:44	◀	k_bx (b25ea964@gateway/web/cgi-irc/kiwiirc.com/ip.178.94.169.100) has quit (Client Quit)
2016-01-08 00:22:58	▶	L8D (~L8D@cpe-70-123-155-208.austin.res.rr.com) has joined #haskell
2016-01-08 00:22:59	◀	mbwe (~mbwe@535485BC.cm-6-5c.dynamic.ziggo.nl) has quit (Quit: WeeChat 1.3)
2016-01-08 00:23:02	◀	spuz (~spuzz@host-78-149-207-230.as13285.net) has quit (Ping timeout: 240 seconds)
2016-01-08 00:23:47	lyxia	sphinxo: use guards: optimize (Push r : Pop r' : instrs) | r == r' = ...
2016-01-08 00:24:13	▶	montanonic (~nicholas@c-67-170-140-148.hsd1.or.comcast.net) has joined #haskell
2016-01-08 00:24:34	frerich	Where '...' would be just 'instrs' :-)
2016-01-08 00:24:50	◀	ril (~ril@199-230-11-50.PUBLIC.monkeybrains.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-08 00:24:58	sphinxo	oh my god, never seen that syntax before :)
2016-01-08 00:25:05	sphinxo	That is awesome
2016-01-08 00:25:24	sphinxo	Haskell why u gotta keep blowin my mind
2016-01-08 00:25:25	lyxia	hah
2016-01-08 00:25:27	▶	yfeldblum (~yfeldblum@2620:10d:c090:200::c:69b) has joined #haskell
2016-01-08 00:25:51	lyxia	frerich: you might want to optimize them too :)
2016-01-08 00:25:55	srpx	xplat|work: I'm not sure I understand what you mean
2016-01-08 00:26:12	frerich	lyxia: True!
2016-01-08 00:26:20	exio4	sphinxo: one thing, you should keep the (x : xs) = x : optimize xs clause at the end
2016-01-08 00:26:36	kaiyin	how do you expose all modules in src/ with stack?
2016-01-08 00:26:59	xplat|work	srpx: one of the things you learn after some time is that very often the only way to be able to do one thing is to be unable to do something else
2016-01-08 00:27:18	sphinxo	Thanks, exio4 
2016-01-08 00:27:28	Tuplanolla	Test case to consider, sphinxo: Push x : Push y : Pop y : Pop x : zs.
2016-01-08 00:27:43	mgsloan	kaiyin: Add them to your "exposed-modules" list in your .cabal file
2016-01-08 00:27:44	◀	jedws (~jedws@c58-109-75-176.randw4.nsw.optusnet.com.au) has quit (Quit: Computer has gone to sleep.)
2016-01-08 00:27:59	kaiyin	mgsloan: do i have to add them individually?
2016-01-08 00:28:00	xplat|work	e.g. the only way to have general recursion is to be unable to determine whether code is reachable
2016-01-08 00:28:07	srpx	xplat|work: I think I see what you mean, but I feel like scott encoded adts are very inoffensive in that sense. Is that incorrect?
2016-01-08 00:28:07	◀	csd_ (~chris@pool-108-30-122-128.nycmny.fios.verizon.net) has quit (Ping timeout: 265 seconds)
2016-01-08 00:28:09	◀	NeverDie (~NeverDie@pool-98-113-171-151.nycmny.fios.verizon.net) has quit (Ping timeout: 246 seconds)
2016-01-08 00:28:18	sphinxo	Thanks Tuplanolla 
2016-01-08 00:28:26	jle`	i'm offended
2016-01-08 00:28:46	◀	Encapsulation (~Astoundin@unaffiliated/encapsulation) has quit (Remote host closed the connection)
2016-01-08 00:28:52	xplat|work	or the only way to have functional extensionality is to be unable to analyze the syntactic form of functions
2016-01-08 00:29:02	kaiyin	mgsloan: I would like to specify all of them without listing single filenames. Like * in linux shell.
2016-01-08 00:29:10	◀	TheLemonMan (~lemonboy@unaffiliated/thelemonman) has quit (Quit: "It's now safe to turn off your computer.")
2016-01-08 00:29:17	Tuplanolla	You'll see that a single pass with mere pattern matching won't work, sphinxo.
2016-01-08 00:29:32	▶	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has joined #haskell
2016-01-08 00:29:59	▶	aaronlevin (~aaronlevi@37.120.18.174) has joined #haskell
2016-01-08 00:30:02	sphinxo	Hows this? http://lpaste.net/148641
2016-01-08 00:30:03	◀	athan (~athan@c-73-153-199-28.hsd1.co.comcast.net) has quit (Read error: Connection reset by peer)
2016-01-08 00:30:17	◀	gameer (~chatzilla@p5B3A039C.dip0.t-ipconnect.de) has quit (Quit: ChatZilla 0.9.92 [Firefox 43.0.4/20160105164030])
2016-01-08 00:30:45	▶	NeverDie (~NeverDie@pool-98-113-171-151.nycmny.fios.verizon.net) has joined #haskell
2016-01-08 00:30:45	sphinxo	Any other optimizations I could do?
2016-01-08 00:30:57	mgsloan	kaiyin: You might like https://github.com/sol/hpack .  It generates .cabal files, and allows a more concise specification, including inferring lists like exposed-modules / other-modules
2016-01-08 00:30:57	Tuplanolla	How's this: Push x : Push y : Push z : Pop z' : Pop y' : Pop x' : zs?
2016-01-08 00:31:06	◀	klarrt (~bsdwrk@85.24.204.171) has quit (Ping timeout: 245 seconds)
2016-01-08 00:31:09	mgsloan	kaiyin: It's pretty new, and still WIP.  Looks promising, though.
2016-01-08 00:31:25	frerich	sphinxo: *Any* sequence of Push,Push,Push..Pop,Pop,Pop which is symmetric can probably be dropped.
2016-01-08 00:31:27	exio4	Tuplanolla: let's just keep optimizing until there's no remaining optimization to apply
2016-01-08 00:31:31	◀	[edwtjo] (~edwtjo@h-62-68.a213.priv.bahnhof.se) has quit (Ping timeout: 245 seconds)
2016-01-08 00:31:36	sphinxo	Thanks
2016-01-08 00:31:37	Tuplanolla	Very good.
2016-01-08 00:31:44	exio4	Tuplanolla: I hacked it that way >:D 
2016-01-08 00:31:49	▶	[edwtjo] (~edwtjo@h-62-68.a213.priv.bahnhof.se) has joined #haskell
2016-01-08 00:31:55	kaiyin	ok. thanks.
2016-01-08 00:31:59	sphinxo	frerich: Is there any neat way of doing that?
2016-01-08 00:32:00	exio4	sphinxo: which language are you optimizing?
2016-01-08 00:32:03	frerich	sphinxo: What does your 'Instr' type look like? Just push and pop?
2016-01-08 00:32:12	◀	AfC (~andrew@120.17.180.67) has quit (Read error: Connection reset by peer)
2016-01-08 00:32:14	exio4	brainfuck?
2016-01-08 00:32:21	◀	mak` (~mak@lokalhost.pl) has quit (Ping timeout: 246 seconds)
2016-01-08 00:32:21	▶	klarrt (~bsdwrk@85.24.204.171) has joined #haskell
2016-01-08 00:32:26	frerich	exio4: I think brainfuck has no push and pop
2016-01-08 00:32:30	◀	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has quit (Remote host closed the connection)
2016-01-08 00:32:31	sphinxo	and set, add and mul 
2016-01-08 00:32:48	Tuplanolla	This problem is especially nice when your optimizations aren't always reductions.
2016-01-08 00:33:11	sphinxo	I'm writing (trying to at least) a little stack based compiler
2016-01-08 00:33:12	Tuplanolla	It becomes rewriting problem and the existence of a fixed point must be proven by hand.
2016-01-08 00:33:29	lyxia	compiledPrg = fix optimize -- bad idea
2016-01-08 00:33:36	frerich	sphinxo: You could optimize subsequent 'set' to the same variable to just use the same variable. Or 'add 0 x' and 'mul 1 x' being dropped. but it can get trick: e.g. 'mul 0 x' could be a 'set' command and then the first optimization may be applicable.
2016-01-08 00:33:55	◀	klapku (~ola@91a189b37c153.greendata.pl) has quit (Ping timeout: 256 seconds)
2016-01-08 00:34:17	▶	rowandavies (8ca88701@gateway/web/freenode/ip.140.168.135.1) has joined #haskell
2016-01-08 00:34:29	frerich	If you have no I/O, you could just evaluate the program and end with a single 'set' or so :-)
2016-01-08 00:34:35	sphinxo	:)
2016-01-08 00:34:49	sphinxo	I'm going to lower to asm :) 
2016-01-08 00:34:50	▶	Coldblackice_ (~anonz@unaffiliated/coldblackice) has joined #haskell
2016-01-08 00:34:58	sphinxo	I'll have some IO
2016-01-08 00:35:05	▶	cdg (~cdg@157.166.175.129) has joined #haskell
2016-01-08 00:35:11	◀	Coldblackice (~anonz@unaffiliated/coldblackice) has quit (Ping timeout: 276 seconds)
2016-01-08 00:35:20	▶	Pokinawa (~Ezalor@cpc92312-cmbg19-2-0-cust775.5-4.cable.virginm.net) has joined #haskell
2016-01-08 00:35:27	◀	cyborg-one (~cyborg-on@31.31.100.51) has quit (Ping timeout: 260 seconds)
2016-01-08 00:35:29	Tuplanolla	This is useful if your rules have no structure, but definitely terminate: fixUntil :: (a -> a -> Bool) -> (a -> a) -> a -> a.
2016-01-08 00:35:32	◀	jetpacmonkey (~jeremytic@38.108.221.50) has quit (Ping timeout: 240 seconds)
2016-01-08 00:35:59	▶	richardiii (~richardii@209.119.95.194) has joined #haskell
2016-01-08 00:36:32	◀	Deadhand (~deadf00t@69-196-158-136.dsl.teksavvy.com) has quit (Ping timeout: 240 seconds)
2016-01-08 00:36:42	◀	pauliprice (~paulipric@207.251.103.46) has quit (Ping timeout: 240 seconds)
2016-01-08 00:37:00	srpx	dmwit: so high order unification is decidable on the pattern fragment, and there are 80680 papers about that, but I really remember a guy on reddit pmed me pretty excited about something about a new result on unification on the stlc, and that he was trying to implement it
2016-01-08 00:37:07	srpx	I hate when I can't remember cool things
2016-01-08 00:37:25	sphinxo	Tuplanolla: What do you mean by rules?
2016-01-08 00:37:30	▶	mybenotarobot (~robert@152.232.219.237) has joined #haskell
2016-01-08 00:37:32	ReinH	lyxia: but almost a good idea
2016-01-08 00:37:34	▶	ril (~ril@c-98-210-195-123.hsd1.ca.comcast.net) has joined #haskell
2016-01-08 00:37:37	ℹ	irc: disconnected from server
2016-01-10 19:37:39	▶	psyq (~Psyq@unaffiliated/psyq) has joined #haskell
2016-01-10 19:37:39	ℹ	Topic for #haskell is "http://www.haskell.org/ | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | http://reddit.com/r/haskell | Administrative issues: #haskell-ops | Hackage status? http://status.haskell.org | http://downloads.haskell.org"
2016-01-10 19:37:39	ℹ	Topic set by quicksilver on Wed, 07 Oct 2015 16:39:51
2016-01-10 19:37:39	ℹ	Channel #haskell: 1545 nicks (1 op, 0 voices, 1544 normals)
2016-01-10 19:37:39	ℹ	URL for #haskell: http://www.haskell.org/
2016-01-10 19:37:42	ℹ	Channel created on Sun, 26 Nov 2006 07:42:48
2016-01-10 19:37:51	opqdonut	that's a pretty clear case for the Either monad
2016-01-10 19:38:13	opqdonut	but you can also simplify it a lot with guards
2016-01-10 19:38:18	◀	griotspeak (~textual@c-73-237-161-156.hsd1.ga.comcast.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-10 19:38:36	◀	poopiefacetomato (~rikonor@ool-457b460f.dyn.optonline.net) has quit (Remote host closed the connection)
2016-01-10 19:39:31	◀	lolisa (~marisa@205.175.98.190) has quit (Quit: meow)
2016-01-10 19:39:32	▶	Maplicant (~MorrisC@5ED37677.cm-7-4b.dynamic.ziggo.nl) has joined #haskell
2016-01-10 19:39:43	▶	oish (~charlie@159.22.169.217.in-addr.arpa) has joined #haskell
2016-01-10 19:39:56	hsk3	opqdonut: can you provide example?
2016-01-10 19:40:09	hsk3	of the Either monad particularly
2016-01-10 19:40:14	▶	beepbeep_ (~beepbeep_@78-23-142-12.access.telenet.be) has joined #haskell
2016-01-10 19:40:36	opqdonut	just a sec
2016-01-10 19:40:45	▶	lyuha (uid43824@gateway/web/irccloud.com/x-ltydoozbjviddmpr) has joined #haskell
2016-01-10 19:40:51	▶	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has joined #haskell
2016-01-10 19:41:08	▶	achernyak (~artem@24-217-172-238.dhcp.stls.mo.charter.com) has joined #haskell
2016-01-10 19:42:11	tnks	monochrom: I think the answer to my question of when tagless becomes less of a fit might be for algorithms easily expressed in terms of pattern matching
2016-01-10 19:42:30	◀	nathanic (~nathan@c-73-51-93-231.hsd1.il.comcast.net) has quit (Ping timeout: 265 seconds)
2016-01-10 19:42:31	tnks	I'm kind of piece together discussions and what I can see myself.
2016-01-10 19:42:33	◀	latk (~textual@cpc91232-cmbg18-2-0-cust847.5-4.cable.virginm.net) has quit (Ping timeout: 240 seconds)
2016-01-10 19:42:54	▶	abhixec (~archmonk@c-50-174-16-226.hsd1.ca.comcast.net) has joined #haskell
2016-01-10 19:43:11	◀	JCI (~JCI@168.235.67.145) has quit (Ping timeout: 272 seconds)
2016-01-10 19:43:12	▶	Arker (~arker@103.37.201.105) has joined #haskell
2016-01-10 19:43:15	◀	SaTa (~thedude@182.185.209.28) has quit (Ping timeout: 276 seconds)
2016-01-10 19:43:18	tnks	(and talking out loud here to shape some opinions and see if anyone thinks I'm off track)
2016-01-10 19:43:56	▶	hannelita (~hannelita@2804:14c:a8:27a5:602d:b610:6038:6831) has joined #haskell
2016-01-10 19:44:14	opqdonut	hsk3: http://lpaste.net/148777
2016-01-10 19:44:37	opqdonut	hsk3: heh, also lpaste has some good recommendations there :P
2016-01-10 19:44:45	◀	ttuegel (~quassel@2601:240:8000:699f::e90) has quit (Read error: No route to host)
2016-01-10 19:44:50	hsk3	ROFL that is succinct as hell!!!
2016-01-10 19:44:51	hsk3	nice!
2016-01-10 19:44:58	hsk3	thanks
2016-01-10 19:45:03	opqdonut	https://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Error.html
2016-01-10 19:45:05	▶	ttuegel (~quassel@2601:240:8000:699f::e90) has joined #haskell
2016-01-10 19:45:15	opqdonut	that's what I used, it's in the standard library
2016-01-10 19:45:29	opqdonut	it recommends Control.Monad.Except, which I haven't used
2016-01-10 19:45:37	▶	cchalmers (~textual@cpc1-shep13-2-0-cust104.8-3.cable.virginm.net) has joined #haskell
2016-01-10 19:45:58	▶	superturrican1 (~superturr@186.61.106.92.dynamic.wline.res.cust.swisscom.ch) has joined #haskell
2016-01-10 19:46:14	▶	poopiefacetomato (~rikonor@ool-457b460f.dyn.optonline.net) has joined #haskell
2016-01-10 19:46:16	opqdonut	oh it's a drop-in replacement
2016-01-10 19:46:19	◀	deavmi_mobile (~deavmi@41.164.24.122) has quit (Read error: Connection reset by peer)
2016-01-10 19:46:40	▶	deavmi_mobile (~deavmi@41.164.24.122) has joined #haskell
2016-01-10 19:47:10	▶	OrangeShark (~OrangeSha@2602:306:c5c9:a3e0:9977:134a:b140:a8e1) has joined #haskell
2016-01-10 19:47:19	opqdonut	only available with a new enough mtl though
2016-01-10 19:47:26	◀	superturrican (~superturr@186.61.106.92.dynamic.wline.res.cust.swisscom.ch) has quit (Ping timeout: 260 seconds)
2016-01-10 19:47:36	broma0	My goal is both minimalism and correctness. What are some of the best tools provided by haskell to minimize the amount of code one must write to solve an arbitrary problem without sacrificing type safety? 
2016-01-10 19:47:52	◀	abhixec (~archmonk@c-50-174-16-226.hsd1.ca.comcast.net) has quit (Ping timeout: 250 seconds)
2016-01-10 19:48:30	◀	oisdk_ (~oisdk_@95.45.70.25) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-01-10 19:49:00	◀	broma0 (~broma0@83.149.124.214) has quit (Remote host closed the connection)
2016-01-10 19:49:01	▶	oisdk_ (~oisdk_@95.45.70.25) has joined #haskell
2016-01-10 19:49:09	▶	H4ns (hans@netzhansa.com) has joined #haskell
2016-01-10 19:49:24	▶	broma0 (~broma0@ool-182e23f2.dyn.optonline.net) has joined #haskell
2016-01-10 19:49:30	◀	hannelita (~hannelita@2804:14c:a8:27a5:602d:b610:6038:6831) has quit (Ping timeout: 264 seconds)
2016-01-10 19:49:46	▶	xylen_ (~codywelsh@c-73-189-204-160.hsd1.ca.comcast.net) has joined #haskell
2016-01-10 19:49:46	opqdonut	hsk3: I added a version that used pattern matching and guards, it's pretty ok too
2016-01-10 19:50:34	H4ns	hi.  i'm new trying to use a haskell based system (using stack on osx) and see the message "Could not find module ‘Development.Shake’".  i'm guessing that i need to install shake but i don't know how.  any pointers?
2016-01-10 19:50:45	opqdonut	hsk3: and also, since when actually has type "Monad m => Bool -> m () -> m ()", the "return ()" in the monad version is unnecessary
2016-01-10 19:51:23	kadoban	H4ns: Under what circumstances are you getting that error, and what's the rest of the message?
2016-01-10 19:51:49	hsk3	opqdonut: why unnecessary?
2016-01-10 19:51:58	frerich	broma0: Higher-order functions for the former, (polymorphic) types for the latter.
2016-01-10 19:52:13	H4ns	kadoban: complete output is here: http://pastebin.com/QvuKr4Uc
2016-01-10 19:52:24	opqdonut	hsk3: "when False" is the same as "return ()"
2016-01-10 19:52:26	▶	binaryplease (~binaryple@xdsl-78-34-143-220.netcologne.de) has joined #haskell
2016-01-10 19:52:39	tnks	H4ns: with stack you can pretty easily install applications, by going outside a project and typing "stack install shake"
2016-01-10 19:52:49	tnks	and it will typically put it in ~/.local/bin
2016-01-10 19:52:54	◀	ttuegel (~quassel@2601:240:8000:699f::e90) has quit (Read error: No route to host)
2016-01-10 19:52:56	tnks	and you can put that on your PATH.
2016-01-10 19:52:59	▶	ttuegel_ (~quassel@2601:240:8000:699f::e90) has joined #haskell
2016-01-10 19:53:02	▶	Wes[SA-PHI] (~textual@74.197.67.119) has joined #haskell
2016-01-10 19:53:04	sphinxo	Hi, i'm struggling to do code generation properly
2016-01-10 19:53:13	◀	chaosmasttter (~chaosmast@p54B7F8CF.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2016-01-10 19:53:14	kadoban	H4ns: What is Shake.hs, something you wrote?
2016-01-10 19:53:17	H4ns	tnks: thanks, that was what i was looking for!
2016-01-10 19:53:35	sphinxo	specifically literal values
2016-01-10 19:53:37	▶	fmauro (~fmauro@5.145.17.181) has joined #haskell
2016-01-10 19:53:38	tnks	H4ns: I know. . . it's fucking awesome. . . Stackage/Stack even caches binaries.
2016-01-10 19:53:52	tnks	so it's a super fast install. . .
2016-01-10 19:54:20	◀	albertus1 (~albertus1@f051224118.adsl.alicedsl.de) has quit (Quit: Leaving.)
2016-01-10 19:54:22	sphinxo	My codegen code so far http://lpaste.net/148778
2016-01-10 19:54:30	◀	Khisanth (~Khisanth@pool-108-46-6-99.nycmny.east.verizon.net) has quit (Ping timeout: 246 seconds)
2016-01-10 19:54:31	tnks	Shake is a build system in Haskell.
2016-01-10 19:54:43	tnks	that looks awesome from what I've seen and read. . . but I haven't used it.
2016-01-10 19:54:49	◀	hrnz (hrnz@unaffiliated/hrnz) has quit (Ping timeout: 256 seconds)
2016-01-10 19:55:07	⚡	hackagebot OpenGL 3.0.0.1 - A binding for the OpenGL graphics system  https://hackage.haskell.org/package/OpenGL-3.0.0.1 (SvenPanne)
2016-01-10 19:55:09	⚡	hackagebot read-editor 0.1.0.2 - Opens a temporary file on the system's EDITOR and returns the resulting edits  https://hackage.haskell.org/package/read-editor-0.1.0.2 (yamadapc)
2016-01-10 19:55:16	sphinxo	the problem is for example Lit 5 :+: lit 7 is generating [Set RAX 5,Push RAX,Set RAX 7,Push RAX,Pop RAX,Pop RBX,Add RAX RBX,Push RAX]
2016-01-10 19:55:29	◀	oisdk_ (~oisdk_@95.45.70.25) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-01-10 19:55:30	Habib	Guys, I have a pretty simple question, I think, about Haskell I've been wondering about.
2016-01-10 19:55:40	sphinxo	and add is expecting two values to be in RAX and RBX
2016-01-10 19:56:03	sphinxo	whereas pushing literals just sets RAX and pushes to TOS
2016-01-10 19:56:08	Habib	I'm on the applicative functor chapter of “Learn You a Haskell for Great Good” and my mind keeps going back to the question of how the hell the IO monad works.
2016-01-10 19:56:44	▶	oisdk_ (~oisdk_@95.45.70.25) has joined #haskell
2016-01-10 19:56:47	◀	ttuegel_ (~quassel@2601:240:8000:699f::e90) has quit (Client Quit)
2016-01-10 19:56:59	mag__	haha I asked myself that question many times
2016-01-10 19:57:10	mag__	I still do :\
2016-01-10 19:57:15	▶	ttuegel (~quassel@2601:240:8000:699f::e90) has joined #haskell
2016-01-10 19:57:22	uncle-j_j	))
2016-01-10 19:57:53	◀	FlyingChicken (uid131586@gateway/web/irccloud.com/x-pqecdboktjpxytur) has quit (Quit: Connection closed for inactivity)
2016-01-10 19:58:13	Habib	Haha. The book talks a lot about the IO performing an “action” when it hits main, but how the hell does that work? Side-effects seem like an impossible thing in Haskell, but they exist, except the way they're spoken about, they seem to exist as values… except you can't inspect them or mess around with them like any other value.
2016-01-10 19:58:20	sphinxo	Any ideas?
2016-01-10 19:58:57	geekosaur	In IO action is a program that you feed to the runtime. something like getLine is an opcode in that program; it is itself pure but represents an impure action
2016-01-10 19:59:01	▶	glittershark (~griffin@ool-43553952.dyn.optonline.net) has joined #haskell
2016-01-10 19:59:11	▶	mthvedt (~mike@cpe-72-226-102-201.nyc.res.rr.com) has joined #haskell
2016-01-10 19:59:13	geekosaur	the result of main is a chain of these opcodes, run by the runtime impurely
2016-01-10 19:59:40	Ralith_	Habib: your code doesn't have side effects, it merely instructs the runtime to perform them
2016-01-10 19:59:42	▶	ixaxaar (~ixaxaar@103.16.70.14) has joined #haskell
2016-01-10 19:59:44	ℹ	Ralith_ is now known as Ralith
2016-01-10 19:59:51	◀	pauliprice (~paulipric@ool-4350ace2.dyn.optonline.net) has quit (Ping timeout: 245 seconds)
2016-01-10 19:59:57	▶	hrnz (hrnz@unaffiliated/hrnz) has joined #haskell
2016-01-10 20:00:04	▶	albertus1 (~albertus1@f051224118.adsl.alicedsl.de) has joined #haskell
2016-01-10 20:00:08	⚡	hackagebot machines-binary 0.3.0.0 - Binary utilities for the machines library  https://hackage.haskell.org/package/machines-binary-0.3.0.0 (aloiscochard)
2016-01-10 20:01:13	◀	usershell (~usershell@41.136.90.220) has quit (Remote host closed the connection)
2016-01-10 20:01:20	Habib	Yes, I've heard that way. It sort of makes sense like that. Would I be right in likening it to listing out instructions on a piece of paper to my assistant, instead of directly instructing them?
2016-01-10 20:02:19	geekosaur	the only thing the monad does is ensure that opcodes execute in the correct order by threading a dummy state value through these opcodes and program fragments created by combining these opcodes; the code generator even detects that it's a dummy and strips it
2016-01-10 20:03:10	Habib	Hmm, you've lost me when you said, “threading a dummy state value”.
2016-01-10 20:03:18	geekosaur	and fmap and bind let you hook callbacks to the opcodes for the runtime to execute pure code on the result of some action
2016-01-10 20:04:14	Habib	The only thing that bothers me is that I can't differentiate any IO action from another. I can't tell if an IO action, when performed, will get a line of input, will print to the console, or get an environment variable, or what.
2016-01-10 20:04:34	Habib	And when they're represented as values, I think of them as values and expect to be able to inspect what the action is going to do.
2016-01-10 20:04:36	◀	xnil (~xnil@69.43.66.12) has quit (Ping timeout: 255 seconds)
2016-01-10 20:05:08	⚡	hackagebot GLUT 2.7.0.6 - A binding for the OpenGL Utility Toolkit  https://hackage.haskell.org/package/GLUT-2.7.0.6 (SvenPanne)
2016-01-10 20:05:15	Habib	I see what you're saying about fmap allowing to hook callbacks, because I'm on the applicative functor chapter. Haven't got to bind yet.
2016-01-10 20:05:15	geekosaur	so, Haskell is not, properly speaking, lazy; it evaluates based on data dependencies. something is evaluated only when something else needs it. you can therefore ensure that one thing happens before another by making the second thing depend on a result of the first. if something doesn't have a result, this is difficult... but the state monad creates such a dependency on the state value.
2016-01-10 20:05:23	▶	Hugehead_ (~Hugehead@184.101.0.143) has joined #haskell
2016-01-10 20:05:23	▶	nhunter (~nhunter@c-71-236-158-215.hsd1.or.comcast.net) has joined #haskell
2016-01-10 20:05:26	◀	rvktsf (~jfseI@37.26.148.202) has quit (Read error: Connection reset by peer)
2016-01-10 20:05:53	Habib	But isn't that what lazy means? That you don't do something until you really need it?
2016-01-10 20:06:11	geekosaur	so now we can force IO actions to be ordered by making them use a state of some kind. the trick is that the state doesn't exist (it's what is called a "phantom type"), it's just there to ensure the ordering, it has no actual representation in the program
2016-01-10 20:06:22	Habib	Haskell is 100% lazy, it doesn't do anything, until main needs it. Are functions even truly defined before main is performed?
2016-01-10 20:06:22	▶	jay6981 (~Adium@2601:646:8d01:7f7d:35ad:daed:fe0e:3057) has joined #haskell
2016-01-10 20:06:26	▶	chaosmasttter (~chaosmast@p54B7F8CF.dip0.t-ipconnect.de) has joined #haskell
2016-01-10 20:07:05	▶	nerfando (~textual@177.220.182.50) has joined #haskell
2016-01-10 20:07:19	geekosaur	well, not exactly. lazy means you have a chunk of code that will produce a value instead of the value itself. *some* means is needed to force those chunks of code to be executed; the on-demand one used by Haskell is by far the most common (spreadsheets operate that way as well) but there are others
2016-01-10 20:07:29	Habib	A “phantom type”, hmm…
2016-01-10 20:07:31	◀	nerfando (~textual@177.220.182.50) has quit (Max SendQ exceeded)
2016-01-10 20:08:05	Habib	Ah, I see (about laziness).
2016-01-10 20:08:14	geekosaur	or when emulating lazy operation in a strict program you can forget to include some way to trigger evaluation of the lazy value and then wonder why the program hangs :)
2016-01-10 20:08:20	▶	Khisanth (~Khisanth@pool-108-46-1-208.nycmny.east.verizon.net) has joined #haskell
2016-01-10 20:08:20	▶	nerfando (~textual@177.220.182.50) has joined #haskell
2016-01-10 20:08:31	Habib	Haha.
2016-01-10 20:08:35	geekosaur	(this does happen)
2016-01-10 20:08:36	◀	Hugehead (~Hugehead@71-209-161-125.phnx.qwest.net) has quit (Ping timeout: 245 seconds)
2016-01-10 20:08:39	◀	rkazak (~rkazak@c-24-6-104-170.hsd1.ca.comcast.net) has quit (Quit: Sleep.....ing....)
2016-01-10 20:08:39	◀	nerfando (~textual@177.220.182.50) has quit (Max SendQ exceeded)
2016-01-10 20:08:52	▶	rcyr (~rcyr@unaffiliated/rcyr) has joined #haskell
2016-01-10 20:09:07	▶	RGamma (~RGamma@ip-37-201-234-206.hsi13.unitymediagroup.de) has joined #haskell
2016-01-10 20:09:09	◀	rcyr (~rcyr@unaffiliated/rcyr) has quit (Client Quit)
2016-01-10 20:09:14	▶	nerfando (~textual@177.220.182.50) has joined #haskell
2016-01-10 20:09:40	▶	Wizek (~Wizek@catv-89-132-132-110.catv.broadband.hu) has joined #haskell
2016-01-10 20:09:46	geekosaur	but you can for example set a spreadsheet to manual calculation mode, and that represents lazy evaluation that is not driven specifically by another expression demanding the value
2016-01-10 20:09:50	sphinxo	Any ideas how to do this?
2016-01-10 20:10:00	◀	nhunter (~nhunter@c-71-236-158-215.hsd1.or.comcast.net) has quit (Ping timeout: 255 seconds)
2016-01-10 20:10:35	◀	kwisatz (~kwisatz@AAubervilliers-652-1-229-231.w83-112.abo.wanadoo.fr) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-01-10 20:10:52	geekosaur	data Foo a = Foo Int -- a is a phantom type. In this case you can use it as a tag to keep from accidentally mixing different Foo-s that should be kept distinct
2016-01-10 20:10:59	◀	insitu (~textual@105.196.201.77.rev.sfr.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-01-10 20:11:06	◀	jbgi (~jbgi@84-72-168-7.dclient.hispeed.ch) has quit (Ping timeout: 245 seconds)
2016-01-10 20:11:09	geekosaur	(there's a number of units conversion packages on hackage based on this idea, for example)
2016-01-10 20:11:49	defanor	a nice explanation of IO, btw: https://wiki.haskell.org/IO_inside. also https://stackoverflow.com/questions/17002119/haskell-pre-monadic-i-o for an easier to grasp version
2016-01-10 20:12:13	▶	dwefe (~adas@cpe-109-60-50-169.st4.cable.xnet.hr) has joined #haskell
2016-01-10 20:12:33	◀	cic (~cic@c83-252-135-185.bredband.comhem.se) has quit (Ping timeout: 240 seconds)
2016-01-10 20:12:40	◀	krypt (~krypt@pool-141-155-178-253.nycmny.fios.verizon.net) has quit (Remote host closed the connection)
2016-01-10 20:12:55	▶	nkhodyunya (~Adium@171.33.253.32) has joined #haskell
2016-01-10 20:13:08	◀	demilux (~demilux@c-76-28-194-126.hsd1.wa.comcast.net) has quit (Remote host closed the connection)
2016-01-10 20:13:12	geekosaur	at some point, although probably not in LYAH until late if ever, is ST. this is a state monad where the state is a phantom type, which lets you ensure that values in ST can't mix with other values, and additionally gives you a way to order things. We use this to implement mutable algorithms in Haskell, because it ensures the mutability can't escape and the result is pure
2016-01-10 20:13:21	geekosaur	IO, in GHC at least, is a specialization of ST
2016-01-10 20:13:26	▶	griotspeak (~textual@c-73-237-161-156.hsd1.ga.comcast.net) has joined #haskell
2016-01-10 20:13:40	Habib	ST?
2016-01-10 20:14:12	Habib	State?
2016-01-10 20:14:35	mniip	I wouldn't say specialization, they just happen to have similar constructors
2016-01-10 20:14:41	◀	aarvar (~foewfoiew@172.76.136.233) has left #haskell
2016-01-10 20:14:57	Habib	In other words, Haskell doesn't know it's a specialisation, but we know it is?
2016-01-10 20:15:01	geekosaur	r, I dropped some words. "at some point, although probably not in LYAH until late if ever, you will encounter a monad called ST"
2016-01-10 20:15:29	mniip	Habib, more or less if you disregard threads, sparks, and other magic ghc does sometimes
2016-01-10 20:15:45	◀	achernyak (~artem@24-217-172-238.dhcp.stls.mo.charter.com) has quit (Ping timeout: 276 seconds)
2016-01-10 20:16:19	geekosaur	it's a somewhat advanced technique so you won't run into it until later, but it's an example of using a state monad with a state that is phantom (has no way to create or use values for it, it's just a "type tag")
2016-01-10 20:17:38	broma0	is there a template-haskell way to derive lenses for data/type families? 
2016-01-10 20:18:19	◀	H4ns (hans@netzhansa.com) has left #haskell ("ERC (IRC client for Emacs 24.5.1)")
2016-01-10 20:18:22	◀	bennofs (~benno@2a02:810a:8200:2934:56ee:75ff:fe53:d108) has quit (Ping timeout: 240 seconds)
2016-01-10 20:19:17	◀	RyanGlScott (~chatzilla@50-195-179-145-static.hfc.comcastbusiness.net) has quit (Ping timeout: 272 seconds)
2016-01-10 20:19:53	Habib	geekosaur, when you say mutable algorithms, do you mean algorithms which mutate [X thing] or algorithms which actually themselves are mutable?
2016-01-10 20:20:18	aweinstock	algorithms that internally use mutable state
2016-01-10 20:20:27	▶	tekkkz (~tekkkz@p2003005F2A369B520A9E01FFFEA965AA.dip0.t-ipconnect.de) has joined #haskell
2016-01-10 20:20:32	Habib	Oh, I see.
2016-01-10 20:20:39	geekosaur	the former. most values in Haskell can't be changed. ST gives you mutable values but they are tagged with the phantom state so they can't be shared around and can't escape the ST monad
2016-01-10 20:20:44	▶	big_wayne (59f4f632@gateway/web/freenode/ip.89.244.246.50) has joined #haskell
2016-01-10 20:21:14	aweinstock	> runST $ do { tmp <- newSTRef 0; forM_ [1..10] (\i -> modifySTRef tmp (+i)); readSTRef tmp }
2016-01-10 20:21:17	lambdabot	 55
2016-01-10 20:21:49	Habib	And am I right to believe that, had state monads not been granted to us, we would not be able to implement it ourselves in Haskell?
2016-01-10 20:21:49	aweinstock	^ sums some numbers using an explicit mutable variable
2016-01-10 20:21:58	geekosaur	you are incorrect
2016-01-10 20:22:05	geekosaur	state monads are implemented in Haskell
2016-01-10 20:22:08	aweinstock	State isn't the same thing as ST
2016-01-10 20:22:10	◀	Wes[SA-PHI] (~textual@74.197.67.119) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-10 20:22:16	geekosaur	a state monad is just a tuple in disguise.
2016-01-10 20:22:27	◀	L8D (~L8D@cpe-70-123-155-208.austin.res.rr.com) has quit (Ping timeout: 260 seconds)
2016-01-10 20:22:29	Habib	Oh, wow. That makes things more interesting.
2016-01-10 20:22:32	◀	emilypi (~emilypi@2604:2000:8006:ef00:f977:d6df:7cdd:66b) has quit (Ping timeout: 250 seconds)
2016-01-10 20:22:33	big_wayne	i have this type:    data Bla = Bla1 | Bla2 deriving (Eq,Ord)     and i want to change order to this (combined with Maybe)   Just Bla1 > Just Bla2 > Nothing
2016-01-10 20:22:45	big_wayne	how to achive this
2016-01-10 20:22:46	Habib	That they're implemented directly in Haskell is awesome.
2016-01-10 20:22:47	aweinstock	the State monad is a convenient way of handling (a -> (s, a)) functions
2016-01-10 20:22:52	geekosaur	ST is partially implementable in Haskell: the part that prevents stuff escaping can be done with just a phantom type, but allowing mutable values requires extra support
2016-01-10 20:23:09	geekosaur	because Haskell doesn't do mutable values
2016-01-10 20:23:16	jmcarthur	ST is somewhat magical. State is not magical.
2016-01-10 20:23:18	Habib	functions which take a value and return a tuple with that value in the second position and state information in the first.
2016-01-10 20:23:25	▶	timwilkens (~timwilken@cpe-76-88-64-94.san.res.rr.com) has joined #haskell
2016-01-10 20:23:46	geekosaur	something with a type State s a is really just something with the type s -> (a,s)
2016-01-10 20:23:47	aweinstock	there are some primitive ST actions that need to be handled specially (by the codegenerator, I think?), but (>>=) is implemented in haskell
2016-01-10 20:24:02	big_wayne	anyone can help me?
2016-01-10 20:24:11	▶	lynnard (~lingnan@cpc1-walt13-2-0-cust402.13-2.cable.virginm.net) has joined #haskell
2016-01-10 20:24:29	geekosaur	big_wayne, instead of deriving Ord you write your own Ord instance
2016-01-10 20:24:31	jmcarthur	I've very recently taken to calling the first type argument for ST "heap" instead of "s".
2016-01-10 20:24:44	aweinstock	> Just () > Nothing
2016-01-10 20:24:46	◀	deavmi_mobile (~deavmi@41.164.24.122) has quit (Read error: Connection reset by peer)
2016-01-10 20:24:47	lambdabot	 True
2016-01-10 20:24:58	▶	deavmi_mobile (~deavmi@41.164.24.122) has joined #haskell
2016-01-10 20:25:18	jmcarthur	Calling it "heap" allows you to pretend it's not a phantom type.
2016-01-10 20:25:39	aweinstock	big_wayne: I think the default (>) for Maybe might do what you want
2016-01-10 20:25:45	maerwald	state monad is just an abstraction to what you can already do explicitly and often times I do
2016-01-10 20:25:59	geekosaur	aweinstock, look closely. Bla1 sorts greater than Bla2
2016-01-10 20:26:02	aweinstock	> [Just 1 < Just 2, Nothing < Just 2, Nothing < Just 1]
2016-01-10 20:26:03	maerwald	unless the chain is so long, that it becomes annoying
2016-01-10 20:26:05	geekosaur	but Nothing sorts less than Just
2016-01-10 20:26:07	lambdabot	 [True,True,True]
2016-01-10 20:26:09	▶	justanotheruser (~Justan@unaffiliated/justanotheruser) has joined #haskell
2016-01-10 20:26:12	big_wayne	Bla2 is bigger than Bla1
2016-01-10 20:26:15	◀	mthvedt (~mike@cpe-72-226-102-201.nyc.res.rr.com) has quit (Quit: mthvedt)
2016-01-10 20:26:20	geekosaur	that said, the easiest way to do it is swap Bla1 and Bla2 in the definition
2016-01-10 20:26:23	▶	martin-t (~martin-t@c-71-198-25-196.hsd1.ca.comcast.net) has joined #haskell
2016-01-10 20:26:36	jmcarthur	STRef heap Int   can be interpreted as a reference to an Int in the heap "heap"
2016-01-10 20:26:41	aweinstock	data Bla = Bla2 | Bla1 deriving (Eq, Ord)
2016-01-10 20:26:48	geekosaur	since the default Ord instance just uses the order of the constructors
2016-01-10 20:26:53	big_wayne	i cannot change definition
2016-01-10 20:26:54	geekosaur	for an ADT
2016-01-10 20:28:13	jmcarthur	and then   ST heap a   can be thought of as   heap -> (a, heap)   , except the run function never allows you to actually reify the heap
2016-01-10 20:28:27	◀	piezoid (~piezoid@tsv35-1-78-232-144-90.fbx.proxad.net) has quit (Ping timeout: 246 seconds)
2016-01-10 20:28:29	▶	achernyak (~artem@24-217-172-238.dhcp.stls.mo.charter.com) has joined #haskell
2016-01-10 20:29:25	◀	roconnor (~roconnor@host-45-58-255-95.dyn.295.ca) has quit (Ping timeout: 272 seconds)
2016-01-10 20:30:03	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-10 20:30:14	oisdk_	big_wayne so you want it to be ordered differently when it's wrapped in maybe?
2016-01-10 20:30:24	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-10 20:31:31	geekosaur	or this is homework about writing your own Ord instance
2016-01-10 20:32:00	◀	manuel_ (~manuel@pD9FDC584.dip0.t-ipconnect.de) has quit (Quit: manuel_)
2016-01-10 20:32:01	◀	timwilkens (~timwilken@cpe-76-88-64-94.san.res.rr.com) has quit (Remote host closed the connection)
2016-01-10 20:32:04	◀	fengshaun (~fengshaun@unaffiliated/fengshaun) has quit (Ping timeout: 255 seconds)
2016-01-10 20:32:07	big_wayne	i think i got this
2016-01-10 20:32:27	big_wayne	i just make my own max function
2016-01-10 20:32:30	◀	jonathanfrias (~jonathanf@c-73-35-73-134.hsd1.fl.comcast.net) has quit (Ping timeout: 255 seconds)
2016-01-10 20:32:47	big_wayne	thank anyway
2016-01-10 20:32:58	◀	jacquerie (~jacquerie@dynamic-adsl-78-13-144-152.clienti.tiscali.it) has quit (Quit: jacquerie)
2016-01-10 20:33:34	◀	Big_G (~Big_G@c-24-56-212-199.customer.broadstripe.net) has quit (Read error: Connection reset by peer)
2016-01-10 20:33:56	▶	mthvedt (~mike@cpe-72-226-102-201.nyc.res.rr.com) has joined #haskell
2016-01-10 20:33:58	◀	mthvedt (~mike@cpe-72-226-102-201.nyc.res.rr.com) has quit (Client Quit)
2016-01-10 20:34:03	◀	hurrah (~jimmyhurr@81-233-253-229-no13.tbcn.telia.com) has quit (Ping timeout: 246 seconds)
2016-01-10 20:34:48	▶	fengshaun (~fengshaun@unaffiliated/fengshaun) has joined #haskell
2016-01-10 20:36:24	◀	watabou (~watabou@unaffiliated/watabou) has quit (Quit: Soupy Twist!)
2016-01-10 20:36:30	hsk3	opqdonut: You said when False is the same as return ()
2016-01-10 20:36:34	▶	watabou (~watabou@unaffiliated/watabou) has joined #haskell
2016-01-10 20:36:57	◀	watabou (~watabou@unaffiliated/watabou) has quit (Client Quit)
2016-01-10 20:37:00	▶	{AS} (uid45026@gateway/web/irccloud.com/x-rrozscxvyxpcaxjd) has joined #haskell
2016-01-10 20:37:03	hsk3	opqdonut: but let's say i wanted to return some specific integer on success, Either String Int
2016-01-10 20:37:11	opqdonut	hsk3: yeah then you'd need the return
2016-01-10 20:37:13	hsk3	opqdonut: couldn't i have done return 3 at the end?
2016-01-10 20:37:16	opqdonut	yeah
2016-01-10 20:37:28	hsk3	opqdonut: ok, but by what mechanism does the return () get replaced by return 3?
2016-01-10 20:37:28	◀	big_wayne (59f4f632@gateway/web/freenode/ip.89.244.246.50) has quit (Quit: Page closed)
2016-01-10 20:37:32	hsk3	(if i include my own return)
2016-01-10 20:37:37	▶	lethjakman (~lethjakma@71.56.221.51) has joined #haskell
2016-01-10 20:38:01	opqdonut	I'm not sure what you're asking now
2016-01-10 20:38:08	hsk3	1sec
2016-01-10 20:38:20	opqdonut	yes, if you want to return something that's not () on success, you need to have a return
2016-01-10 20:38:20	▶	ericshortcut (~ericshort@191.254.158.212) has joined #haskell
2016-01-10 20:38:38	▶	perspectival (~perspecti@54.21.broadband10.iol.cz) has joined #haskell
2016-01-10 20:38:45	opqdonut	however, in the case where you want to return () on success, when does it for you (by coincidence kinda)
2016-01-10 20:38:47	▶	montanonic (~nicholas@c-98-246-188-73.hsd1.or.comcast.net) has joined #haskell
2016-01-10 20:39:03	▶	krypt (~krypt@pool-141-155-178-253.nycmny.fios.verizon.net) has joined #haskell
2016-01-10 20:39:13	▶	jbgi (~jbgi@84-72-168-7.dclient.hispeed.ch) has joined #haskell
2016-01-10 20:39:14	◀	irclogger_com (~irclogger@li659-42.members.linode.com) has quit (Quit: irclogger_com)
2016-01-10 20:39:19	▶	watabou (~watabou@unaffiliated/watabou) has joined #haskell
2016-01-10 20:39:57	hsk3	opqdonut: that's my question, https://pastee.org/uv975
2016-01-10 20:40:01	▶	pamplemousse (~pamplemou@bas1-montreal30-1177586886.dsl.bell.ca) has joined #haskell
2016-01-10 20:40:09	◀	cdepillabout (~illabout@softbank060071182070.bbtec.net) has quit (Ping timeout: 255 seconds)
2016-01-10 20:40:22	opqdonut	hsk3: oh, right, now I see
2016-01-10 20:40:46	opqdonut	> Right () >> Right 3
2016-01-10 20:40:49	lambdabot	 Right 3
2016-01-10 20:40:50	geekosaur	return is not a control construct
2016-01-10 20:40:53	◀	oish (~charlie@159.22.169.217.in-addr.arpa) has quit (Ping timeout: 240 seconds)
2016-01-10 20:41:01	geekosaur	return just lifts a value into a monad
2016-01-10 20:41:07	maerwald	:t return
2016-01-10 20:41:09	lambdabot	Monad m => a -> m a
2016-01-10 20:41:12	▶	L8D (~L8D@cpe-70-123-155-208.austin.res.rr.com) has joined #haskell
2016-01-10 20:41:18	opqdonut	and the Either monad keeps the last value it encounters
2016-01-10 20:41:19	hsk3	ah ok
2016-01-10 20:41:21	hsk3	i see
2016-01-10 20:41:27	▶	cic (~cic@c83-252-135-185.bredband.comhem.se) has joined #haskell
2016-01-10 20:41:40	hsk3	i get it now, thank you
2016-01-10 20:41:44	◀	frerich (~frerich@kde/raabe) has quit (Remote host closed the connection)
2016-01-10 20:41:45	opqdonut	last Right value that is. if a Left value is encountered, that's the result right there
2016-01-10 20:41:56	◀	lethjakman (~lethjakma@71.56.221.51) has quit (Ping timeout: 245 seconds)
2016-01-10 20:42:02	◀	neoncontrails (~neoncontr@2602:304:cc4e:9410:2c01:3c62:2ed4:e1c4) has quit (Ping timeout: 250 seconds)
2016-01-10 20:42:13	▶	adam__ (~adam@static-50-53-43-165.bvtn.or.frontiernet.net) has joined #haskell
2016-01-10 20:43:26	◀	Ed_0971 (~ed@158-113-190-90.dyn.estpak.ee) has quit (Ping timeout: 260 seconds)
2016-01-10 20:43:54	◀	uncle-j_j (~unclechu@95.153.133.103) has quit (Quit: Leaving.)
2016-01-10 20:44:18	▶	abhixec (~archmonk@c-50-174-16-226.hsd1.ca.comcast.net) has joined #haskell
2016-01-10 20:44:34	◀	Meow-J (uid69628@gateway/web/irccloud.com/x-znnamnicffrbizcx) has quit (Quit: Connection closed for inactivity)
2016-01-10 20:45:18	▶	kazagistar (~Adium@host-72-174-103-162.static.bresnan.net) has joined #haskell
2016-01-10 20:45:33	◀	cic (~cic@c83-252-135-185.bredband.comhem.se) has quit (Ping timeout: 240 seconds)
2016-01-10 20:45:58	▶	hannelita (~hannelita@2804:14c:a8:27a5:61bd:1ecd:c7b9:16fc) has joined #haskell
2016-01-10 20:46:20	◀	umib0zu (~umib0zu@146-115-43-219.c3-0.abr-ubr1.sbo-abr.ma.cable.rcn.com) has quit (Quit: umib0zu)
2016-01-10 20:46:25	◀	Kristler (~KW@S0106bcd16583bf99.ok.shawcable.net) has quit (Quit: Toaster's on fire)
2016-01-10 20:46:31	▶	Mirry (~Mirry@181.85-201-80.adsl-dyn.isp.belgacom.be) has joined #haskell
2016-01-10 20:47:13	▶	Kristler (~KW@S0106bcd16583bf99.ok.shawcable.net) has joined #haskell
2016-01-10 20:47:29	▶	vlatkoB_ (~IRC_clien@unaffiliated/vlatkob) has joined #haskell
2016-01-10 20:48:46	◀	ericshortcut (~ericshort@191.254.158.212) has quit (Remote host closed the connection)
2016-01-10 20:49:12	◀	abhixec (~archmonk@c-50-174-16-226.hsd1.ca.comcast.net) has quit (Ping timeout: 265 seconds)
2016-01-10 20:49:17	◀	armyriad (~armyriad@162.219.176.3) has quit (Ping timeout: 260 seconds)
2016-01-10 20:49:19	▶	umib0zu (~umib0zu@146-115-43-219.c3-0.abr-ubr1.sbo-abr.ma.cable.rcn.com) has joined #haskell
2016-01-10 20:49:29	Nadrieril	> return 4 :: Either Int
2016-01-10 20:49:31	lambdabot	     Expecting one more argument to ‘Either Int’
2016-01-10 20:49:31	lambdabot	     Expected a type, but ‘Either Int’ has kind ‘* -> *’
2016-01-10 20:49:31	lambdabot	     In an expression type signature: Either Int
2016-01-10 20:49:35	▶	armyriad (~armyriad@71-83-188-91.dhcp.lnbh.ca.charter.com) has joined #haskell
2016-01-10 20:49:40	Nadrieril	> return 4 :: Either Int Int
2016-01-10 20:49:42	lambdabot	 Right 4
2016-01-10 20:49:52	▶	xnil (~xnil@69.43.66.12) has joined #haskell
2016-01-10 20:50:30	◀	hannelita (~hannelita@2804:14c:a8:27a5:61bd:1ecd:c7b9:16fc) has quit (Ping timeout: 255 seconds)
2016-01-10 20:50:45	◀	rubix (~rubix@rue92-1-82-225-162-56.fbx.proxad.net) has left #haskell
2016-01-10 20:51:31	◀	vlatkoB (~IRC_clien@unaffiliated/vlatkob) has quit (Ping timeout: 245 seconds)
2016-01-10 20:51:48	▶	rgr (~user@p20030086AB291D327EDD90FFFE49493A.dip0.t-ipconnect.de) has joined #haskell
2016-01-10 20:51:48	◀	darkf (~darkf___@unaffiliated/darkf) has quit (Quit: Leaving)
2016-01-10 20:52:51	▶	nilg (~user@77.70.2.229) has joined #haskell
2016-01-10 20:53:30	◀	jay6981 (~Adium@2601:646:8d01:7f7d:35ad:daed:fe0e:3057) has quit (Quit: Leaving.)
2016-01-10 20:53:58	▶	cic (~cic@c83-252-135-185.bredband.comhem.se) has joined #haskell
2016-01-10 20:54:56	◀	Arker (~arker@103.37.201.105) has quit (Quit: Leaving)
2016-01-10 20:57:20	▶	yqt (~yqt@81.88.230.28) has joined #haskell
2016-01-10 20:57:56	▶	eazar001 (~ebrahim@99-151-0-118.lightspeed.snrmca.sbcglobal.net) has joined #haskell
2016-01-10 20:58:43	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-10 20:58:55	◀	tekkkz (~tekkkz@p2003005F2A369B520A9E01FFFEA965AA.dip0.t-ipconnect.de) has quit (Quit: Leaving)
2016-01-10 20:59:25	◀	dwefe (~adas@cpe-109-60-50-169.st4.cable.xnet.hr) has quit (Remote host closed the connection)
2016-01-10 20:59:28	▶	Laserbear (~Laserbear@c-73-223-160-142.hsd1.ca.comcast.net) has joined #haskell
2016-01-10 20:59:37	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-10 21:00:10	⚡	hackagebot reflex-dom-contrib 0.4 - A playground for experimenting with infrastructure and common code for reflex applications  https://hackage.haskell.org/package/reflex-dom-contrib-0.4 (DougBeardsley)
2016-01-10 21:01:59	◀	deavmi_mobile (~deavmi@41.164.24.122) has quit (Read error: No route to host)
2016-01-10 21:05:10	⚡	hackagebot murmur3 1.0.1 - Pure Haskell implementation of the MurmurHash3 x86_32 algorithm.  https://hackage.haskell.org/package/murmur3-1.0.1 (PhilippeLaprade)
2016-01-10 21:05:42	▶	wowdog (~wowdog@184.69.147.190) has joined #haskell
2016-01-10 21:06:02	◀	pilne (~pilne@75-132-212-62.dhcp.stls.mo.charter.com) has quit (Remote host closed the connection)
2016-01-10 21:06:27	hsk3	opqdonut: could i use the Either monad to shorten this code? https://pastee.org/qu2yz I don't see a way, because I no longer have just (). I now have Int.
2016-01-10 21:06:37	hsk3	So I don't see away to get around duplicating Right 3
2016-01-10 21:06:41	▶	pilne (~pilne@75-132-212-62.dhcp.stls.mo.charter.com) has joined #haskell
2016-01-10 21:06:51	hsk3	s/away/a way
2016-01-10 21:06:54	▶	insitu (~textual@105.196.201.77.rev.sfr.net) has joined #haskell
2016-01-10 21:07:18	▶	tabemann (~tabemann@172-13-49-137.lightspeed.milwwi.sbcglobal.net) has joined #haskell
2016-01-10 21:10:14	pdxleif	The output of ghc-mod case split is 3 1 3 10 "foo Nothing = _foo (Just x) = _"
2016-01-10 21:10:29	▶	roconnor (~roconnor@host-45-58-252-237.dyn.295.ca) has joined #haskell
2016-01-10 21:11:06	pdxleif	That string should be two lines - "foo Nothing = _" and "foo (Just x) = _". How am I supposed to know where to split these strings up when processing ghc-mod output?
2016-01-10 21:11:30	◀	martin-t (~martin-t@c-71-198-25-196.hsd1.ca.comcast.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-10 21:11:49	pdxleif	Maybe haskell-ide-engine has nicer output?
2016-01-10 21:12:26	liste	hsk why not just "do when (check1 l1) (Left "check1 failed"); when (check2 l1) (Left "check2 failed"); return 3"
2016-01-10 21:12:41	liste	hsk3*
2016-01-10 21:13:07	◀	O7 (~d@185.57.82.25) has quit (Ping timeout: 272 seconds)
2016-01-10 21:13:16	hsk3	liste: that's missing the point of my question. it's a simplification of a bigger thing :) i want to have those lets there. (in reality i have more of them)
2016-01-10 21:13:25	hsk3	make the code clearer
2016-01-10 21:13:54	hsk3	hmmm
2016-01-10 21:14:36	hsk3	liste: what's that |1 ?
2016-01-10 21:14:56	▶	raichoo (~raichoo@mue-88-130-57-172.dsl.tropolys.de) has joined #haskell
2016-01-10 21:15:24	aweinstock	:t let check f s x = if f x then Right () else Left s in (\check1 check2 l1 l2 -> do { check check1 "check 1 failed" l1; check check2 "check 2 failed l2; return 3})
2016-01-10 21:15:27	lambdabot	    lexical error in string/character literal at end of input
2016-01-10 21:15:32	aweinstock	:t let check f s x = if f x then Right () else Left s in (\check1 check2 l1 l2 -> do { check check1 "check 1 failed" l1; check check2 "check 2 failed" l2; return 3})
2016-01-10 21:15:33	◀	tmtwd (~tmtwd@CPE0c473da71813-CM0c473da71810.cpe.net.cable.rogers.com) has quit (Ping timeout: 240 seconds)
2016-01-10 21:15:34	lambdabot	Num b => (t -> Bool) -> (t1 -> Bool) -> t -> t1 -> Either [Char] b
2016-01-10 21:15:43	aweinstock	hsk3: ^
2016-01-10 21:16:22	◀	wookiehangover (~wookiehan@2601:647:0:c832:1884:e8b8:e87d:9163) has quit (Ping timeout: 240 seconds)
2016-01-10 21:16:48	◀	erikd (~erikd@hendrix.mega-nerd.net) has quit (Quit: disappearing into the sunset)
2016-01-10 21:17:16	▶	pauliprice (~paulipric@ool-4350ace2.dyn.optonline.net) has joined #haskell
2016-01-10 21:17:19	aweinstock	hsk3: does something like that work for you? (having some helper to "promote" the check functions)
2016-01-10 21:18:25	liste	hsk3 I meant that you don't need to have multiple Right 3's
2016-01-10 21:18:40	◀	iwmrby (~iwmrby@2a02:2f0b:b045:8800:e022:d6d7:fbb8:59c6) has quit (Read error: Connection reset by peer)
2016-01-10 21:18:41	aweinstock	or you could have (promoteEither  f s x = if f x then Right () else Left s) at the toplevel, along with (check1' = promoteEither check1) and so on
2016-01-10 21:19:11	◀	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has quit (Quit: caumeslasal)
2016-01-10 21:19:14	liste	you can still have the let's, I just left them out to make it shorter
2016-01-10 21:20:05	▶	SaTa (~thedude@182.185.209.28) has joined #haskell
2016-01-10 21:20:30	▶	iwmrby (~iwmrby@5-12-89-116.residential.rdsnet.ro) has joined #haskell
2016-01-10 21:20:51	◀	Kaidelong (~kaidelong@c-76-105-141-64.hsd1.or.comcast.net) has quit (Read error: Connection reset by peer)
2016-01-10 21:21:14	◀	kosorith (~kosorith@78.10.54.191) has quit (Ping timeout: 260 seconds)
2016-01-10 21:21:39	aweinstock	err, check1' = promoteEither check1 "check1 failed"
2016-01-10 21:21:39	◀	rodlogic (~rodlogic@179.159.96.218) has quit (Read error: Connection reset by peer)
2016-01-10 21:22:06	▶	wookiehangover (~wookiehan@2601:647:0:c832:e56a:2b92:efbf:1ecd) has joined #haskell
2016-01-10 21:22:08	▶	hurrah (~jimmyhurr@84.216.130.226) has joined #haskell
2016-01-10 21:22:08	▶	rodlogic (~rodlogic@179.159.96.218) has joined #haskell
2016-01-10 21:22:08	◀	zipper (~luv_panda@unaffiliated/zipper) has quit (Quit: Gone to pet the sleepy panda.)
2016-01-10 21:23:48	hsk3	ah ok!
2016-01-10 21:24:02	◀	athan (~athan_@c-73-153-199-28.hsd1.co.comcast.net) has quit (Remote host closed the connection)
2016-01-10 21:24:13	◀	Hexagenic (~Hexagenic@h10n6-sde-a31.ias.bredband.telia.com) has quit (Read error: Connection reset by peer)
2016-01-10 21:24:24	◀	mag__ (~mag@148.103.176.220) has quit
2016-01-10 21:24:45	◀	umib0zu (~umib0zu@146-115-43-219.c3-0.abr-ubr1.sbo-abr.ma.cable.rcn.com) has quit (Quit: umib0zu)
2016-01-10 21:26:03	◀	vectorman68 (~kkkk@ip5f5add7a.dynamic.kabel-deutschland.de) has quit (Quit: Bye)
2016-01-10 21:26:05	▶	astrofog (~astrofog@unaffiliated/astrofog) has joined #haskell
2016-01-10 21:26:12	▶	spuz (~spuzz@host-78-149-118-44.as13285.net) has joined #haskell
2016-01-10 21:26:42	◀	lynnard (~lingnan@cpc1-walt13-2-0-cust402.13-2.cable.virginm.net) has quit (Ping timeout: 264 seconds)
2016-01-10 21:27:11	▶	vectorman68 (~kkkk@ip5f5add7a.dynamic.kabel-deutschland.de) has joined #haskell
2016-01-10 21:27:38	broma0	anyone know of a recursive 'makeClassy' for the lens library? I'm looking for (and might write myself) a TH function that will not only make the classy lenses for a type, but also make the Has* instances for the type's constructor arguments 
2016-01-10 21:27:42	▶	umib0zu (~umib0zu@146-115-43-219.c3-0.abr-ubr1.sbo-abr.ma.cable.rcn.com) has joined #haskell
2016-01-10 21:27:54	◀	pytmand (~pytmand@80-71-135-134.u.parknet.dk) has quit (Ping timeout: 264 seconds)
2016-01-10 21:28:13	▶	Ed_0971 (~ed@92fb-c056-afce-2500-b001-87cf-07d0-2001.dyn.estpak.ee) has joined #haskell
2016-01-10 21:28:32	▶	pytmand (~pytmand@80-71-135-134.u.parknet.dk) has joined #haskell
2016-01-10 21:28:49	broma0	for example, with 'data User = User Name Credentials', makeRecursiveLenses would create HasName & HasCredentials, as well as making instances for them with the User type: 'HasName User' and 'HasCredentials User'
2016-01-10 21:29:53	Jinxit	I've just done it manually for those fields first
2016-01-10 21:30:01	◀	gem (~gem@122.167.87.83) has quit (Ping timeout: 256 seconds)
2016-01-10 21:30:45	broma0	Jinxit: seems like th-able boilerplate to me
2016-01-10 21:31:38	▶	adamCS (~AdamConne@cpe-74-71-211-64.nyc.res.rr.com) has joined #haskell
2016-01-10 21:31:39	▶	ril (~ril@c-98-210-195-123.hsd1.ca.comcast.net) has joined #haskell
2016-01-10 21:33:11	▶	Wes[SA-PHI] (~textual@74.197.67.119) has joined #haskell
2016-01-10 21:33:53	▶	cir0x (~Adium@dslb-088-076-084-066.088.076.pools.vodafone-ip.de) has joined #haskell
2016-01-10 21:34:01	◀	ner0x652 (~ner0x652@cablelink-86-127-176-56.rdstm.ro) has quit (Ping timeout: 245 seconds)
2016-01-10 21:34:28	◀	ype (~ype@cpc45-slam6-2-0-cust434.2-4.cable.virginm.net) has quit (Ping timeout: 250 seconds)
2016-01-10 21:34:58	bb010g	How would I convert a correctly bounded Word16 to a Word8? I can't seem to find anything online and don't want to just jump to unsafeCoerce.
2016-01-10 21:35:36	roconnor	bb010g: fromIntegral?
2016-01-10 21:35:46	▶	ype (~ype@cpc45-slam6-2-0-cust434.2-4.cable.virginm.net) has joined #haskell
2016-01-10 21:36:11	▶	kosorith (~kosorith@78.10.54.191) has joined #haskell
2016-01-10 21:36:16	bb010g	Doesn't that have performance problems?
2016-01-10 21:37:01	◀	cir0x (~Adium@dslb-088-076-084-066.088.076.pools.vodafone-ip.de) has quit (Client Quit)
2016-01-10 21:37:31	▶	mrvdb (~mrvdb@2001:41f0:61::2) has joined #haskell
2016-01-10 21:37:33	▶	ericshortcut (~ericshort@191.254.158.212) has joined #haskell
2016-01-10 21:38:22	▶	Tertain (~tertain@190.131.155.156) has joined #haskell
2016-01-10 21:39:14	aweinstock	bb010g: I'd expect (fromIntegral :: Word16 -> Word8) to be pretty cheap/free
2016-01-10 21:39:54	aweinstock	bb010g: you could write some module with (test :: Word16 -> Word8; test = fromIntegral) and checking the generated assembly
2016-01-10 21:39:56	◀	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has quit (Remote host closed the connection)
2016-01-10 21:39:57	bb010g	Ok. Looking around now and can't find anything. Guess the warnings I heard about it were all related to the genericWhatever family for lists and how those weren't really that great.
2016-01-10 21:40:30	hsk3	https://pastee.org/zzsft
2016-01-10 21:40:31	hsk3	See the three "when"s there. Can you tell me why this works? I thought each when was supposed to do a "return ()" on success. But here, return () doesn't work because () doesn't match Int.
2016-01-10 21:40:31	◀	ype (~ype@cpc45-slam6-2-0-cust434.2-4.cable.virginm.net) has quit (Client Quit)
2016-01-10 21:40:34	hsk3	So why does this code compile?
2016-01-10 21:40:45	▶	afcondon (~afcondon@109.78.248.1) has joined #haskell
2016-01-10 21:40:59	▶	waern (~david@217.109.94.79.rev.sfr.net) has joined #haskell
2016-01-10 21:42:38	aweinstock	bb010g: fromIntegral is a member of the Num typeclass, and typeclasses do have overhead similar to objects (virtual calls, indirection) _if used polymorphically_
2016-01-10 21:42:46	▶	ype (~ype@cpc45-slam6-2-0-cust434.2-4.cable.virginm.net) has joined #haskell
2016-01-10 21:42:48	▶	koray (~korayal@unaffiliated/koray) has joined #haskell
2016-01-10 21:43:16	geekosaur	:t when
2016-01-10 21:43:18	lambdabot	Applicative f => Bool -> f () -> f ()
2016-01-10 21:43:24	aweinstock	but (fromIntegral :: Word16 -> Word8) is monomorphic (only used for a specific type), so there's no vtable-ish things happening
2016-01-10 21:43:25	geekosaur	well, no, not relevant
2016-01-10 21:43:25	geekosaur	the reason it works is that:
2016-01-10 21:43:25	geekosaur	> return () >> return 3 :: Either String Int
2016-01-10 21:43:26	geekosaur	hm, did we lose a bot
2016-01-10 21:43:27	geekosaur	the Int is the *final* result
2016-01-10 21:43:29	lambdabot	 Right 3
2016-01-10 21:43:39	geekosaur	what happens in the middle can vary
2016-01-10 21:43:50	geekosaur	and >> doesn't care what type it's fed
2016-01-10 21:43:52	hsk3	geekosaur: yes but return () is still in there right? But return () shouldn't compile.
2016-01-10 21:44:13	geekosaur	please read what I said again
2016-01-10 21:44:29	aweinstock	> (return () :: Either a ()) >> (return 3 :: Either b Int)
2016-01-10 21:44:31	lambdabot	 Right 3
2016-01-10 21:44:32	geekosaur	I have this feeling you are imputing more magic to "do" than it actually has
2016-01-10 21:44:37	▶	abhixec (~archmonk@c-50-174-16-226.hsd1.ca.comcast.net) has joined #haskell
2016-01-10 21:44:38	liste	:t (>>)
2016-01-10 21:44:40	lambdabot	Monad m => m a -> m b -> m b
2016-01-10 21:44:49	liste	that one doesn't care what `a' is
2016-01-10 21:45:14	▶	t0by (~t0by@host181-188-dynamic.31-79-r.retail.telecomitalia.it) has joined #haskell
2016-01-10 21:45:25	geekosaur	the *final* reuslt here is "return 3" which satisfies Either String Int
2016-01-10 21:45:30	aweinstock	hsk3: (do { a; b }) = (a >> b)
2016-01-10 21:45:39	geekosaur	what happens in the middle *does not have to be Int*
2016-01-10 21:45:45	◀	griotspeak (~textual@c-73-237-161-156.hsd1.ga.comcast.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-10 21:45:57	hsk3	ok i see
2016-01-10 21:46:00	hsk3	that's why this compiles: https://pastee.org/br6bz
2016-01-10 21:46:02	hsk3	ok i get it now
2016-01-10 21:46:05	◀	begriffs (~begriffs@50-0-204-77.dsl.static.fusionbroadband.com) has quit
2016-01-10 21:46:09	▶	griotspeak (~textual@c-73-237-161-156.hsd1.ga.comcast.net) has joined #haskell
2016-01-10 21:46:17	geekosaur	() is perfectly valid as long as you don't use it as the final value, which you don't because it's followed by "return 3"
2016-01-10 21:46:19	aweinstock	:t fmap (const 3) (return ())
2016-01-10 21:46:21	lambdabot	(Monad f, Num b) => f b
2016-01-10 21:46:36	aweinstock	> fmap (const 3) (return ()) :: Either a Int
2016-01-10 21:46:37	lambdabot	 Right 3
2016-01-10 21:46:43	▶	hannelita (~hannelita@2804:14c:a8:27a5:980a:b246:26bf:6926) has joined #haskell
2016-01-10 21:46:54	aweinstock	^ "computing" something via a different type in the middle
2016-01-10 21:47:19	◀	raichoo (~raichoo@mue-88-130-57-172.dsl.tropolys.de) has quit (Ping timeout: 272 seconds)
2016-01-10 21:47:46	t0by	Hi. Simple and terribly daunting question: is there an interactive tutorial and/or set of progressive programming exercises that will give me a firm hand with Haskell *fast*? Haskell is not my first exposure to functional programming, but I come from elisp and Mathematica. I am going to take a test that's not Haskell-specific, but *is* given in Haskell in 20 days.
2016-01-10 21:48:18	◀	lambda-11235 (~lambda-11@75-111-50-39.erkacmtk01.res.dyn.suddenlink.net) has quit (Quit: Bye)
2016-01-10 21:48:20	▶	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined #haskell
2016-01-10 21:48:23	◀	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has quit (Remote host closed the connection)
2016-01-10 21:48:30	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-10 21:48:34	▶	athan (~athan_@c-73-153-199-28.hsd1.co.comcast.net) has joined #haskell
2016-01-10 21:48:47	▶	centrinia (~centrinia@2602:306:bd0d:a690:ad02:a077:6a63:3b96) has joined #haskell
2016-01-10 21:49:03	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-10 21:49:09	◀	insitu (~textual@105.196.201.77.rev.sfr.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-01-10 21:49:12	geekosaur	hsk3, consider:
2016-01-10 21:49:29	▶	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined #haskell
2016-01-10 21:49:32	geekosaur	> ord $ chr 3 :: Int
2016-01-10 21:49:33	◀	marcecoll (~marcecoll@2.Red-79-155-140.dynamicIP.rima-tde.net) has quit (Quit: Lost terminal)
2016-01-10 21:49:35	lambdabot	 3
2016-01-10 21:49:38	◀	abhixec (~archmonk@c-50-174-16-226.hsd1.ca.comcast.net) has quit (Ping timeout: 250 seconds)
2016-01-10 21:49:52	t0by	(Well, it's not my first exposure to Haskell either, but I've forgotten most of the syntax, etc)
2016-01-10 21:50:03	▶	insitu (~textual@105.196.201.77.rev.sfr.net) has joined #haskell
2016-01-10 21:50:10	aweinstock	@where learnhaskell
2016-01-10 21:50:11	lambdabot	https://github.com/bitemyapp/learnhaskell
2016-01-10 21:50:14	geekosaur	the reasoning you were using would have this be illegal because chr :: Int -> Char so there's a Char value in the middle
2016-01-10 21:50:22	▶	jacquerie (~jacquerie@dynamic-adsl-78-13-144-152.clienti.tiscali.it) has joined #haskell
2016-01-10 21:50:23	◀	iwmrby (~iwmrby@5-12-89-116.residential.rdsnet.ro) has quit (Quit: WeeChat 1.3)
2016-01-10 21:50:30	aweinstock	^ I think that's becoming the "standard" set of exercises or something
2016-01-10 21:51:07	▶	martin-t (~martin-t@c-71-198-25-196.hsd1.ca.comcast.net) has joined #haskell
2016-01-10 21:51:09	geekosaur	as it turns out, this is similar to what you were doing (although it is reversed). instead of $ the operator is >>, and you have something that produces IO () instead of something producing Char
2016-01-10 21:51:13	t0by	aweinstock, thank you so much
2016-01-10 21:51:15	▶	MorpheusB (~morpheusb@95.211.172.97) has joined #haskell
2016-01-10 21:51:18	◀	hannelita (~hannelita@2804:14c:a8:27a5:980a:b246:26bf:6926) has quit (Ping timeout: 264 seconds)
2016-01-10 21:51:42	◀	pauliprice (~paulipric@ool-4350ace2.dyn.optonline.net) has quit (Ping timeout: 260 seconds)
2016-01-10 21:51:51	◀	anohigisavay (~kj@27.115.75.78) has quit (Remote host closed the connection)
2016-01-10 21:51:53	▶	Geraldus___ (~Geraldus@213.59.130.250) has joined #haskell
2016-01-10 21:51:57	◀	jacquerie (~jacquerie@dynamic-adsl-78-13-144-152.clienti.tiscali.it) has left #haskell
2016-01-10 21:53:03	t0by	aweinstock, cis194 *seems* particularly interesting in that it apparently includes a set of decent lectures
2016-01-10 21:53:06	geekosaur	and for all that when looks like a control structure and do looks like a block of commands, both are just expressions
2016-01-10 21:53:27	▶	lethjakman (~lethjakma@71.56.221.51) has joined #haskell
2016-01-10 21:55:22	◀	psy__ (~psy@43.224.156.111) has quit (Ping timeout: 240 seconds)
2016-01-10 21:55:25	◀	Geraldus__ (~Geraldus@213.59.131.123) has quit (Ping timeout: 265 seconds)
2016-01-10 21:56:49	aweinstock	t0by: from bitemyapp's discussion of it, it sounded like he considers the exercises to be the important bits
2016-01-10 21:56:51	◀	vvvv (32894c74@gateway/web/cgi-irc/kiwiirc.com/ip.50.137.76.116) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2016-01-10 21:57:05	t0by	aweinstock, yes, basically I *did* come for excercises.
2016-01-10 21:57:16	▶	erikd (~erikd@103.229.16.4) has joined #haskell
2016-01-10 21:57:37	t0by	aweinstock, finding things-other-than-excercises is easy with google and the various famous and less famous books around
2016-01-10 21:57:56	t0by	but I need to do actual programming
2016-01-10 21:58:21	◀	lethjakman (~lethjakma@71.56.221.51) has quit (Ping timeout: 256 seconds)
2016-01-10 22:00:22	▶	mkii (~adas@cpe-109-60-50-169.st4.cable.xnet.hr) has joined #haskell
2016-01-10 22:00:37	hsk3	https://pastee.org/84f3y
2016-01-10 22:00:38	hsk3	Why is than an error?
2016-01-10 22:00:49	◀	kazagistar (~Adium@host-72-174-103-162.static.bresnan.net) has quit (Quit: Leaving.)
2016-01-10 22:00:57	▶	timwilkens (~timwilken@cpe-76-88-64-94.san.res.rr.com) has joined #haskell
2016-01-10 22:01:03	hsk3	no sorry wait
2016-01-10 22:01:05	hsk3	1sec
2016-01-10 22:01:07	▶	chrisramsey (~chrisrams@2602:306:3762:700:286d:27f4:4635:8255) has joined #haskell
2016-01-10 22:01:08	▶	csd_ (~chris@cpe-24-90-169-55.nyc.res.rr.com) has joined #haskell
2016-01-10 22:01:13	◀	fmauro (~fmauro@5.145.17.181) has quit (Ping timeout: 265 seconds)
2016-01-10 22:01:44	▶	wanderer (~wanderer@unaffiliated/anderson) has joined #haskell
2016-01-10 22:02:01	hsk3	https://pastee.org/wzhn7
2016-01-10 22:02:01	hsk3	Why is that an error?
2016-01-10 22:02:24	▶	x3x (94a82805@gateway/web/cgi-irc/kiwiirc.com/ip.148.168.40.5) has joined #haskell
2016-01-10 22:02:46	◀	insitu (~textual@105.196.201.77.rev.sfr.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-01-10 22:03:44	▶	redxaxder (~redxaxder@c-73-232-94-188.hsd1.tx.comcast.net) has joined #haskell
2016-01-10 22:04:08	▶	abhixec (~archmonk@c-50-174-16-226.hsd1.ca.comcast.net) has joined #haskell
2016-01-10 22:04:41	▶	demilux (~demilux@2600:380:7018:c3d2:a0d1:3cab:a203:dc79) has joined #haskell
2016-01-10 22:04:42	◀	ixaxaar (~ixaxaar@103.16.70.14) has quit (Ping timeout: 240 seconds)
2016-01-10 22:04:50	▶	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #haskell
2016-01-10 22:05:06	aweinstock	:t when
2016-01-10 22:05:08	lambdabot	Applicative f => Bool -> f () -> f ()
2016-01-10 22:05:39	◀	broma0 (~broma0@ool-182e23f2.dyn.optonline.net) has quit (Ping timeout: 255 seconds)
2016-01-10 22:05:50	aweinstock	:t Left "asdf" :: Either a ()
2016-01-10 22:05:52	lambdabot	    Couldn't match expected type ‘a1’ with actual type ‘[Char]’
2016-01-10 22:05:52	lambdabot	      ‘a1’ is a rigid type variable bound by
2016-01-10 22:05:52	lambdabot	           an expression type signature: Either a1 () at <interactive>:1:1
2016-01-10 22:06:03	aweinstock	:t Left "asdf" :: Either String ()
2016-01-10 22:06:05	lambdabot	Either String ()
2016-01-10 22:06:06	◀	xnil (~xnil@69.43.66.12) has quit (Ping timeout: 250 seconds)
2016-01-10 22:06:49	aweinstock	hsk3: (Either e) = f, for the purposes of "when"
2016-01-10 22:07:09	aweinstock	hsk3: and e = String
2016-01-10 22:07:09	▶	kazagistar (~Adium@host-98-127-133-183.gdj-co.client.bresnan.net) has joined #haskell
2016-01-10 22:07:25	▶	sebhoss (~m0@109.125.117.223.dynamic.cablesurf.de) has joined #haskell
2016-01-10 22:07:39	◀	Xilov (~Xilov@unaffiliated/xilov) has quit (Quit: I just want you to be happy. And maybe a little bit naked.)
2016-01-10 22:07:52	◀	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-01-10 22:08:08	▶	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #haskell
2016-01-10 22:08:13	aweinstock	hsk3: (Left "" :: Either String a) for any a, so it works for (a = ())
2016-01-10 22:08:39	◀	demilux (~demilux@2600:380:7018:c3d2:a0d1:3cab:a203:dc79) has quit (Remote host closed the connection)
2016-01-10 22:08:48	◀	umib0zu (~umib0zu@146-115-43-219.c3-0.abr-ubr1.sbo-abr.ma.cable.rcn.com) has quit (Quit: umib0zu)
2016-01-10 22:09:09	aweinstock	hsk3: (Right 3 :: Either a Int) for any a, but there's no way to force (Int = ())
2016-01-10 22:09:17	▶	sssilver (~sssilver@cpe-70-112-245-224.austin.res.rr.com) has joined #haskell
2016-01-10 22:09:23	aweinstock	well...
2016-01-10 22:09:48	▶	AfC (~andrew@120.19.185.100) has joined #haskell
2016-01-10 22:09:52	aweinstock	:t Unsafe.Coerce.unsafeCoerce (Right 3 :: Either a Int) :: Either a ()
2016-01-10 22:09:54	lambdabot	Either a ()
2016-01-10 22:10:34	aweinstock	but don't do that, it'll probably segfault, and statements made about the typesystem normally ignore unsafeCoerce
2016-01-10 22:10:44	Gurkenglas	hsk3, the information "3" you put into the when doesn't go anywhere, and it knows that, so it doesn't allow you to give it any information in the first place
2016-01-10 22:11:04	◀	slomo (~slomo@unaffiliated/slomo) has quit (Quit: Ex-Chat)
2016-01-10 22:11:22	◀	logzet (~quassel@unaffiliated/logzet) has quit (Remote host closed the connection)
2016-01-10 22:11:23	Gurkenglas	If you replaced 3 with (), that whole when block does nothing and so you can remove it
2016-01-10 22:11:26	▶	umib0zu (~umib0zu@146-115-43-219.c3-0.abr-ubr1.sbo-abr.ma.cable.rcn.com) has joined #haskell
2016-01-10 22:11:43	Gurkenglas	And then you can combine the two consecutive when conditions into one!
2016-01-10 22:12:39	Gurkenglas	(I've been saying that for the same reason, >> should only take m () on the left side, not m a - and forever should be m () -> m Void)
2016-01-10 22:13:09	◀	Laserbear (~Laserbear@c-73-223-160-142.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2016-01-10 22:13:11	▶	rfk (~rfk@198.58.123.207) has joined #haskell
2016-01-10 22:13:11	◀	hurrah (~jimmyhurr@84.216.130.226) has quit (Ping timeout: 245 seconds)
2016-01-10 22:13:15	▶	adek (~adek@199.201.64.3) has joined #haskell
2016-01-10 22:14:20	◀	nwf (~nwf@unaffiliated/nwf) has quit (Ping timeout: 250 seconds)
2016-01-10 22:14:36	◀	ericshortcut (~ericshort@191.254.158.212) has quit (Remote host closed the connection)
2016-01-10 22:15:20	◀	Elish (~x@unaffiliated/elish) has quit (Quit: Elish)
2016-01-10 22:16:15	▶	frerich (~frerich@kde/raabe) has joined #haskell
2016-01-10 22:16:38	▶	Big_G (~Big_G@c-24-56-212-199.customer.broadstripe.net) has joined #haskell
2016-01-10 22:17:16	ReinH	hsk3: what error do you get?
2016-01-10 22:17:34	hsk3	No instance for (Num ()) arising from the literal ‘3’
2016-01-10 22:17:53	ReinH	:t when
2016-01-10 22:17:55	lambdabot	Applicative f => Bool -> f () -> f ()
2016-01-10 22:17:59	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-10 22:18:02	ReinH	when is not allowed to return a f Int
2016-01-10 22:18:04	hsk3	this whole monad is over of my head
2016-01-10 22:18:07	ReinH	only a f ()
2016-01-10 22:18:08	Gurkenglas	Of course it's possible that you've been trying to get if-then-else syntax and are not aware of the asymmetry of Either. In that case, use "if" instead of "when", use then/else and no do blocks.
2016-01-10 22:18:18	hsk3	give up or carry on, i wonder sometimes
2016-01-10 22:18:25	hsk3	been learning for 1 year
2016-01-10 22:18:36	hsk3	(on and off)
2016-01-10 22:18:48	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-10 22:18:55	ReinH	so the only Right you could use is Right ()
2016-01-10 22:18:55	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-10 22:19:10	aweinstock	Gurkenglas: is your stance that any code that would be broken by redefining (>> :: m () -> m a -> m a) and (forever :: m () -> m Void) is buggy/smelly?
2016-01-10 22:19:12	ReinH	Any other Right value would be a type error
2016-01-10 22:19:24	◀	rzlourenco (~rzl@a95-92-89-249.cpe.netcabo.pt) has quit (Quit: rzlourenco)
2016-01-10 22:19:24	◀	Wes[SA-PHI] (~textual@74.197.67.119) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-10 22:19:28	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-10 22:19:38	▶	korchov (~korchov@host-80-43-129-157.as13285.net) has joined #haskell
2016-01-10 22:19:40	◀	jbalint (~jbalint@unaffiliated/jbalint) has quit (Quit: Bye!)
2016-01-10 22:19:48	▶	nwf (~nwf@unaffiliated/nwf) has joined #haskell
2016-01-10 22:20:01	▶	PatrickRobotham (uid18270@gateway/web/irccloud.com/x-dsylpafsmswxwhzj) has joined #haskell
2016-01-10 22:20:08	ReinH	Gurkenglas: well, that's a silly idea. It's quite common to use a other than () on the lhs of (>>)
2016-01-10 22:20:10	▶	latro`a_ (~latro`a@2601:14a:4002:86bb:3dc7:3790:835e:7772) has joined #haskell
2016-01-10 22:20:12	⚡	hackagebot tagsoup 0.13.8 - Parsing and extracting information from (possibly malformed) HTML/XML documents  https://hackage.haskell.org/package/tagsoup-0.13.8 (NeilMitchell)
2016-01-10 22:20:17	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-10 22:20:39	aweinstock	:t void
2016-01-10 22:20:41	lambdabot	Functor f => f a -> f ()
2016-01-10 22:20:41	ReinH	and the type of forever is precisely the type you want to indicate its behavior
2016-01-10 22:20:44	Gurkenglas	aweinstock, yep, smelly. It implicitly throws away information and should make it explicit by using void
2016-01-10 22:20:45	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-10 22:21:18	aweinstock	@src void
2016-01-10 22:21:18	◀	JagaJaga (~JagaJaga@178.62.202.50) has quit (Ping timeout: 264 seconds)
2016-01-10 22:21:18	◀	korchov (~korchov@host-80-43-129-157.as13285.net) has left #haskell
2016-01-10 22:21:19	lambdabot	Source not found. Your mind just hasn't been the same since the electro-shock, has it?
2016-01-10 22:21:29	▶	xnil (~xnil@69.43.66.12) has joined #haskell
2016-01-10 22:21:33	Gurkenglas	Anything that can take a without doing anything with it can take () and vice versa
2016-01-10 22:21:37	aweinstock	void = const () --?
2016-01-10 22:21:57	aweinstock	err, fmap (const ())
2016-01-10 22:22:07	aweinstock	:t fmap (const ())
2016-01-10 22:22:08	▶	latro`a (~latro`a@2601:14a:4002:86bb:f078:b22c:aa87:86bf) has joined #haskell
2016-01-10 22:22:08	lambdabot	Functor f => f b -> f ()
2016-01-10 22:22:09	ReinH	If you redefine (>>) that way, you'll just have people using k >>= _ -> ... instead. It's silly.
2016-01-10 22:22:50	aweinstock	ReinH: because that's less characters than (void k >> ...) ?
2016-01-10 22:22:56	◀	drot (~user@unaffiliated/drot) has quit (Quit: rcirc on GNU Emacs 24.5.1)
2016-01-10 22:23:19	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-10 22:23:30	aweinstock	(and Gurkenglas's argument is that (void k >> ...) is more semantically correct, I'd guess)
2016-01-10 22:23:42	◀	Latro__ (~latro`a@2601:14a:4002:86bb:59c1:110d:ce23:90db) has quit (Ping timeout: 240 seconds)
2016-01-10 22:23:49	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-10 22:23:55	ReinH	it's semantically identical.
2016-01-10 22:24:02	ReinH	:t (>>)
2016-01-10 22:24:04	lambdabot	Monad m => m a -> m b -> m b
2016-01-10 22:24:10	ReinH	This already tells you that the a is not used
2016-01-10 22:24:18	▶	Latro__ (~latro`a@2601:14a:4002:86bb:701e:8800:e06a:971) has joined #haskell
2016-01-10 22:24:22	▶	Laserbear (~Laserbear@c-73-223-160-142.hsd1.ca.comcast.net) has joined #haskell
2016-01-10 22:24:25	◀	montanonic (~nicholas@c-98-246-188-73.hsd1.or.comcast.net) has quit (Ping timeout: 256 seconds)
2016-01-10 22:24:36	ReinH	it's extra work for no reason
2016-01-10 22:25:05	ReinH	Same with forever
2016-01-10 22:25:07	ReinH	:t forever
2016-01-10 22:25:09	lambdabot	Monad m => m a -> m b
2016-01-10 22:25:09	◀	latro`a_ (~latro`a@2601:14a:4002:86bb:3dc7:3790:835e:7772) has quit (Ping timeout: 250 seconds)
2016-01-10 22:25:29	ReinH	This is already the type of a computation that is executed forever
2016-01-10 22:25:57	▶	latro`a_ (~latro`a@2601:14a:4002:86bb:746f:19e4:dd2f:be4e) has joined #haskell
2016-01-10 22:26:10	ReinH	Changing the type signatures just breaks existing code and makes them harder to use for no purpose
2016-01-10 22:26:24	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-10 22:26:28	◀	latro`a (~latro`a@2601:14a:4002:86bb:f078:b22c:aa87:86bf) has quit (Ping timeout: 250 seconds)
2016-01-10 22:26:43	◀	micmus (~micmus@088156129087.dynamic-ww-1.vectranet.pl) has quit (Quit: Leaving)
2016-01-10 22:26:44	ReinH	The suggestd version of forever is actually *worse*
2016-01-10 22:26:59	Ferdirand	I guess the argument is that it would prevent some accidental mistakes, but i'd like to see a plausible example of such an accidental mistake
2016-01-10 22:27:14	▶	raichoo (~raichoo@mue-88-130-57-172.dsl.tropolys.de) has joined #haskell
2016-01-10 22:27:22	▶	Coldblackice (~anonz@unaffiliated/coldblackice) has joined #haskell
2016-01-10 22:27:37	▶	jbalint (~jbalint@24-240-72-190.dhcp.mdsn.wi.charter.com) has joined #haskell
2016-01-10 22:27:37	◀	jbalint (~jbalint@24-240-72-190.dhcp.mdsn.wi.charter.com) has quit (Changing host)
2016-01-10 22:27:37	▶	jbalint (~jbalint@unaffiliated/jbalint) has joined #haskell
2016-01-10 22:27:41	▶	latro`a (~latro`a@2601:14a:4002:86bb:94fd:2b7a:f09b:94bb) has joined #haskell
2016-01-10 22:27:42	ReinH	Ferdirand: for (>>), there is none
2016-01-10 22:27:48	hsk3	ok I think I get it. It's not the Either monad, but the Either String monad
2016-01-10 22:27:52	Ferdirand	i was thinking about do desugaring
2016-01-10 22:27:54	ReinH	hsk3: Yes.
2016-01-10 22:28:01	hsk3	cool
2016-01-10 22:28:24	Ferdirand	but writing do { a <- x ; b <- y ; something a b }
2016-01-10 22:28:27	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-10 22:28:33	Ferdirand	sorry wanting to write that
2016-01-10 22:28:52	Ferdirand	and mistakenly writing do { a <- x; y ; something a a }
2016-01-10 22:29:00	Ferdirand	that's contrived and not very plausible
2016-01-10 22:29:04	◀	Latro__ (~latro`a@2601:14a:4002:86bb:701e:8800:e06a:971) has quit (Ping timeout: 250 seconds)
2016-01-10 22:29:06	Ferdirand	surely there must be a better example
2016-01-10 22:29:22	ReinH	Is this seriously a mistake that is plaguing our haskell users?
2016-01-10 22:29:28	▶	umayahabdennabi (~umayahabd@cpe-70-114-217-136.austin.res.rr.com) has joined #haskell
2016-01-10 22:29:36	Ferdirand	i don't know, that's why i'm asking
2016-01-10 22:29:45	ReinH	It seems entirely contrived
2016-01-10 22:29:53	umayahabdennabi	Hi does anybody know how to use the return value of query from mysql-simple
2016-01-10 22:30:00	▶	lynnard (~lingnan@cpc1-walt13-2-0-cust402.13-2.cable.virginm.net) has joined #haskell
2016-01-10 22:30:02	◀	jdnavarro (~danny@89.Red-83-43-208.dynamicIP.rima-tde.net) has quit (Quit: WeeChat 1.3)
2016-01-10 22:30:04	◀	Wizek (~Wizek@catv-89-132-132-110.catv.broadband.hu) has quit (Read error: Connection reset by peer)
2016-01-10 22:30:13	▶	Latro__ (~latro`a@2601:14a:4002:86bb:cc2f:d66a:1a84:e486) has joined #haskell
2016-01-10 22:30:23	ReinH	umayahabdennabi: did you read the docs?
2016-01-10 22:30:47	◀	sphinxo (~sphinxo@212-139-66-70.dynamic.dsl.as9105.com) has quit (Quit: WeeChat 1.3)
2016-01-10 22:30:47	◀	latro`a_ (~latro`a@2601:14a:4002:86bb:746f:19e4:dd2f:be4e) has quit (Ping timeout: 260 seconds)
2016-01-10 22:31:09	◀	adamCS (~AdamConne@cpe-74-71-211-64.nyc.res.rr.com) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-10 22:31:15	umayahabdennabi	ya they only show: query conn “select …” 
2016-01-10 22:31:27	umayahabdennabi	but they don’t show how they use the results returned from the query
2016-01-10 22:31:32	ReinH	The docs provide lots of examples.
2016-01-10 22:31:39	ReinH	Yes they do.
2016-01-10 22:31:53	ReinH	There's a section titled "extracting results" even.
2016-01-10 22:32:05	◀	hilquias` (~user@179.181.32.135) has quit (Remote host closed the connection)
2016-01-10 22:32:16	hsk3	And is it true that in the (Either a) monad, Left always "wins"? So if we get Left once, Left gets propagated downwards, ignoring everything else.
2016-01-10 22:32:16	▶	manuel_ (~manuel@91.137.32.132) has joined #haskell
2016-01-10 22:32:19	▶	Wizek_ (~Wizek@catv-89-132-132-110.catv.broadband.hu) has joined #haskell
2016-01-10 22:32:24	hsk3	Because that's how >>= is implemented in that monad.
2016-01-10 22:32:36	▶	tekkkz (~tekkkz@p2003005F2A369B520A9E01FFFEA965AA.dip0.t-ipconnect.de) has joined #haskell
2016-01-10 22:32:36	umayahabdennabi	okay let me check this out, thx ReinH
2016-01-10 22:32:39	jle`	yes; that's actually the only way it could possibly be implemented, too :)
2016-01-10 22:32:48	hsk3	ok cool
2016-01-10 22:32:51	◀	cchalmers (~textual@cpc1-shep13-2-0-cust104.8-3.cable.virginm.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-10 22:33:06	jle`	the behavior is similar to the instance for Maybe
2016-01-10 22:33:26	ReinH	Ferdirand: You might as well say they are doing do { a <- x ; a' <- y; somthing a a } instead of something a a
2016-01-10 22:33:29	ReinH	'
2016-01-10 22:33:32	monochrom	Left blah >>= \x -> ...  you don't really have anything of the right type to pass to x
2016-01-10 22:33:37	hsk3	yeah where Nothing wins
2016-01-10 22:33:41	ReinH	that seems like an error that is actually common.
2016-01-10 22:33:54	ReinH	Forgetting to bind does not.
2016-01-10 22:34:00		[psyq away: not here right now brb]
2016-01-10 22:34:00	◀	phyrex1an (~phyrex1an@2a02:fe0:c151:4d10:41b7:70b1:cae0:f93b) has quit (Ping timeout: 255 seconds)
2016-01-10 22:34:01	◀	ril (~ril@c-98-210-195-123.hsd1.ca.comcast.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-10 22:34:01	▶	latro`a_ (~latro`a@69.143.242.203) has joined #haskell
2016-01-10 22:34:12	◀	goldfire (~Adium@c-98-225-220-10.hsd1.pa.comcast.net) has quit (Ping timeout: 272 seconds)
2016-01-10 22:34:17	◀	latro`a (~latro`a@2601:14a:4002:86bb:94fd:2b7a:f09b:94bb) has quit (Ping timeout: 260 seconds)
2016-01-10 22:34:19	aweinstock	jle`: err, how is that the only possible way? I don't see how, at a glance, "keeping the last Left" not typecorrect?
2016-01-10 22:34:29	ReinH	This proposal doesn't help with that, but something <$> x <*> y does.
2016-01-10 22:34:31	jle`	aweinstock: try it :O
2016-01-10 22:34:46	◀	albertus1 (~albertus1@f051224118.adsl.alicedsl.de) has quit (Quit: Leaving.)
2016-01-10 22:34:49	ReinH	:t (>>=)
2016-01-10 22:34:50	lambdabot	Monad m => m a -> (a -> m b) -> m b
2016-01-10 22:35:06	jle`	aweinstock: you can write an Applicative instance where you "keep the last Left", but not Monad
2016-01-10 22:35:12	jle`	i do encourage you to try though and see for yourself
2016-01-10 22:35:30	ReinH	aweinstock: in Either e a, how do you bass an a to the (a -> m b) if you have a Left? There's no a value.
2016-01-10 22:35:37	◀	Th30n (~Th30n@83-131-16-76.adsl.net.t-com.hr) has quit (Quit: leaving)
2016-01-10 22:36:12	▶	rodlogic_ (~rodlogic@179.159.96.218) has joined #haskell
2016-01-10 22:36:17	ReinH	The difference with Applicative is
2016-01-10 22:36:19	ReinH	:t (<*>)
2016-01-10 22:36:21	lambdabot	Applicative f => f (a -> b) -> f a -> f b
2016-01-10 22:36:22	aweinstock	Left e >>= f = f (unsafeCoerce e) -- ;)
2016-01-10 22:36:22	◀	rodlogic (~rodlogic@179.159.96.218) has quit (Read error: Connection reset by peer)
2016-01-10 22:36:24	◀	mkii (~adas@cpe-109-60-50-169.st4.cable.xnet.hr) has quit (Quit: IRC)
2016-01-10 22:36:29	▶	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has joined #haskell
2016-01-10 22:36:30	ReinH	I can already tell whether the rhs is a Left or Right
2016-01-10 22:36:32	monochrom	Applicative is more symmetry, yeah
2016-01-10 22:36:34	ReinH	with (>>=), I can't
2016-01-10 22:36:53	ReinH	Not until I apply an a, but I have no a to give.
2016-01-10 22:36:53	aweinstock	(but I understand)
2016-01-10 22:36:54	▶	Azel_ (~kvirc@ppp-58-8-73-55.revip2.asianet.co.th) has joined #haskell
2016-01-10 22:36:55	monochrom	Monad inflicts a data dependency
2016-01-10 22:37:00	▶	fooBard (~henrique_@186.194.99.164) has joined #haskell
2016-01-10 22:37:06	▶	Darky_ (~Darky@2a02:2f0a:4034:8700:7d3e:99a7:8111:aef) has joined #haskell
2016-01-10 22:37:10	ReinH	aweinstock: that doesn't actually work, it just type checks.
2016-01-10 22:37:24	aweinstock	I know, I was trying to make a joke
2016-01-10 22:37:24	▶	michaelneale (~textual@ppp121-44-138-228.lns20.syd7.internode.on.net) has joined #haskell
2016-01-10 22:37:44	◀	Latro__ (~latro`a@2601:14a:4002:86bb:cc2f:d66a:1a84:e486) has quit (Ping timeout: 250 seconds)
2016-01-10 22:37:45	◀	vlatkoB_ (~IRC_clien@unaffiliated/vlatkob) has quit (Remote host closed the connection)
2016-01-10 22:37:50	▶	albertus1 (~albertus1@f051224118.adsl.alicedsl.de) has joined #haskell
2016-01-10 22:37:57	aweinstock	unsafeCoerce is never (modulo newtypes?) a law-abiding thingy
2016-01-10 22:38:15	◀	timwilkens (~timwilken@cpe-76-88-64-94.san.res.rr.com) has quit (Remote host closed the connection)
2016-01-10 22:38:34	▶	Wizek (~Wizek@catv-89-132-132-110.catv.broadband.hu) has joined #haskell
2016-01-10 22:38:39	◀	FreeFull (~freefull@defocus/sausage-lover) has quit (Ping timeout: 246 seconds)
2016-01-10 22:38:42	◀	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Remote host closed the connection)
2016-01-10 22:38:49	jle`	btw, for coercing newtypes, we now have safeCoerce, `coerce` :o
2016-01-10 22:39:02	aweinstock	:t coerce
2016-01-10 22:39:04	lambdabot	(Functor f, Contravariant f) => f a -> f b
2016-01-10 22:39:19	jle`	not that one :o
2016-01-10 22:39:22	ReinH	heh
2016-01-10 22:39:29	monochrom	Left e >>= f = f (unsafePerformIO (putStrLn "I need help, please suggest a value" >> readLn))
2016-01-10 22:39:39	aweinstock	lol
2016-01-10 22:39:41	ReinH	monochrom: :)
2016-01-10 22:39:59	jle`	doesn't typecheck! :O
2016-01-10 22:40:01	◀	umib0zu (~umib0zu@146-115-43-219.c3-0.abr-ubr1.sbo-abr.ma.cable.rcn.com) has quit (Quit: umib0zu)
2016-01-10 22:40:08	monochrom	unfortunately now it has a Read constraint. now you have to go indexed monads.
2016-01-10 22:40:11	jle`	requires a Read constraint
2016-01-10 22:40:12	jle`	yeah
2016-01-10 22:40:14	jle`	heh
2016-01-10 22:40:23	▶	broma0 (~broma0@ool-182e23f2.dyn.optonline.net) has joined #haskell
2016-01-10 22:40:33	◀	silver (~silver@37.44.86.239) has quit (Read error: Connection reset by peer)
2016-01-10 22:40:42	◀	wolfcub (~henrique_@177.55.202.245) has quit (Ping timeout: 276 seconds)
2016-01-10 22:40:43	⚡	hackagebot js-jquery 1.12.0 - Obtain minified jQuery code  https://hackage.haskell.org/package/js-jquery-1.12.0 (NeilMitchell)
2016-01-10 22:40:45	⚡	hackagebot explicit-exception 0.1.8 - Exceptions which are explicit in the type signature.  https://hackage.haskell.org/package/explicit-exception-0.1.8 (HenningThielemann)
2016-01-10 22:40:49	▶	kurt11 (~Adium@99-91-2-47.lightspeed.austtx.sbcglobal.net) has joined #haskell
2016-01-10 22:40:55	◀	michaelneale (~textual@ppp121-44-138-228.lns20.syd7.internode.on.net) has quit (Client Quit)
2016-01-10 22:41:05	Darky_	Can you recommend me some good practice to learn monads ?
2016-01-10 22:41:13	◀	rcat (~us3r@host86-164-42-58.range86-164.btcentralplus.com) has quit (Quit: leaving)
2016-01-10 22:41:14	ReinH	monochrom: just read a () and then unsafeCoerce it
2016-01-10 22:41:20	◀	mfukar (~prophet@unaffiliated/mfukar) has quit (Read error: Connection reset by peer)
2016-01-10 22:41:21	monochrom	scary
2016-01-10 22:41:22	ReinH	and thereby lie to your user
2016-01-10 22:41:26	ReinH	for profit
2016-01-10 22:41:43	▶	michaelneale (~textual@ppp121-44-138-228.lns20.syd7.internode.on.net) has joined #haskell
2016-01-10 22:41:48	▶	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #haskell
2016-01-10 22:41:50	ReinH	as opposed to the original suggestion, which was not scary?
2016-01-10 22:41:57	jle`	Darky_: my best advice is to forget about learning about monads in general
2016-01-10 22:42:03	jle`	and just learn how to use specific types
2016-01-10 22:42:22	jle`	like learn how ot use Maybe, List, IO, etc.
2016-01-10 22:42:58	Darky_	I already did.. but i have no feeling about creating new monads when needed 
2016-01-10 22:43:09	◀	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has quit (Remote host closed the connection)
2016-01-10 22:43:19	monochrom	https://github.com/NICTA/course contains a stage where you re-implement a lot of standard monad stuff yourself (under different names to avoid name clash)
2016-01-10 22:43:44	◀	Darky_ (~Darky@2a02:2f0a:4034:8700:7d3e:99a7:8111:aef) has quit (Read error: Connection reset by peer)
2016-01-10 22:43:53	▶	nour (~nour@x55b58682.dyn.telefonica.de) has joined #haskell
2016-01-10 22:44:36	◀	v_g (~vg@212.124.5.64) has quit
2016-01-10 22:44:57	◀	broma0 (~broma0@ool-182e23f2.dyn.optonline.net) has quit (Ping timeout: 272 seconds)
2016-01-10 22:45:05	▶	al-damiri (~manzoor@unaffiliated/al-damiri) has joined #haskell
2016-01-10 22:45:29	◀	fizbin (~Adium@pool-96-235-153-152.cmdnnj.east.verizon.net) has quit (Quit: Leaving.)
2016-01-10 22:45:41	◀	jbgi (~jbgi@84-72-168-7.dclient.hispeed.ch) has quit (Ping timeout: 265 seconds)
2016-01-10 22:45:57	aweinstock	is the stuff about Free monads good motivation for monads in general?
2016-01-10 22:46:24	▶	Heasummn (~Heasummn@c-73-51-87-243.hsd1.il.comcast.net) has joined #haskell
2016-01-10 22:46:27	◀	tekkkz (~tekkkz@p2003005F2A369B520A9E01FFFEA965AA.dip0.t-ipconnect.de) has quit (Quit: Leaving)
2016-01-10 22:46:33	◀	abhixec (~archmonk@c-50-174-16-226.hsd1.ca.comcast.net) has quit (Ping timeout: 276 seconds)
2016-01-10 22:46:55	▶	Iskarlar (~Iskarlar@188-213-201-31.ftth.glasoperator.nl) has joined #haskell
2016-01-10 22:46:56	◀	j2j (~Thunderbi@ool-435051f2.dyn.optonline.net) has quit (Ping timeout: 245 seconds)
2016-01-10 22:47:24	▶	hannelita (~hannelita@2804:14c:a8:27a5:f90a:39d2:932b:f9c9) has joined #haskell
2016-01-10 22:47:25	▶	tekkkz (~tekkkz@p2003005F2A369B52FA6F29ADA892FE2D.dip0.t-ipconnect.de) has joined #haskell
2016-01-10 22:47:52	▶	adamCS (~AdamConne@cpe-74-71-211-64.nyc.res.rr.com) has joined #haskell
2016-01-10 22:47:56	▶	yfeldblum (~yfeldblum@2620:10d:c090:180::104) has joined #haskell
2016-01-10 22:47:57	▶	micmus (~micmus@088156129087.dynamic-ww-1.vectranet.pl) has joined #haskell
2016-01-10 22:48:21	◀	tekkkz (~tekkkz@p2003005F2A369B52FA6F29ADA892FE2D.dip0.t-ipconnect.de) has quit (Client Quit)
2016-01-10 22:49:01	◀	Iskarlar (~Iskarlar@188-213-201-31.ftth.glasoperator.nl) has quit (Client Quit)
2016-01-10 22:49:07	◀	josdeha_rt (~josdehart@535299F3.cm-6-3c.dynamic.ziggo.nl) has quit (Quit: josdeha_rt)
2016-01-10 22:49:39	▶	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has joined #haskell
2016-01-10 22:50:20	◀	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has quit (Remote host closed the connection)
2016-01-10 22:50:21	▶	j2j (~Thunderbi@ool-435051f2.dyn.optonline.net) has joined #haskell
2016-01-10 22:50:39	◀	dadaro (~androidde@78.173.207.153) has quit (Read error: Connection reset by peer)
2016-01-10 22:50:39	◀	python476 (~user@2a02-8420-6f5c-4200-021f-3bff-fe7d-f603.rev.sfr.net) has quit (Ping timeout: 255 seconds)
2016-01-10 22:50:43	⚡	hackagebot cabal-helper 0.6.3.0 - Simple interface to some of Cabal's configuration state used by ghc-mod  https://hackage.haskell.org/package/cabal-helper-0.6.3.0 (DanielG)
2016-01-10 22:51:18	◀	beepbeep_ (~beepbeep_@78-23-142-12.access.telenet.be) has quit (Ping timeout: 264 seconds)
2016-01-10 22:51:25	◀	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Remote host closed the connection)
2016-01-10 22:51:41	◀	{AS} (uid45026@gateway/web/irccloud.com/x-rrozscxvyxpcaxjd) has quit (Quit: Connection closed for inactivity)
2016-01-10 22:51:54	◀	hannelita (~hannelita@2804:14c:a8:27a5:f90a:39d2:932b:f9c9) has quit (Ping timeout: 264 seconds)
2016-01-10 22:52:34	▶	goldfire (~Adium@2601:4b:101:b3f0:c62c:3ff:fe03:9354) has joined #haskell
2016-01-10 22:53:22	◀	chrisramsey (~chrisrams@2602:306:3762:700:286d:27f4:4635:8255) has quit (Ping timeout: 240 seconds)
2016-01-10 22:54:04	◀	clynamen (~clynamen@93-50-191-217.ip153.fastwebnet.it) has quit (Read error: Connection reset by peer)
2016-01-10 22:54:52	▶	ixaxaar (~ixaxaar@103.16.70.14) has joined #haskell
2016-01-10 22:55:26	▶	pavonia (~user@dslb-178-000-102-193.178.000.pools.vodafone-ip.de) has joined #haskell
2016-01-10 22:55:50	▶	xiinotulp (~q@node-p2u.pool-101-108.dynamic.totbb.net) has joined #haskell
2016-01-10 22:55:56	⚡	hackagebot hspec-structured-formatter 0.1.0.3 -   https://hackage.haskell.org/package/hspec-structured-formatter-0.1.0.3 (flbulgarelli)
2016-01-10 22:55:57	▶	Fisu (toalla@linux.utu.fi) has joined #haskell
2016-01-10 22:56:04	▶	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #haskell
2016-01-10 22:57:02	▶	nocturne777 (~nocturne7@c-76-103-151-171.hsd1.ca.comcast.net) has joined #haskell
2016-01-10 22:57:44	◀	x3x (94a82805@gateway/web/cgi-irc/kiwiirc.com/ip.148.168.40.5) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2016-01-10 22:58:00	◀	adamCS (~AdamConne@cpe-74-71-211-64.nyc.res.rr.com) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-10 22:58:05	hsk3	class Foo a where
2016-01-10 22:58:05	hsk3	    foo :: RealFloat b => a -> b
2016-01-10 22:58:06	hsk3	Is this discouraged in Haskell?
2016-01-10 22:58:13	▶	vvrr (94a82805@gateway/web/cgi-irc/kiwiirc.com/ip.148.168.40.5) has joined #haskell
2016-01-10 22:58:16	hsk3	(In a similar way that constraints are discouraged in data.)
2016-01-10 22:58:36	◀	plutoniix (~q@node-4n9.pool-125-25.dynamic.totbb.net) has quit (Ping timeout: 246 seconds)
2016-01-10 22:58:56	▶	clynamen (~clynamen@93-50-191-217.ip153.fastwebnet.it) has joined #haskell
2016-01-10 22:59:09	▶	MitchW (~MitchW@203-206-107-173.dyn.iinet.net.au) has joined #haskell
2016-01-10 23:00:56	vvrr	hi
2016-01-10 23:01:24	▶	Xzip (~Xzip@81-230-143-111-no169.tbcn.telia.com) has joined #haskell
2016-01-10 23:01:28	▶	umib0zu (~umib0zu@146-115-43-219.c3-0.abr-ubr1.sbo-abr.ma.cable.rcn.com) has joined #haskell
2016-01-10 23:01:57	▶	Goplat (~goplat@adsl-69-107-95-193.dsl.pltn13.pacbell.net) has joined #haskell
2016-01-10 23:02:03	◀	Goplat (~goplat@adsl-69-107-95-193.dsl.pltn13.pacbell.net) has quit (Changing host)
2016-01-10 23:02:03	▶	Goplat (~goplat@reactos/developer/Goplat) has joined #haskell
2016-01-10 23:02:12	aweinstock	vvrr: if you have a question, the convention is to ask it directly, rather than saying hi first
2016-01-10 23:02:36	◀	MitchW_ (~MitchW@114-198-32-220.dyn.iinet.net.au) has quit (Ping timeout: 265 seconds)
2016-01-10 23:03:26	◀	osa1 (~omer@haskell/developer/osa1) has quit (Ping timeout: 260 seconds)
2016-01-10 23:04:30	◀	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (Ping timeout: 264 seconds)
2016-01-10 23:04:55	◀	SaTa (~thedude@182.185.209.28) has left #haskell ("Quit")
2016-01-10 23:05:13	▶	hunteriam (uid63798@gateway/web/irccloud.com/x-tgsfldqhttqxxxcn) has joined #haskell
2016-01-10 23:06:06	◀	Wizek_ (~Wizek@catv-89-132-132-110.catv.broadband.hu) has quit (Read error: Connection reset by peer)
2016-01-10 23:07:06	ℹ	mrowe_away is now known as mrowe
2016-01-10 23:08:17	◀	Laserbear (~Laserbear@c-73-223-160-142.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2016-01-10 23:08:22	◀	waern (~david@217.109.94.79.rev.sfr.net) has quit (Quit: WeeChat 1.3)
2016-01-10 23:08:24	▶	pauliprice (~paulipric@ool-4350ace2.dyn.optonline.net) has joined #haskell
2016-01-10 23:08:57	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-10 23:09:07	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-10 23:09:44	◀	jedws (~jedws@c58-109-75-176.randw4.nsw.optusnet.com.au) has quit (Quit: Computer has gone to sleep.)
2016-01-10 23:10:13	vvrr	aweinstock just being friendly man :)
2016-01-10 23:10:27	Gurkenglas	ReinH, it's, how do I say it, "closer to the canonical system that can be derived from math". I'm not sure but I think I first got this idea when I realized that exferenceBot could more safely use forever and >> and the like if it couldnt use them to waste information (because it looks for expressions that use up all the information they have.) and that sounded like a generally useful language feature
2016-01-10 23:11:21	Gurkenglas	vvrr, you get tired of empty phrases when you hang around in this channel for years :D
2016-01-10 23:12:00	▶	ril (~ril@c-98-210-195-123.hsd1.ca.comcast.net) has joined #haskell
2016-01-10 23:12:10	◀	kazagistar (~Adium@host-98-127-133-183.gdj-co.client.bresnan.net) has quit (Quit: Leaving.)
2016-01-10 23:12:27	vvrr	gurkenglas so how's the weather?
2016-01-10 23:12:50	Gurkenglas	The weather's behaving kinda irrelevantly today
2016-01-10 23:12:59	▶	Laserbea_ (~Laserbear@c-73-223-160-142.hsd1.ca.comcast.net) has joined #haskell
2016-01-10 23:14:50	◀	adam__ (~adam@static-50-53-43-165.bvtn.or.frontiernet.net) has quit (Read error: Connection reset by peer)
2016-01-10 23:15:16	▶	demilux (~demilux@c-76-28-194-126.hsd1.wa.comcast.net) has joined #haskell
2016-01-10 23:15:21	Gurkenglas	Ferdirang, it's kinda similar to an "unused variable" warning. You did something that produced a result, don't you want to use it? If you don't that's weird; declare it.
2016-01-10 23:15:21	▶	adam__ (~adam@static-50-53-43-165.bvtn.or.frontiernet.net) has joined #haskell
2016-01-10 23:15:43	Gurkenglas	(Except of course that other languages dont complain if you dont assign the thing to a variable)
2016-01-10 23:16:17	ReinH	Gurkenglas: (>>) does declare it
2016-01-10 23:16:25	▶	cchalmers (~textual@cpc1-shep13-2-0-cust104.8-3.cable.virginm.net) has joined #haskell
2016-01-10 23:16:30	ReinH	parametricity forces you to ignore the a
2016-01-10 23:16:42	▶	orb (~orb@2001:44b8:319b:8a00:406d:b1f6:7f16:39b3) has joined #haskell
2016-01-10 23:17:15	▶	sccrstud92 (~Andre@pool-108-16-206-74.phlapa.fios.verizon.net) has joined #haskell
2016-01-10 23:17:17	Gurkenglas	I'd guess that >>'s left argument is almost always m (), except for... some parser stuff and forkIO, I guess?
2016-01-10 23:17:31	ReinH	No?
2016-01-10 23:17:41	Gurkenglas	(The latter of which returns a ThreadID that is often unneeded)
2016-01-10 23:17:49	Gurkenglas	Example pls!
2016-01-10 23:18:25	▶	jbgi (~jbgi@84-72-168-7.dclient.hispeed.ch) has joined #haskell
2016-01-10 23:18:31	sccrstud92	does anyone know if it is possible to write a type family that maps type-level Symbols to the type-level Nat that represents the length of that Symbol?
2016-01-10 23:18:44	▶	Wes[SA-PHI] (~textual@74.197.67.119) has joined #haskell
2016-01-10 23:18:51	Gurkenglas	Maybe I'll get good enough at this stuff at some point that I'll actually compile the type signature change against hackage and see how many lines of code wouldnt work anymore
2016-01-10 23:19:31	Gurkenglas	sccrstud92, manually? Sounds good.
2016-01-10 23:19:48	sccrstud92	how would you do that manually?
2016-01-10 23:19:55	◀	demilux (~demilux@c-76-28-194-126.hsd1.wa.comcast.net) has quit (Remote host closed the connection)
2016-01-10 23:20:07	sccrstud92	arent there infinitely many type-level Symbols?
2016-01-10 23:20:30	▶	demilux (~demilux@c-76-28-194-126.hsd1.wa.comcast.net) has joined #haskell
2016-01-10 23:20:43	Gurkenglas	By manually I meant for finitely many :/ dunno for infinite
2016-01-10 23:21:02		[psyq back: gone 00:47:02]
2016-01-10 23:21:29	◀	orb (~orb@2001:44b8:319b:8a00:406d:b1f6:7f16:39b3) has quit (Ping timeout: 272 seconds)
2016-01-10 23:21:39	◀	ixaxaar (~ixaxaar@103.16.70.14) has quit (Ping timeout: 276 seconds)
2016-01-10 23:23:02	◀	kurt11 (~Adium@99-91-2-47.lightspeed.austtx.sbcglobal.net) has quit (Quit: Leaving.)
2016-01-10 23:24:07	◀	chaosmasttter (~chaosmast@p54B7F8CF.dip0.t-ipconnect.de) has quit (Quit: WeeChat 1.3)
2016-01-10 23:24:21	◀	QRX45 (~QRX45@pool-98-113-171-151.nycmny.fios.verizon.net) has quit (Read error: Connection reset by peer)
2016-01-10 23:24:35	◀	umayahabdennabi (~umayahabd@cpe-70-114-217-136.austin.res.rr.com) has quit (Quit: umayahabdennabi)
2016-01-10 23:24:51	◀	xylen_ (~codywelsh@c-73-189-204-160.hsd1.ca.comcast.net) has quit (Ping timeout: 246 seconds)
2016-01-10 23:25:12	◀	manuel_ (~manuel@91.137.32.132) has quit (Quit: manuel_)
2016-01-10 23:25:16	▶	ericshortcut (~ericshort@191.254.158.212) has joined #haskell
2016-01-10 23:25:19	▶	moltalk (~axeld@cable-dynamic-87-245-125-198.shinternet.ch) has joined #haskell
2016-01-10 23:25:19	◀	demilux (~demilux@c-76-28-194-126.hsd1.wa.comcast.net) has quit (Ping timeout: 265 seconds)
2016-01-10 23:25:25	▶	osa1 (~omer@haskell/developer/osa1) has joined #haskell
2016-01-10 23:25:28	▶	montanonic (~nicholas@c-98-246-188-73.hsd1.or.comcast.net) has joined #haskell
2016-01-10 23:26:15	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-10 23:26:20	▶	gehmehgeh (~geh@unaffiliated/gehmehgeh) has joined #haskell
2016-01-10 23:27:10	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-10 23:27:27	◀	jbgi (~jbgi@84-72-168-7.dclient.hispeed.ch) has quit (Quit: jbgi)
2016-01-10 23:27:46	▶	big_wayne (59f4f632@gateway/web/freenode/ip.89.244.246.50) has joined #haskell
2016-01-10 23:27:50	◀	ericshortcut (~ericshort@191.254.158.212) has quit (Client Quit)
2016-01-10 23:28:04	◀	umib0zu (~umib0zu@146-115-43-219.c3-0.abr-ubr1.sbo-abr.ma.cable.rcn.com) has quit (Quit: umib0zu)
2016-01-10 23:28:08	big_wayne	how do i remove the edges up to the root of binary tree?
2016-01-10 23:28:21	◀	dbeacham4 (~dbeacham@83-244-221-232.cust-83.exponential-e.net) has quit (Ping timeout: 246 seconds)
2016-01-10 23:28:30	big_wayne	i need some algorith
2016-01-10 23:28:48	◀	armyriad (~armyriad@71-83-188-91.dhcp.lnbh.ca.charter.com) has quit (Ping timeout: 276 seconds)
2016-01-10 23:28:55	◀	oisdk_ (~oisdk_@95.45.70.25) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-10 23:29:35	◀	hackebeilchen (~Peter@82-136-250-159.ip.telfort.nl) has quit (Read error: Connection reset by peer)
2016-01-10 23:29:35	▶	Uakh_ (~Uakh@122-58-239-201.jetstream.xtra.co.nz) has joined #haskell
2016-01-10 23:29:36	▶	pbgc (~pbgc@bl21-152-17.dsl.telepac.pt) has joined #haskell
2016-01-10 23:29:40	▶	kurt11 (~Adium@99-91-2-47.lightspeed.austtx.sbcglobal.net) has joined #haskell
2016-01-10 23:30:36	ℹ	irc: disconnected from server
2016-01-10 23:39:19	▶	psyq (~Psyq@unaffiliated/psyq) has joined #haskell
2016-01-10 23:39:19	ℹ	Topic for #haskell is "http://www.haskell.org/ | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | http://reddit.com/r/haskell | Administrative issues: #haskell-ops | Hackage status? http://status.haskell.org | http://downloads.haskell.org"
2016-01-10 23:39:19	ℹ	Topic set by quicksilver on Wed, 07 Oct 2015 16:39:51
2016-01-10 23:39:19	ℹ	Channel #haskell: 1537 nicks (1 op, 0 voices, 1536 normals)
2016-01-10 23:39:19	ℹ	URL for #haskell: http://www.haskell.org/
2016-01-10 23:39:21	ℹ	Channel created on Sun, 26 Nov 2006 07:42:48
2016-01-10 23:39:22	▶	homovitruvius (~user@pool-108-17-70-127.pitbpa.fios.verizon.net) has joined #haskell
2016-01-10 23:39:24	◀	t7_ (~chatzilla@5-179-100-38.glidedsl.com) has quit (Client Quit)
2016-01-10 23:39:28	erisco	collapse?
2016-01-10 23:39:41	◀	t7 (~chatzilla@5-179-100-38.glidedsl.com) has quit (Ping timeout: 250 seconds)
2016-01-10 23:40:27	◀	manuel_ (~manuel@91.137.32.132) has quit (Client Quit)
2016-01-10 23:40:39	big_wayne	data BlaTree = Bl2 (Int, BlaTree) (Int, BlaTree)
2016-01-10 23:40:41	erisco	instance (Monoid a) => Monoid (Set a) where mempty = Set.empty; mappend = Set.unionWith mappend
2016-01-10 23:40:43	big_wayne	           | Bl1 (Int, BlaTree)
2016-01-10 23:40:48	big_wayne	           | BlaLeaf deriving Show
2016-01-10 23:41:02	nitrix	erisco: Yes, Monoids require an associative binary operation (with an identity).
2016-01-10 23:41:14	ℹ	irc: disconnected from server
2016-01-10 23:43:55	▶	psyq (~Psyq@unaffiliated/psyq) has joined #haskell
2016-01-10 23:43:55	ℹ	Topic for #haskell is "http://www.haskell.org/ | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | http://reddit.com/r/haskell | Administrative issues: #haskell-ops | Hackage status? http://status.haskell.org | http://downloads.haskell.org"
2016-01-10 23:43:55	ℹ	Topic set by quicksilver on Wed, 07 Oct 2015 16:39:51
2016-01-10 23:43:55	ℹ	Channel #haskell: 1535 nicks (1 op, 0 voices, 1534 normals)
2016-01-10 23:43:55	ℹ	URL for #haskell: http://www.haskell.org/
2016-01-10 23:44:02	nitrix	erisco: That'd break law #1:  x `mappend` mempty = x
2016-01-10 23:44:06	◀	lethjakman (~lethjakma@71.56.221.51) has quit (Ping timeout: 264 seconds)
2016-01-10 23:44:11	▶	vikaton (uid59278@gateway/web/irccloud.com/x-jwsxxrpobvkmbcmr) has joined #haskell
2016-01-10 23:44:14	erisco	why?
2016-01-10 23:44:17	big_wayne	i have to find some edge in a "forest" the delete all edges up to the root
2016-01-10 23:44:18	ℹ	Channel created on Sun, 26 Nov 2006 07:42:48
2016-01-10 23:44:25	aweinstock	erisco: isn't (universe, intersect) also a valid Monoid?
2016-01-10 23:44:25	▶	jedws (~jedws@eth59-167-133-100.static.internode.on.net) has joined #haskell
2016-01-10 23:44:35	erisco	intersect does not have an identity
2016-01-10 23:44:48	erisco	oh, you're saying to use the universe
2016-01-10 23:44:52	erisco	well, we don't know what that is
2016-01-10 23:45:02	big_wayne	also new trees may be created
2016-01-10 23:45:03	aweinstock	universe = set such that contains = const True
2016-01-10 23:45:33	erisco	the Set module does not define a universe, probably because that would be problematic for some other features
2016-01-10 23:45:35	erisco	such as toList
2016-01-10 23:45:37	◀	pytmand (~pytmand@80-71-135-134.u.parknet.dk) has quit (Quit: Lingo: www.lingoirc.com)
2016-01-10 23:45:38	aweinstock	type BlaForest = [BlaTree] -- ?
2016-01-10 23:45:44	big_wayne	yes
2016-01-10 23:46:00	◀	nour (~nour@x55b58682.dyn.telefonica.de) has quit (Ping timeout: 255 seconds)
2016-01-10 23:46:46	aweinstock	what are edges/roots in the forest?
2016-01-10 23:47:09	▶	oisdk_ (~oisdk_@95.45.70.25) has joined #haskell
2016-01-10 23:47:22	big_wayne	edges are identified by the Int or what do you mean?
2016-01-10 23:47:57	◀	afcondon (~afcondon@109.78.248.1) has quit (Remote host closed the connection)
2016-01-10 23:47:58	glguy	erisco: union can't implement mappend because it has the wrong type
2016-01-10 23:48:08	glguy	It has that Ord constraint
2016-01-10 23:48:11	▶	hannelita (~hannelita@2804:14c:a8:27a5:d0e4:f1ab:cfd2:d89e) has joined #haskell
2016-01-10 23:48:15	aweinstock	erisco: newtype MySet a = (a -> Bool); universe = MySet (const True); intersect (MySet f) (MySet g) = MySet (\x -> f x && g x)
2016-01-10 23:48:23	erisco	glguy, ah, I see
2016-01-10 23:48:51	erisco	glguy, instance (Ord a) => Monoid (Set a) where  though?
2016-01-10 23:48:52	◀	sssilver (~sssilver@cpe-70-112-245-224.austin.res.rr.com) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-10 23:48:54	◀	superturrican1 (~superturr@186.61.106.92.dynamic.wline.res.cust.swisscom.ch) has quit (Ping timeout: 264 seconds)
2016-01-10 23:48:57	▶	superturrican2 (~superturr@186.61.106.92.dynamic.wline.res.cust.swisscom.ch) has joined #haskell
2016-01-10 23:49:16	glguy	erisco: oh, yeah :)
2016-01-10 23:49:19	glguy	that instance exists
2016-01-10 23:49:22	erisco	aweinstock, that is a good idea but it'd be a different module
2016-01-10 23:49:27	aweinstock	empty = MySet (const False); union (MySet f) (MySet g) = MySet (\x -> f x || g x); singleton x = MySet (x ==)
2016-01-10 23:49:44	mauke	> S.singleton () <> S.singleton ()
2016-01-10 23:49:46	▶	hilquias (~user@unaffiliated/hilquias) has joined #haskell
2016-01-10 23:49:47	lambdabot	 fromList [()]
2016-01-10 23:49:56	▶	martin-t_ (~martin-t@199.201.64.3) has joined #haskell
2016-01-10 23:50:06	◀	hsk3 (~product--@unaffiliated/product--) has left #haskell
2016-01-10 23:50:07	mauke	> S.singleton 'a' <> S.singleton 'b'
2016-01-10 23:50:10	lambdabot	 fromList "ab"
2016-01-10 23:50:14	▶	hsk3 (~product--@unaffiliated/product--) has joined #haskell
2016-01-10 23:50:52	aweinstock	big_wayne: I was originally thinking that the BlaTree was the tree structure, and Int's are the elements, but it seems that you're now saying that the Int's are representing another graph?
2016-01-10 23:51:20	◀	Geraldus___ (~Geraldus@213.59.130.250) has quit (Quit: Be back later ...)
2016-01-10 23:51:29	hsk3	How can I fix this? https://pastee.org/utup2
2016-01-10 23:51:29	hsk3	Is there away to explicitly give foo a type there?
2016-01-10 23:51:31	erisco	mauke, odd that the docs do not mention the instance
2016-01-10 23:51:33	◀	achernyak (~artem@24-217-172-238.dhcp.stls.mo.charter.com) has quit (Ping timeout: 276 seconds)
2016-01-10 23:51:37	aweinstock	> () <> ()
2016-01-10 23:51:39	lambdabot	 ()
2016-01-10 23:51:51	glguy	erisco: they do
2016-01-10 23:51:55	glguy	http://hackage.haskell.org/package/containers-0.5.7.1/docs/Data-Set.html
2016-01-10 23:52:06	mauke	hsk3: sure. which type do you want?
2016-01-10 23:52:14	erisco	wow derp, I missed it
2016-01-10 23:52:20	aweinstock	hsk3: let foo = f :: () in () --?
2016-01-10 23:52:30	◀	hannelita (~hannelita@2804:14c:a8:27a5:d0e4:f1ab:cfd2:d89e) has quit (Ping timeout: 264 seconds)
2016-01-10 23:52:38	hsk3	mauke, aweinstock: well, a general Eq would be a good start.
2016-01-10 23:52:43	hsk3	does it have to be a concrete type?
2016-01-10 23:52:55	mauke	hsk3: let foo :: Eq a => a; foo = f
2016-01-10 23:53:02	◀	Laserbea_ (~Laserbear@c-73-223-160-142.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2016-01-10 23:53:21	erisco	I nice feature of Data.Set is you can enumerate it, unlike a -> Bool
2016-01-10 23:53:26	hsk3	haha wonderful. thank you sir
2016-01-10 23:53:38	◀	sebhoss (~m0@109.125.117.223.dynamic.cablesurf.de) has quit (Remote host closed the connection)
2016-01-10 23:53:42	big_wayne	the Int is representing the edge, and my task is to find some edge then delete all other edges that lead to the root
2016-01-10 23:53:50	◀	martin-t (~martin-t@c-71-198-25-196.hsd1.ca.comcast.net) has quit (Ping timeout: 260 seconds)
2016-01-10 23:54:02	▶	xylen_ (~codywelsh@c-73-189-204-160.hsd1.ca.comcast.net) has joined #haskell
2016-01-10 23:54:18	◀	ype (~ype@cpc45-slam6-2-0-cust434.2-4.cable.virginm.net) has quit (Quit: goodbye)
2016-01-10 23:54:55	▶	afcondon (~afcondon@109.78.248.1) has joined #haskell
2016-01-10 23:55:02	big_wayne	my func is: Int -> BlaForest -> BlaForest
2016-01-10 23:55:13	▶	amosr (~amos@59.167.64.185) has joined #haskell
2016-01-10 23:55:15	◀	L8D (~L8D@cpe-70-123-155-208.austin.res.rr.com) has quit (Ping timeout: 272 seconds)
2016-01-10 23:55:17	◀	Yuras (~Yuras@93.85.182.25) has quit (Ping timeout: 250 seconds)
2016-01-10 23:56:03	◀	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Remote host closed the connection)
2016-01-10 23:56:52	▶	choosetwo (~jmeyer@50-93-252-202.fttp.usinternet.com) has joined #haskell
2016-01-10 23:56:56	▶	manuel_ (~manuel@91.137.32.132) has joined #haskell
2016-01-10 23:57:00	▶	griotspeak (~textual@c-73-237-161-156.hsd1.ga.comcast.net) has joined #haskell
2016-01-10 23:57:02	▶	luismilanoolivei (~luismilan@189.115.15.217) has joined #haskell
2016-01-10 23:57:02	◀	jdt (~user@208.85.233.130) has quit (Read error: Connection reset by peer)
2016-01-10 23:57:35	◀	umib0zu (~umib0zu@146-115-43-219.c3-0.abr-ubr1.sbo-abr.ma.cable.rcn.com) has quit (Quit: umib0zu)
2016-01-10 23:57:43	◀	manuel_ (~manuel@91.137.32.132) has quit (Client Quit)
2016-01-10 23:57:53	▶	emilypi (~emilypi@2604:2000:8006:ef00:4df9:5340:9a12:3518) has joined #haskell
2016-01-10 23:58:02	◀	erikd (~erikd@103.229.16.4) has quit (Ping timeout: 240 seconds)
2016-01-10 23:58:24	▶	pimlu (~pimlu@pool-173-53-75-246.rcmdva.fios.verizon.net) has joined #haskell
2016-01-10 23:58:24	▶	ype (~ype@cpc45-slam6-2-0-cust434.2-4.cable.virginm.net) has joined #haskell
2016-01-10 23:59:04	◀	hsk3 (~product--@unaffiliated/product--) has quit (Quit: hsk3)
2016-01-10 23:59:18	◀	jumblerg (~jumblerg@204.9.220.50) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-11 00:00:25	▶	pacak (~pacak@175.156.145.194) has joined #haskell
2016-01-11 00:00:40	▶	Laserbear (~Laserbear@c-73-223-160-142.hsd1.ca.comcast.net) has joined #haskell
2016-01-11 00:00:48	▶	haskell445 (b0172f6d@gateway/web/freenode/ip.176.23.47.109) has joined #haskell
2016-01-11 00:02:55	◀	luismilanoolivei (~luismilan@189.115.15.217) has quit (Ping timeout: 260 seconds)
2016-01-11 00:02:55	◀	haskell445 (b0172f6d@gateway/web/freenode/ip.176.23.47.109) has left #haskell
2016-01-11 00:02:55	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-11 00:02:55	◀	adek (~adek@199.201.64.3) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-11 00:02:56	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-11 00:05:03	▶	Swizec (~swizec@c-67-164-98-169.hsd1.ca.comcast.net) has joined #haskell
2016-01-11 00:05:16	◀	pantsman_ (~pantsman@cpc85034-haye22-2-0-cust50.17-4.cable.virginm.net) has quit (Ping timeout: 250 seconds)
2016-01-11 00:05:42	◀	watabou (~watabou@unaffiliated/watabou) has quit (Quit: Soupy Twist!)
2016-01-11 00:06:12	◀	xylen_ (~codywelsh@c-73-189-204-160.hsd1.ca.comcast.net) has quit (Quit: xylen_)
2016-01-11 00:10:23	▶	watabou (~watabou@unaffiliated/watabou) has joined #haskell
2016-01-11 00:10:23	◀	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has quit (Remote host closed the connection)
2016-01-11 00:10:23	◀	Wes[SA-PHI] (~textual@74.197.67.119) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-11 00:10:23	◀	Stratege (~Stratege@unaffiliated/stratege) has quit (Ping timeout: 246 seconds)
2016-01-11 00:10:58	⚡	hackagebot protocol-buffers 2.2.0 - Parse Google Protocol Buffer specifications  https://hackage.haskell.org/package/protocol-buffers-2.2.0 (k_bx)
2016-01-11 00:11:00	⚡	hackagebot protocol-buffers-descriptor 2.2.0 - Text.DescriptorProto.Options and code generated from the Google Protocol Buffer specification  https://hackage.haskell.org/package/protocol-buffers-descriptor-2.2.0 (k_bx)
2016-01-11 00:11:02	⚡	hackagebot hprotoc 2.2.0 - Parse Google Protocol Buffer specifications  https://hackage.haskell.org/package/hprotoc-2.2.0 (k_bx)
2016-01-11 00:11:31	▶	erikd (~erikd@103.229.16.4) has joined #haskell
2016-01-11 00:11:43	◀	JamesJRH (~james@208.113.231.249) has quit (Ping timeout: 272 seconds)
2016-01-11 00:12:33	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-11 00:12:59	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-11 00:13:48	▶	neoncontrails (~neoncontr@wsip-174-79-243-9.sd.sd.cox.net) has joined #haskell
2016-01-11 00:13:59	▶	PaulN (~PaulN@2601:87:100:222c:b828:4674:2116:a3a8) has joined #haskell
2016-01-11 00:14:02	▶	orb (~orb@2001:44b8:319b:8a00:406d:b1f6:7f16:39b3) has joined #haskell
2016-01-11 00:14:04	▶	Netwolf (lrizzo@00u.org) has joined #haskell
2016-01-11 00:14:38	◀	Jeanne-Kamikaze (~Jeanne-Ka@215.Red-83-60-243.dynamicIP.rima-tde.net) has quit (Quit: Leaving)
2016-01-11 00:15:17	◀	moltalk (~axeld@cable-dynamic-87-245-125-198.shinternet.ch) has quit (Quit: Leaving.)
2016-01-11 00:15:18	◀	vili (~nick@cpe-76-189-107-110.neo.res.rr.com) has quit (Remote host closed the connection)
2016-01-11 00:16:18	◀	Xzip (~Xzip@81-230-143-111-no169.tbcn.telia.com) has quit (Ping timeout: 246 seconds)
2016-01-11 00:16:36	▶	MitchellSalad (uid40617@gateway/web/irccloud.com/x-ggisjpuvznqmjbrt) has joined #haskell
2016-01-11 00:17:19	◀	big_wayne (59f4f632@gateway/web/freenode/ip.89.244.246.50) has quit (Quit: Page closed)
2016-01-11 00:17:28	MitchellSalad	hi all, poking aroung GHC.TypeLits I see an unexported function natSing that's part of the KnownNat typeclass. It has type KnownNat n => SNat n, and I sort of need this function. Is there any reason it's hidden, or is there some way to emulate it with the rest of the API? (I'm not seeing it)
2016-01-11 00:17:48	▶	broma0 (~broma0@ool-182e23f2.dyn.optonline.net) has joined #haskell
2016-01-11 00:18:00	◀	PaulN (~PaulN@2601:87:100:222c:b828:4674:2116:a3a8) has quit (Read error: Connection reset by peer)
2016-01-11 00:18:29	▶	PaulN (~PaulN@2601:87:100:222c:b828:4674:2116:a3a8) has joined #haskell
2016-01-11 00:18:48	▶	cir0x (~Adium@dslb-088-076-084-066.088.076.pools.vodafone-ip.de) has joined #haskell
2016-01-11 00:18:51	◀	aaronlevin (~aaronlevi@37.120.29.140) has quit (Ping timeout: 255 seconds)
2016-01-11 00:19:20	MitchellSalad	hm, looking at the source, SNat isn't even a singleton, it's a newtype
2016-01-11 00:19:22	◀	doomlord (~textual@host86-153-157-188.range86-153.btcentralplus.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-11 00:19:43	athan	Is there a reason why there isn't a safe version of `(!!) :: [a] -> Int -> a` in the `safe` package?
2016-01-11 00:20:48	athan	MitchellSalad: Are you sure the `makeSingletons''` TemplateHaskell stuff isn't being used on it?
2016-01-11 00:21:02	athan	Also, why exactly do you need this function, if you can spill the beans? :)
2016-01-11 00:21:22	bergmark	athan: there is: atNote
2016-01-11 00:21:24	▶	codafi (~textual@128.237.180.34) has joined #haskell
2016-01-11 00:21:28	MitchellSalad	GHC.TypeLits is in base, so I don't think it depends on singletons
2016-01-11 00:21:35	athan	agh sorry bergmark!
2016-01-11 00:21:35	parsnip	hi, have some errors regarding cabal_macros.hs when trying to `stack ghci` in hakyll/
2016-01-11 00:21:57	athan	MitchellSalad: oop, wait so what do you mean by a "singleton" in your first remark, then?
2016-01-11 00:22:36	▶	abhixec (~archmonk@c-50-174-16-226.hsd1.ca.comcast.net) has joined #haskell
2016-01-11 00:22:53	▶	adamCS (~textual@cpe-74-71-211-64.nyc.res.rr.com) has joined #haskell
2016-01-11 00:22:58	▶	jmcarthur (~jmcarthur@pool-72-89-137-39.nycmny.fios.verizon.net) has joined #haskell
2016-01-11 00:23:05	MitchellSalad	athan: I meant what you thought I meant; a singleton-like type. I just don't think the SNat newtype in GHC.TypeLits is being made into a singleton with TH
2016-01-11 00:23:08	parsnip	http://lpaste.net/148781
2016-01-11 00:23:14	parsnip	http://lpaste.net/148782
2016-01-11 00:23:26	◀	abhixec (~archmonk@c-50-174-16-226.hsd1.ca.comcast.net) has quit (Client Quit)
2016-01-11 00:23:33	◀	orb (~orb@2001:44b8:319b:8a00:406d:b1f6:7f16:39b3) has quit (Ping timeout: 272 seconds)
2016-01-11 00:24:06	MitchellSalad	athan: sure I can spill the beans, I'm writing the boilerplate Storable instance for a length-indexed vector
2016-01-11 00:24:21	MitchellSalad	and I've resorted to using unsafeCoerce
2016-01-11 00:24:40	▶	bamboo (~bamboo@191.255.62.131) has joined #haskell
2016-01-11 00:24:42	◀	firstdayonthejob (~firstdayo@cpc91184-cmbg18-2-0-cust232.5-4.cable.virginm.net) has quit (Ping timeout: 255 seconds)
2016-01-11 00:24:47	MitchellSalad	seems like it should be possible with type level fanciness, but I may be using the wrong kind
2016-01-11 00:24:51	▶	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined #haskell
2016-01-11 00:25:00	athan	MitchellSalad: It's been a while since I've messed with the idea. So SNat is used for demotion, then?
2016-01-11 00:25:08	MitchellSalad	specifically, the vector is indexed on GHC.TypeLits.Nat, as opposed to the usual promoted "data Nat = Z | S Nat"
2016-01-11 00:25:15	▶	caecilius (~caecilius@bdv75-9-88-165-92-126.fbx.proxad.net) has joined #haskell
2016-01-11 00:25:16	athan	for something like `SNap (Succ (Succ Nil))` or something?
2016-01-11 00:26:00	MitchellSalad	oh, the singleton? that would be a GADT defined like: data SNat (n :: Nat) where SZ :: SNat 0; SS :: SNat n -> SNat (n+1)
2016-01-11 00:26:42	athan	MitchellSalad: Ahh okay, got it. Wait so why do you need to use the function, though?
2016-01-11 00:26:58	athan	natSing I mean
2016-01-11 00:27:29	MitchellSalad	ah, if you try to write the 'peek' function, you run into trouble... peek :: (KnownNat n, Storable a) => Ptr (Vec n a) -> IO (Vec n a)
2016-01-11 00:27:57	◀	dtulig (~dtulig@linode.tuligconsulting.com) has quit (Ping timeout: 276 seconds)
2016-01-11 00:28:02	MitchellSalad	I can't prove to the compiler that e.g. n ~ 0 when I compare natSing (Proxy :: Proxy n) to 0, for example
2016-01-11 00:28:18	◀	afcondon (~afcondon@109.78.248.1) has quit (Remote host closed the connection)
2016-01-11 00:28:19	MitchellSalad	the value level comparison doesn't propagate to the types, that's what singletons can help encode :)
2016-01-11 00:28:23	▶	orb (~orb@2001:44b8:319b:8a00:35e3:ab3a:a32e:69b9) has joined #haskell
2016-01-11 00:28:27	athan	ooh okay you're in the thicket then
2016-01-11 00:28:33	▶	crobbins (~crobbins@mobile-166-172-122-026.mycingular.net) has joined #haskell
2016-01-11 00:28:42	MitchellSalad	sorry, that natSing above should be natVal
2016-01-11 00:28:43	athan	singletons in my experience can't give that type inference, still
2016-01-11 00:29:00	MitchellSalad	right, I don't need to rely on type inference
2016-01-11 00:29:11	athan	well, it actually still is
2016-01-11 00:29:40	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-11 00:29:55	athan	MitchellSalad: So you're trying to unify `n ~ 0`, based solely on the term `natSing (Proxy :: Proxy n)`?
2016-01-11 00:30:07	athan	Do you get something like `cannot deduce n ~ n1` or something?
2016-01-11 00:30:11	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-11 00:30:13	MitchellSalad	that would work, yes, except natSing doesn't exist!
2016-01-11 00:30:23	⚡	athan should append "or something" to his signature in emails
2016-01-11 00:30:27	MitchellSalad	it's in the KnownNat typeclass but it's not exported
2016-01-11 00:31:10	◀	spuz (~spuzz@host-78-149-118-44.as13285.net) has quit (Ping timeout: 260 seconds)
2016-01-11 00:31:11	MitchellSalad	if you meant natVal above, then yes, that's the type error you'd get
2016-01-11 00:31:13	athan	MitchellSalad: I'm not sure if anyone working on the singletons package / concepts are online right now, but you should try cloning your own local version and exposing it, just for kicks
2016-01-11 00:31:23	athan	I've found them to be pretty responsive on Stack Overflow, though
2016-01-11 00:31:33	athan	MitchellSalad: Ahh, then yes
2016-01-11 00:31:46	athan	for ambiguous types, it's best to constrain from the type-level down, if that makes sense
2016-01-11 00:31:54	MitchellSalad	ah, this is not really a deficiency of singletons, it's more like I need singletons and it doesn't appear that GHC.TypeLits has any singletons in its API
2016-01-11 00:31:57	◀	crobbins (~crobbins@mobile-166-172-122-026.mycingular.net) has quit (Client Quit)
2016-01-11 00:32:07	◀	homovitruvius (~user@pool-108-17-70-127.pitbpa.fios.verizon.net) has quit (Ping timeout: 260 seconds)
2016-01-11 00:32:09	athan	allowing deduction to be explicit from the type information, not necessarilly forgotten and attempted to be coerced from the value
2016-01-11 00:32:13	▶	dtulig (~dtulig@linode.tuligconsulting.com) has joined #haskell
2016-01-11 00:32:16	▶	crobbins (~crobbins@mobile-166-172-122-026.mycingular.net) has joined #haskell
2016-01-11 00:32:21	◀	amosr (~amos@59.167.64.185) has quit (Ping timeout: 255 seconds)
2016-01-11 00:32:28	athan	oh
2016-01-11 00:32:33	◀	raichoo (~raichoo@mue-88-130-57-172.dsl.tropolys.de) has quit (Ping timeout: 240 seconds)
2016-01-11 00:32:35	athan	then import Singletons haha
2016-01-11 00:32:49	hunteriam	how do I convert a Data.Time.Clock UTCTime to GMT?
2016-01-11 00:33:11	mpickering	hunteriam: what have you tried? 
2016-01-11 00:33:14	▶	jaarod (~bc813fe2@static-71-174-73-11.bstnma.fios.verizon.net) has joined #haskell
2016-01-11 00:33:14	▶	orb_ (~orb@216.239.45.130) has joined #haskell
2016-01-11 00:33:20	hunteriam	nothing
2016-01-11 00:33:20	MitchellSalad	heh, that wouldn't work; as I said the vector is not indexed on a promoted "data Nat = S Nat | Z" but rather GHC.TypeLits.Nat
2016-01-11 00:33:24	◀	micmus (~micmus@088156129087.dynamic-ww-1.vectranet.pl) has quit (Quit: Leaving)
2016-01-11 00:33:27	◀	crobbins (~crobbins@mobile-166-172-122-026.mycingular.net) has quit (Client Quit)
2016-01-11 00:34:16	▶	jumblerg (~jumblerg@209-6-47-216.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2016-01-11 00:35:15	athan	hunteriam: Well, `Maybe a ~/~ UTCTime`, so I don't know what you're trying to get at :P
2016-01-11 00:35:17	hpc	"i've tried nothing and i'm all out of ideas!"
2016-01-11 00:35:28	hunteriam	athan: what?
2016-01-11 00:35:35	◀	orb (~orb@2001:44b8:319b:8a00:35e3:ab3a:a32e:69b9) has quit (Ping timeout: 272 seconds)
2016-01-11 00:35:35	shirt	where is the cheat-sheet for haddock markup?
2016-01-11 00:35:36	mpickering	MitchellSalad: I second what athan said about stack overflow
2016-01-11 00:35:37	hunteriam	hpc: this isnt really something im trying to implement on my own
2016-01-11 00:35:43	hunteriam	im looking for a function
2016-01-11 00:35:50	hunteriam	what am i supposed to try?
2016-01-11 00:35:53	athan	MitchellSalad: Singletons does some stuff with typelits iirc
2016-01-11 00:36:02	hunteriam	i have tried hoogling
2016-01-11 00:36:04	hunteriam	and googling
2016-01-11 00:36:09	athan	shirt: Their docs page :P it's just a really long cheat sheet I guess
2016-01-11 00:36:09	hunteriam	now are you happy hpc, mpickering 
2016-01-11 00:36:09	mpickering	There are some people who are very good with this stuff
2016-01-11 00:36:15	▶	doomlord (~textual@host86-153-157-188.range86-153.btcentralplus.com) has joined #haskell
2016-01-11 00:36:23	mpickering	I was trying to help! 
2016-01-11 00:36:29	◀	superturrican2 (~superturr@186.61.106.92.dynamic.wline.res.cust.swisscom.ch) has quit (Quit: 1.3)
2016-01-11 00:36:30	▶	ziocroc (~ziocroc@151.74.99.167) has joined #haskell
2016-01-11 00:36:36	▶	Stratege (~Stratege@unaffiliated/stratege) has joined #haskell
2016-01-11 00:36:37	▶	umib0zu (~umib0zu@146-115-43-219.c3-0.abr-ubr1.sbo-abr.ma.cable.rcn.com) has joined #haskell
2016-01-11 00:36:49	◀	twanvl (~twanvl@dhcp-077-250-086-217.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-11 00:36:51	athan	hunteriam: Have you looked in the `time` package?
2016-01-11 00:36:56	athan	@hackage time
2016-01-11 00:36:57	lambdabot	http://hackage.haskell.org/package/time
2016-01-11 00:37:01	hunteriam	i have
2016-01-11 00:37:01	athan	time to get hacking!
2016-01-11 00:37:12	hunteriam	the solution was a package time-http
2016-01-11 00:37:30	▶	aaronlevin (~aaronlevi@37.120.29.140) has joined #haskell
2016-01-11 00:37:33	◀	codafi (~textual@128.237.180.34) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-11 00:38:19	◀	AfC (~andrew@120.19.185.100) has quit (Quit: Leaving.)
2016-01-11 00:38:29	mpickering	What about the function utcToLocalTimeOfDay
2016-01-11 00:38:33	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-11 00:38:55	hunteriam	theres no GMT localtime defined
2016-01-11 00:39:02	◀	pimlu (~pimlu@pool-173-53-75-246.rcmdva.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2016-01-11 00:39:03	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-11 00:39:29	◀	adam__ (~adam@static-50-53-43-165.bvtn.or.frontiernet.net) has quit (Remote host closed the connection)
2016-01-11 00:39:55	mpickering	I think you can make a TimeZone for gmt
2016-01-11 00:40:12	athan	hunteriam: iirc there's no real difference between UTCTime and GMT time
2016-01-11 00:40:15	▶	nerfando (~textual@177.220.182.50) has joined #haskell
2016-01-11 00:40:27	hunteriam	mpickering: its non trivial
2016-01-11 00:40:40	MitchellSalad	mpickering: good call, there's a Data.Singletons.TypeLits, this is what i needed :D
2016-01-11 00:40:45	athan	historically there's a lag or some kind of aliasing between the two, but nothing massive
2016-01-11 00:40:52	hunteriam	athan: that is correct
2016-01-11 00:40:56	hunteriam	athan: thanks!
2016-01-11 00:41:11	▶	FreeFull (~freefull@defocus/sausage-lover) has joined #haskell
2016-01-11 00:41:13	athan	hunteriam: I would take the specs and build your own converter :\ most of Hackage seems to only support UTC / UT1
2016-01-11 00:41:17	▶	hannelita (~hannelita@2804:14c:a8:27a5:4db7:95d9:2720:4044) has joined #haskell
2016-01-11 00:41:33	athan	np hunteriam :) good luck!
2016-01-11 00:41:35	mpickering	What is the non-trivial part? It seems to be quite easy looking at the docs
2016-01-11 00:41:39	hunteriam	athan: Data.Time.Format
2016-01-11 00:41:48	◀	Jackneill (~Jackneill@gateway/vpn/privateinternetaccess/jackneill) has quit (Remote host closed the connection)
2016-01-11 00:41:55	mpickering	Isn't that a bad idea because of daylight savings? 
2016-01-11 00:42:05	▶	xylen_ (~codywelsh@c-73-189-204-160.hsd1.ca.comcast.net) has joined #haskell
2016-01-11 00:42:11	◀	wowdog (~wowdog@184.69.147.190) has quit (Remote host closed the connection)
2016-01-11 00:42:20	mpickering	I am looking at Data.Time.LocalTime btw
2016-01-11 00:42:26	hunteriam	mpickering: ah true
2016-01-11 00:42:33	◀	seapatrol (~seapatrol@5-198-101-215.static.kc.net.uk) has quit (Ping timeout: 246 seconds)
2016-01-11 00:42:51	▶	wowdog (~wowdog@184.69.147.190) has joined #haskell
2016-01-11 00:42:59	liyang	Oh dear. That old chestnut again.
2016-01-11 00:42:59	▶	strburst (~allen@r4-128-61-88-50.res.gatech.edu) has joined #haskell
2016-01-11 00:43:32	◀	Icewing (~Icewing@unaffiliated/icewing) has quit (Quit: Lost terminal)
2016-01-11 00:43:59	▶	amosr (~amos@59.167.64.185) has joined #haskell
2016-01-11 00:44:04	◀	nerfando (~textual@177.220.182.50) has quit (Client Quit)
2016-01-11 00:44:11	liyang	hunteriam: do you want actual GMT (FWIW the term is discouraged for technical use; in UK colloquial usage it means not-summer-time) or British (including summer) time?
2016-01-11 00:44:32	hunteriam	liyang: trying to comply with https://en.wikipedia.org/wiki/HTTP_cookie#Expires_and_Max-Age
2016-01-11 00:44:32	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Remote host closed the connection)
2016-01-11 00:45:20	hpc	i googled "utc vs gmt" and got this: https://dl.dropboxusercontent.com/u/37707/Untitled.png
2016-01-11 00:45:25	liyang	hunteriam: I think for that you can treat GMT as synonymous with UTC.
2016-01-11 00:45:50	◀	erkin (~erkin@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2016-01-11 00:46:03	dgpratt	alright, I am nigh unto giving up on this self-inflicted exercise, so I may as well ask for help :)
2016-01-11 00:46:51	dgpratt	a bit of a mess, but I can seem to get no further, at least without a clue http://lpaste.net/3142081242053214208
2016-01-11 00:47:12	◀	wowdog (~wowdog@184.69.147.190) has quit (Ping timeout: 255 seconds)
2016-01-11 00:47:16	▶	homovitruvius (~user@pool-108-17-70-127.pitbpa.fios.verizon.net) has joined #haskell
2016-01-11 00:47:24	shirt	athan: thanks
2016-01-11 00:48:47	dgpratt	so...any hints as to how I might turn a "a :: f (Free f (a -> b))" and a "x :: f (Free f a)" into a "Free f b" ?
2016-01-11 00:49:12	Cale	dgpratt: Well, it's got to be recursive, right?
2016-01-11 00:49:24	◀	asjo (~asjo@2.110.51.43) has quit (Ping timeout: 276 seconds)
2016-01-11 00:49:30	dgpratt	I suppose that makes sense, Cale
2016-01-11 00:49:46	mpickering	and fmap
2016-01-11 00:49:59	dgpratt	and I suppose that means I'd be referring to a base case somewhere
2016-01-11 00:50:30	dgpratt	or a...I don't know...recursive case
2016-01-11 00:50:38	▶	Wes[SA-PHI] (~textual@74.197.67.119) has joined #haskell
2016-01-11 00:50:40	dgpratt	terminology fail
2016-01-11 00:50:46	▶	chrisramsey (~chrisrams@2602:306:3762:700:286d:27f4:4635:8255) has joined #haskell
2016-01-11 00:50:54	hpc	dgpratt: solve f (Free f b) and then solve getting out of f
2016-01-11 00:51:09	◀	Laserbear (~Laserbear@c-73-223-160-142.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2016-01-11 00:51:19	dgpratt	hpc, heh -- I'm pretty sure I had that at one point :/
2016-01-11 00:51:22	liyang	athan: most of Hackage don't mention ‘GMT’ because it has a wibbly-wobbly definition…
2016-01-11 00:51:27	dgpratt	lemme see if I can conjure it again
2016-01-11 00:51:32	chrisdotcode	@src foldr
2016-01-11 00:51:32	lambdabot	foldr f z []     = z
2016-01-11 00:51:32	lambdabot	foldr f z (x:xs) = f x (foldr f z xs)
2016-01-11 00:52:22	Cale	Actually, it might be easiest to rethink the other Free case -- it actually turns out to be possible to handle the  Free fa <*> x  all at once with a single definition.
2016-01-11 00:52:39	hpc	dgpratt: btw, Free is Applicative
2016-01-11 00:52:41	▶	Laserbear (~Laserbear@c-73-223-160-142.hsd1.ca.comcast.net) has joined #haskell
2016-01-11 00:52:48	Cale	Er, I should use your terms, Wrap fa <*> x
2016-01-11 00:52:55	◀	rodlogic_ (~rodlogic@179.159.96.218) has quit (Remote host closed the connection)
2016-01-11 00:53:05	▶	asjo (~asjo@virgil.koldfront.dk) has joined #haskell
2016-01-11 00:53:07	dgpratt	Cale, I wondered that
2016-01-11 00:53:28	Cale	So what do we have here?
2016-01-11 00:53:53	hpc	:t Free
2016-01-11 00:53:55	lambdabot	Not in scope: data constructor ‘Free’
2016-01-11 00:53:55	▶	vikingofrock (43b48797@gateway/web/freenode/ip.67.180.135.151) has joined #haskell
2016-01-11 00:54:11	Cale	Wrap a <*> x = ...
2016-01-11 00:54:12	▶	piezoid (~piezoid@tsv35-1-78-232-144-90.fbx.proxad.net) has joined #haskell
2016-01-11 00:54:18	▶	manuel_ (~manuel@pD9FDC584.dip0.t-ipconnect.de) has joined #haskell
2016-01-11 00:54:31	Cale	here we have  a :: f (Free f (a -> b))
2016-01-11 00:54:44	▶	cheetah2 (~cheetah2@172.242.102.144) has joined #haskell
2016-01-11 00:54:51	hunteriam	a -> b -> (a,b)?
2016-01-11 00:54:51	Cale	and we have  x :: Free f a
2016-01-11 00:55:02	vikingofrock	So you know how in haskell, whenever you call a non-IO function with the same inputs you get the same output? What's that feature called?
2016-01-11 00:55:03	◀	neoncontrails (~neoncontr@wsip-174-79-243-9.sd.sd.cox.net) has quit
2016-01-11 00:55:12	MitchellSalad	referential transparity
2016-01-11 00:55:15	hunteriam	vikingofrock: referential transparency
2016-01-11 00:55:16	vikingofrock	thank you
2016-01-11 00:55:18	hpc	you might be able to do \a x -> Free (a <*> x)
2016-01-11 00:55:20	MitchellSalad	-ency, yeah. lol
2016-01-11 00:55:22	vikingofrock	I couldn't remember that for the life of me
2016-01-11 00:55:27	◀	chrisramsey (~chrisrams@2602:306:3762:700:286d:27f4:4635:8255) has quit (Ping timeout: 260 seconds)
2016-01-11 00:55:31	Cale	vikingofrock: In fact, if you apply *any* function to the same inputs, you get the same result
2016-01-11 00:55:37	◀	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has quit (Read error: Connection reset by peer)
2016-01-11 00:55:45	hunteriam	IO is just weird
2016-01-11 00:55:48	Cale	vikingofrock: It's just that functions which produce IO actions will always produce the same IO action
2016-01-11 00:55:51	◀	poopiefacetomato (~rikonor@ool-457b460f.dyn.optonline.net) has quit (Remote host closed the connection)
2016-01-11 00:56:02	▶	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined #haskell
2016-01-11 00:56:04	Cale	and you have to execute the IO action to get *its* result, which is a separate process from evaluation
2016-01-11 00:56:10	hunteriam	^^
2016-01-11 00:56:20	◀	oisdk_ (~oisdk_@95.45.70.25) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-11 00:56:21	Cale	But the evaluation of which IO action you have is still deterministic
2016-01-11 00:56:28	◀	NeverDie (~NeverDie@pool-98-113-171-151.nycmny.fios.verizon.net) has quit (Quit: http://radiux.io/)
2016-01-11 00:56:37	hpc	dgpratt: try \a x -> Free (a <*> x) -- i don't have free installed at the moment
2016-01-11 00:56:49	liyang	Listen to Cale people. The distinction is important to get your head around IO. :)
2016-01-11 00:56:49	◀	omilu (omilu@iceland.sdf.org) has quit (Remote host closed the connection)
2016-01-11 00:57:50	vikingofrock	So what you're saying is that `readFile "input.txt"` always will open "input.txt
2016-01-11 00:57:51	◀	homovitruvius (~user@pool-108-17-70-127.pitbpa.fios.verizon.net) has quit (Ping timeout: 276 seconds)
2016-01-11 00:57:52	vikingofrock	"
2016-01-11 00:58:00	Cale	heh, yes
2016-01-11 00:58:00	◀	aaronlevin (~aaronlevi@37.120.29.140) has quit (Ping timeout: 255 seconds)
2016-01-11 00:58:19	▶	RyanGlScott (~chatzilla@50-195-179-145-static.hfc.comcastbusiness.net) has joined #haskell
2016-01-11 00:58:29	vikingofrock	but that the result of that is different depending on the contents of "input.txt"?
2016-01-11 00:58:36	◀	nkhodyunya (~Adium@171.33.253.32) has left #haskell
2016-01-11 00:58:42	Cale	When we evaluate readFile "input.txt", we always get the same description of an action which could be carried out to produce a String
2016-01-11 00:58:51	Cale	But we don't actually read the file
2016-01-11 00:59:13	Cale	It's only executing the resulting action which reads the contents of the file
2016-01-11 00:59:21	◀	PlasmaStar (Plasma@unaffiliated/plasmastar) has quit (Ping timeout: 255 seconds)
2016-01-11 00:59:29	vikingofrock	hmmm okay I think I understand
2016-01-11 00:59:29	▶	pauliprice (~paulipric@ool-4350ace2.dyn.optonline.net) has joined #haskell
2016-01-11 00:59:33	Cale	The difference between a value of type IO String and a value of type String is the difference between /bin/ls and a list of files
2016-01-11 01:00:05	Cale	You can open up /bin/ls in a hex editor, and it won't cause the contents of your home directory to be printed to the terminal
2016-01-11 01:00:08	▶	demilux (~demilux@c-76-28-194-126.hsd1.wa.comcast.net) has joined #haskell
2016-01-11 01:00:13	vikingofrock	that's a really elegant way to think about that
2016-01-11 01:00:14	vikingofrock	wow
2016-01-11 01:00:16	Cale	You have to actually execute the program to have that effect happen
2016-01-11 01:00:19	hunteriam	evaluate the action vs. describe it
2016-01-11 01:00:42	◀	centrinia (~centrinia@2602:306:bd0d:a690:ad02:a077:6a63:3b96) has quit (Ping timeout: 240 seconds)
2016-01-11 01:00:42	hpc	or if you know C, it's the difference between printf and &printf
2016-01-11 01:00:50	Cale	uhhhh
2016-01-11 01:00:50	◀	umib0zu (~umib0zu@146-115-43-219.c3-0.abr-ubr1.sbo-abr.ma.cable.rcn.com) has quit (Quit: umib0zu)
2016-01-11 01:00:59	▶	kazagistar (~Adium@host-98-127-133-183.gdj-co.client.bresnan.net) has joined #haskell
2016-01-11 01:01:05	hpc	er, printf() and &printf
2016-01-11 01:01:07	Cale	I don't know if I like that last analogy, but kinda :)
2016-01-11 01:01:07	◀	hive-mind (pranq@mail.bbis.us) has quit (Ping timeout: 272 seconds)
2016-01-11 01:01:09	◀	broma0 (~broma0@ool-182e23f2.dyn.optonline.net) has quit (Quit: WeeChat 1.3)
2016-01-11 01:01:24	hpc	yeah fair point
2016-01-11 01:01:58	Cale	But yeah, the code in memory for printf vs. the result when you actually run printf
2016-01-11 01:02:02	Cale	sure
2016-01-11 01:02:04	▶	mizu_no_oto (~textual@c-73-219-2-228.hsd1.ma.comcast.net) has joined #haskell
2016-01-11 01:02:30	Cale	dgpratt: Okay, let's get back to this
2016-01-11 01:02:34	▶	neoncontrails (~neoncontr@wsip-174-79-243-9.sd.sd.cox.net) has joined #haskell
2016-01-11 01:02:38	Cale	dgpratt: What are we trying to produce?
2016-01-11 01:02:48	Cale	We want to produce a value of type Free f b
2016-01-11 01:03:05	dgpratt	uhh... :: Free f b
2016-01-11 01:03:07	Cale	Can we do it using Return?
2016-01-11 01:03:10	▶	nerfando (~textual@177.220.182.50) has joined #haskell
2016-01-11 01:03:11	Cale	probably not, right?
2016-01-11 01:03:16	◀	nerfando (~textual@177.220.182.50) has quit (Client Quit)
2016-01-11 01:03:18	Cale	We don't have a value of type b hanging around
2016-01-11 01:03:22	Cale	and it looks hard to get one
2016-01-11 01:03:27	dgpratt	right
2016-01-11 01:03:29	Cale	So, let's try Wrap
2016-01-11 01:03:40	Cale	Wrap a <*> x = Wrap ...
2016-01-11 01:03:50	Cale	so now what are we trying to produce?
2016-01-11 01:03:51	◀	danvet (~daniel@2a02:168:56c9:0:22cf:30ff:fe4c:37d6) has quit (Ping timeout: 255 seconds)
2016-01-11 01:03:57	Cale	f (Free f b), yeah?
2016-01-11 01:04:10	Cale	and we have, for reference
2016-01-11 01:04:10	dgpratt	GHC agrees, Cale
2016-01-11 01:04:21	hpc	wait, is this Free a different version from the one in the 'free' package?
2016-01-11 01:04:22	Cale	a :: f (Free f (a -> b))
2016-01-11 01:04:23	dgpratt	:: Free f (a -> b)
2016-01-11 01:04:29	◀	nilg (~user@77.70.2.229) has quit (Remote host closed the connection)
2016-01-11 01:04:35	▶	janmuffino (~janmuffin@port-92-192-54-138.dynamic.qsc.de) has joined #haskell
2016-01-11 01:04:38	dgpratt	hold on a sec...
2016-01-11 01:04:38	◀	janmuffino (~janmuffin@port-92-192-54-138.dynamic.qsc.de) has quit (Max SendQ exceeded)
2016-01-11 01:04:50	▶	timwilkens (~timwilken@cpe-76-88-64-94.san.res.rr.com) has joined #haskell
2016-01-11 01:04:51	Cale	a is the contents of the Wrap constructor
2016-01-11 01:05:00	▶	shangxiao (~shangxiao@103.224.86.17) has joined #haskell
2016-01-11 01:05:05	Cale	hpc: It's straightforwardly isomorphic, the names are a little different
2016-01-11 01:05:18	dgpratt	ok, I tried to merge the last two cases, so I just did "x <*> (Return y)"
2016-01-11 01:05:35	▶	fjdhntptgz (~gkleen@p508B623E.dip0.t-ipconnect.de) has joined #haskell
2016-01-11 01:05:35	dgpratt	oh, I confused myself
2016-01-11 01:05:38	dgpratt	hold on...
2016-01-11 01:05:42	Cale	okay :)
2016-01-11 01:05:49	dgpratt	(merged the wrong thing)
2016-01-11 01:05:50	Cale	Your Return case is fine
2016-01-11 01:05:59	Cale	(for the first argument)
2016-01-11 01:05:59	◀	orb_ (~orb@216.239.45.130) has quit (Ping timeout: 272 seconds)
2016-01-11 01:06:09	◀	frerich (~frerich@kde/raabe) has quit (Remote host closed the connection)
2016-01-11 01:06:09	Cale	er, is it?
2016-01-11 01:06:17	Cale	yeah, it looks okay
2016-01-11 01:06:19	dgpratt	it type checks!
2016-01-11 01:06:21	dgpratt	:)
2016-01-11 01:06:25	Cale	all right, it's probably good
2016-01-11 01:06:30	◀	jumblerg (~jumblerg@209-6-47-216.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-11 01:06:58	▶	PlasmaStar (Plasma@unaffiliated/plasmastar) has joined #haskell
2016-01-11 01:06:59	Cale	So we're doing
2016-01-11 01:07:00	dgpratt	ok, "x :: f (Free f a)" and "a :: f (Free f (a -> b))"
2016-01-11 01:07:04	hpc	dgpratt: \a x -> Free (a <*> x) -- this works with the version in http://hackage.haskell.org/package/free-4.12.1/docs/Control-Monad-Free.html
2016-01-11 01:07:08	Cale	nope
2016-01-11 01:07:13	hpc	:: Applicative f => f (a1 -> Free f a) -> f a1 -> Free f a
2016-01-11 01:07:15	Cale	x :: Free f a
2016-01-11 01:07:18	hpc	er, crap
2016-01-11 01:07:18	▶	hive-mind (pranq@mail.bbis.us) has joined #haskell
2016-01-11 01:07:21	Cale	hpc: pls
2016-01-11 01:07:23	◀	codedmart (~codedmart@c-24-10-135-105.hsd1.ut.comcast.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-11 01:07:29	Cale	no cheaterinoes :)
2016-01-11 01:07:39	hpc	it's okay, i was wrong anyway
2016-01-11 01:07:44	Cale	It's a good exercise working these things out from the types
2016-01-11 01:07:57	◀	baweaver (~baweaver@2601:644:8280:b3c:2058:7a66:1e50:e4c0) has quit (Remote host closed the connection)
2016-01-11 01:08:07	Cale	It just requires care thinking about what you have and what your goal is at each step
2016-01-11 01:08:10	dgpratt	umm, why do we disagree about x, Cale?
2016-01-11 01:08:17	Cale	Because I think we're writing
2016-01-11 01:08:20	Cale	Wrap a <*> x
2016-01-11 01:08:21	▶	L8D (~L8D@cpe-70-123-155-208.austin.res.rr.com) has joined #haskell
2016-01-11 01:08:24	Cale	= ...
2016-01-11 01:08:24	dgpratt	oh
2016-01-11 01:08:28	dgpratt	ok
2016-01-11 01:08:32	dgpratt	we can do that :)
2016-01-11 01:08:33	◀	cheetah2 (~cheetah2@172.242.102.144) has quit (Remote host closed the connection)
2016-01-11 01:08:43	◀	martin-t_ (~martin-t@199.201.64.3) has quit (Ping timeout: 272 seconds)
2016-01-11 01:08:49	Cale	yeah
2016-01-11 01:09:09	dgpratt	but if we did, the former case would be redundant, no? Or am I really confused?
2016-01-11 01:09:13	Cale	yes
2016-01-11 01:09:13	◀	danieli (~duniel@unaffiliated/danieli) has quit (Ping timeout: 240 seconds)
2016-01-11 01:09:19	dgpratt	to which? :)
2016-01-11 01:09:20	Cale	That's what I was talking about with the merging
2016-01-11 01:09:23	▶	tag (~scott@p3m/member/tag) has joined #haskell
2016-01-11 01:09:28	dgpratt	ok, we are merging, got it
2016-01-11 01:09:48	Cale	all right
2016-01-11 01:09:49	erisco	Data.Set should be Applicative too
2016-01-11 01:09:51	dgpratt	"x :: Free f a" ?
2016-01-11 01:09:55	Cale	yep
2016-01-11 01:09:57	vvrr	agh kind of wish hackage packages would pick a case convention and stick with it
2016-01-11 01:09:58	dgpratt	ok
2016-01-11 01:10:00	dgpratt	phew
2016-01-11 01:10:02	◀	astrofog (~astrofog@unaffiliated/astrofog) has quit (Quit: Quite)
2016-01-11 01:10:02	erisco	am I blinded and missing that instance as well?
2016-01-11 01:10:05	▶	jonathanfrias (~jonathanf@c-73-35-73-134.hsd1.fl.comcast.net) has joined #haskell
2016-01-11 01:10:17	erisco	> S.pure id <*> S.pure 3
2016-01-11 01:10:20	Cale	erisco: what instance? It's not an Applicative for all types
2016-01-11 01:10:20	lambdabot	     Not in scope: ‘S.pure’
2016-01-11 01:10:20	lambdabot	     Perhaps you meant data constructor ‘L.Pure’ (line 198)    Not in scope: ...
2016-01-11 01:10:20	lambdabot	     Perhaps you meant data constructor ‘L.Pure’ (line 198)
2016-01-11 01:10:26	erisco	whoops
2016-01-11 01:10:37	Cale	erisco: you can only do nontrivial things to Sets when you have an instance of Ord
2016-01-11 01:10:37	erisco	> S.singleton id <*> S.singleton 3
2016-01-11 01:10:39	lambdabot	     Could not deduce (Applicative S.Set) arising from a use of ‘<*>’
2016-01-11 01:10:39	lambdabot	     from the context (Num b)
2016-01-11 01:10:39	lambdabot	       bound by the inferred type of it :: Num b => S.Set b
2016-01-11 01:10:52	Cale	erisco: but when you're writing fmap, you don't have an instance of Ord
2016-01-11 01:11:03	Cale	because the type of fmap doesn't demand that an Ord instance exist
2016-01-11 01:11:03	Cale	s
2016-01-11 01:11:28	Cale	dgpratt: Okay
2016-01-11 01:11:34	erisco	Cale, ah I see
2016-01-11 01:11:39	erisco	darnit fmap ;)
2016-01-11 01:11:39	▶	Yuras (~Yuras@93.85.182.25) has joined #haskell
2016-01-11 01:11:43	◀	neoncontrails (~neoncontr@wsip-174-79-243-9.sd.sd.cox.net) has quit
2016-01-11 01:11:56	Cale	erisco: and it's not just fmap, also <*> would give you the same trouble
2016-01-11 01:12:09	Cale	(but not pure, because singleton can work without Ord)
2016-01-11 01:12:35	Cale	<*> gives you even more trouble because you'd be working with Set (a -> b)
2016-01-11 01:12:43	Cale	which means that you need an Ord instance for functions
2016-01-11 01:12:50	Cale	to build those
2016-01-11 01:12:58	erisco	I suppose you'd want the a -> Bool definition of Set for those instances
2016-01-11 01:13:10	erisco	unfortunate that there is this Ord thing
2016-01-11 01:13:23	Cale	Well, Set isn't quite like mathematical sets
2016-01-11 01:13:23	erisco	something something complexity
2016-01-11 01:13:30	Cale	It's something quite different
2016-01-11 01:14:19	Cale	erisco: Even if you reduce the Ord requirement to Eq, you run into the same issues
2016-01-11 01:14:29	Cale	(and have shitty complexity at that :)
2016-01-11 01:14:53	Cale	But you can do some things about this issue
2016-01-11 01:14:56	◀	Nikotiini (~user@cable-roi-58c037-251.dhcp.inet.fi) has quit (Remote host closed the connection)
2016-01-11 01:14:58	◀	Laserbear (~Laserbear@c-73-223-160-142.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2016-01-11 01:15:10	▶	danieli (~duniel@resiniferatoxin.duniel.no) has joined #haskell
2016-01-11 01:15:11	◀	danieli (~duniel@resiniferatoxin.duniel.no) has quit (Max SendQ exceeded)
2016-01-11 01:15:40	▶	danieli (~duniel@resiniferatoxin.duniel.no) has joined #haskell
2016-01-11 01:15:40	◀	danieli (~duniel@resiniferatoxin.duniel.no) has quit (Max SendQ exceeded)
2016-01-11 01:15:50	aweinstock	Cale: does (newtype MySet a = a -> Bool) run into the same issues?
2016-01-11 01:15:54	Cale	There's various libraries out there which provide notions of the Functor classes but restricted by an arbitrary choice of classes
2016-01-11 01:16:10	▶	danieli (~duniel@resiniferatoxin.duniel.no) has joined #haskell
2016-01-11 01:16:10	◀	danieli (~duniel@resiniferatoxin.duniel.no) has quit (Max SendQ exceeded)
2016-01-11 01:16:15	◀	Sucks (~quassel@187.39.13.235) has quit (Remote host closed the connection)
2016-01-11 01:16:20	◀	mikeylove (~textual@24.4.189.210) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-11 01:16:24	Cale	aweinstock: It might be hard dealing with fmap
2016-01-11 01:16:40	▶	danieli (~duniel@resiniferatoxin.duniel.no) has joined #haskell
2016-01-11 01:16:41	◀	danieli (~duniel@resiniferatoxin.duniel.no) has quit (Max SendQ exceeded)
2016-01-11 01:16:50	▶	Sucks (~quassel@187.39.13.235) has joined #haskell
2016-01-11 01:17:10	▶	danieli (~duniel@unaffiliated/danieli) has joined #haskell
2016-01-11 01:17:11	Cale	Like, you're given (a -> b) and (a -> Bool), and now you want (b -> Bool)
2016-01-11 01:17:11	◀	danieli (~duniel@unaffiliated/danieli) has quit (Max SendQ exceeded)
2016-01-11 01:17:14	▶	adam__ (~adam@static-50-53-43-165.bvtn.or.frontiernet.net) has joined #haskell
2016-01-11 01:17:14	Cale	wat do?
2016-01-11 01:17:25	Cale	You don't know what type a or b is
2016-01-11 01:17:40	▶	danieli (~duniel@resiniferatoxin.duniel.no) has joined #haskell
2016-01-11 01:17:41	◀	danieli (~duniel@resiniferatoxin.duniel.no) has quit (Max SendQ exceeded)
2016-01-11 01:18:02	Cale	You have no values of type a, so you can't use your functions a -> b or a -> Bool
2016-01-11 01:18:10	▶	danieli (~duniel@resiniferatoxin.duniel.no) has joined #haskell
2016-01-11 01:18:11	◀	danieli (~duniel@resiniferatoxin.duniel.no) has quit (Max SendQ exceeded)
2016-01-11 01:18:14	Cale	and you have no value of type b, so you can't use your function b -> Bool
2016-01-11 01:18:35	▶	markus1199 (~markus118@p4FDC1DB1.dip0.t-ipconnect.de) has joined #haskell
2016-01-11 01:18:39	◀	SCHAAP137 (SCHAPiE@unaffiliated/schaap137) has quit (Remote host closed the connection)
2016-01-11 01:18:43	▶	oisdk_ (~oisdk_@95.45.70.25) has joined #haskell
2016-01-11 01:19:01	▶	predator117 (~predator1@p4FDC1DB1.dip0.t-ipconnect.de) has joined #haskell
2016-01-11 01:19:16	aweinstock	(b -> Bool) is the result, we don't even have one of those (without fix)
2016-01-11 01:19:56	◀	Lord_Quimby (~Lord_Quim@82.103.136.246) has quit
2016-01-11 01:20:07	Cale	oh, der, sorry
2016-01-11 01:20:18	◀	Wes[SA-PHI] (~textual@74.197.67.119) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-11 01:20:28	Cale	yeah, you have a value of type b, and want to produce a Bool result based on it and the information from the rest
2016-01-11 01:20:45	Cale	but the rest of the information you have doesn't help you because you have no value of type a
2016-01-11 01:20:48	aweinstock	if only f were invertible ;)
2016-01-11 01:20:51	Cale	yeah
2016-01-11 01:20:57	Cale	or if you could find preimages
2016-01-11 01:21:54	◀	derdon (~simon@p5B31E01A.dip0.t-ipconnect.de) has quit (Quit: WeeChat 1.3)
2016-01-11 01:21:58	◀	markus1189 (~markus118@p4FDC018A.dip0.t-ipconnect.de) has quit (Ping timeout: 250 seconds)
2016-01-11 01:22:16	◀	griotspeak (~textual@c-73-237-161-156.hsd1.ga.comcast.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-11 01:22:30	◀	predator217 (~predator1@p4FDC018A.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2016-01-11 01:22:58	◀	choosetwo (~jmeyer@50-93-252-202.fttp.usinternet.com) has quit (Ping timeout: 260 seconds)
2016-01-11 01:23:54	aweinstock	fmap f (MySet s1) = MySet (\b -> any (\a -> s1 a && f a == b) [minBound..maxBound]) -- I think this is logically correct, but now it requires (Enum, Bounded, Eq) and is inefficient too
2016-01-11 01:24:11	aweinstock	so that doesn't quite solve the problem of constraints
2016-01-11 01:24:20	ℹ	xiinotulp is now known as plutoniix
2016-01-11 01:24:29	▶	FlyingChicken (uid131586@gateway/web/irccloud.com/x-rceivqjmowltclcq) has joined #haskell
2016-01-11 01:25:15	◀	NightRa (uid40361@gateway/web/irccloud.com/x-stmzkkypwnvrwewk) has quit (Quit: Connection closed for inactivity)
2016-01-11 01:26:10	▶	Jesin (~Jesin@pool-108-45-39-144.washdc.fios.verizon.net) has joined #haskell
2016-01-11 01:26:52	▶	homovitruvius (~user@pool-108-17-70-127.pitbpa.fios.verizon.net) has joined #haskell
2016-01-11 01:27:14	▶	Laserbear (~Laserbear@c-73-223-160-142.hsd1.ca.comcast.net) has joined #haskell
2016-01-11 01:27:45	◀	j2j (~Thunderbi@ool-435051f2.dyn.optonline.net) has quit (Ping timeout: 276 seconds)
2016-01-11 01:27:52	Nadrieril	aweinstock: wouldn't your set be more of a Contravariant functor ?
2016-01-11 01:27:59	▶	lethjakman (~lethjakma@71.56.221.51) has joined #haskell
2016-01-11 01:28:34	Nadrieril	with contramap f (MySet s) = Myset (s . f)
2016-01-11 01:29:01	◀	yrdz (~user@unaffiliated/p-adams/x-7117614) has quit (Ping timeout: 245 seconds)
2016-01-11 01:29:01	◀	yrdz` (~user@97-88-202-238.dhcp.stls.mo.charter.com) has quit (Ping timeout: 245 seconds)
2016-01-11 01:29:11	Nadrieril	(I didn't read what the problem was, I only noticed that)
2016-01-11 01:29:40	◀	vikingofrock (43b48797@gateway/web/freenode/ip.67.180.135.151) has quit (Quit: Page closed)
2016-01-11 01:29:48	◀	adam__ (~adam@static-50-53-43-165.bvtn.or.frontiernet.net) has quit (Remote host closed the connection)
2016-01-11 01:30:13	▶	koz_ (~koz@wireless-nat-student.aut.ac.nz) has joined #haskell
2016-01-11 01:30:29	◀	kurt11 (~Adium@99-91-2-47.lightspeed.austtx.sbcglobal.net) has quit (Quit: Leaving.)
2016-01-11 01:30:30	◀	Heasummn (~Heasummn@c-73-51-87-243.hsd1.il.comcast.net) has quit (Ping timeout: 265 seconds)
2016-01-11 01:30:39	◀	doomlord (~textual@host86-153-157-188.range86-153.btcentralplus.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-11 01:30:41	◀	PatrickRobotham (uid18270@gateway/web/irccloud.com/x-dsylpafsmswxwhzj) has quit (Quit: Connection closed for inactivity)
2016-01-11 01:30:41	koz_	I want to write an enumerated type with one of four possible Char values. I tried doing it like this: newtype AttributeKind = 'p' | 'd' | 's' | 'a'
2016-01-11 01:30:59	koz_	However, Haskell's not happy with that. How would I write what I need?
2016-01-11 01:31:09	◀	Ed_0971 (~ed@92fb-c056-afce-2500-b001-87cf-07d0-2001.dyn.estpak.ee) has quit (Remote host closed the connection)
2016-01-11 01:31:32	roconnor	all you can do is newtype AttributeKind = P | D | S | A
2016-01-11 01:31:35	aweinstock	@hoogle Contravariant
2016-01-11 01:31:35	lambdabot	package contravariant
2016-01-11 01:32:01	geekosaur	wouldn't tat be type, not newtype?
2016-01-11 01:32:04	geekosaur	er, data
2016-01-11 01:32:05	koz_	roconnor: Oh, ok. Well, that works.
2016-01-11 01:32:07	roconnor	er right
2016-01-11 01:32:08	⚡	geekosaur sigs
2016-01-11 01:32:11	roconnor	data AttributeKind = P | D | S | A
2016-01-11 01:32:13	geekosaur	....
2016-01-11 01:32:25	roconnor	you can make a Prism Char AttributeKind
2016-01-11 01:32:26	geekosaur	might be naptime here >.>
2016-01-11 01:32:27	aweinstock	Nadrieril: that looks correct
2016-01-11 01:32:36	koz_	roconnor: Thanks, that actually works for me.
2016-01-11 01:32:41	koz_	Although I might find some more semantic names.
2016-01-11 01:32:57	◀	lethjakman (~lethjakma@71.56.221.51) has quit (Ping timeout: 276 seconds)
2016-01-11 01:33:10	▶	derdon (~derdon@p5B31E01A.dip0.t-ipconnect.de) has joined #haskell
2016-01-11 01:33:25	koz_	How would I do a type that represents a natural number value in the range [1, 2, 3, 4, 5]?
2016-01-11 01:33:26	Nadrieril	aweinstock: i'm not sure what you can do with that though
2016-01-11 01:33:33	◀	pauliprice (~paulipric@ool-4350ace2.dyn.optonline.net) has quit (Ping timeout: 255 seconds)
2016-01-11 01:33:46	Nadrieril	is there a contravariant applicative ?
2016-01-11 01:33:47	ℹ	Elsi_ is now known as Elsi
2016-01-11 01:33:53	aweinstock	Nadrieril: it looks like that already exists as Data.Functor.Contravariant.Predicate (what I was calling MySet)
2016-01-11 01:34:08	Nadrieril	well, here you go ^^
2016-01-11 01:34:10	geekosaur	koz_, Haskell doesn't support subtyping, so you either use constructors instead like with AttributeKind or you play games with TypeLits
2016-01-11 01:34:13	roconnor	data Five = One | Two | Three | Four | Five
2016-01-11 01:34:13	▶	pauliprice (~paulipric@ool-4350ace2.dyn.optonline.net) has joined #haskell
2016-01-11 01:34:26	◀	simukis_ (~nagisa@78-60-58-6.static.zebra.lt) has quit (Ping timeout: 245 seconds)
2016-01-11 01:34:31	roconnor	or use a newtype over an Int and smart constructors.
2016-01-11 01:34:33	geekosaur	...or you use smart constructors and check stuff at runtime
2016-01-11 01:34:43	▶	nerfando (~textual@177.220.182.50) has joined #haskell
2016-01-11 01:34:47	koz_	roconnor and geekosaur: OK, thanks for that.
2016-01-11 01:35:04	◀	nerfando (~textual@177.220.182.50) has quit (Client Quit)
2016-01-11 01:35:09	Nadrieril	aweinstock: apart from the fact that their predicate doesn't have a lot of structure like your tree
2016-01-11 01:35:19	Nadrieril	you'd have to define the monoid instances, etc
2016-01-11 01:35:27	▶	plucas (~plucas@c-98-210-10-52.hsd1.ca.comcast.net) has joined #haskell
2016-01-11 01:35:48	Nadrieril	although you could use the All and Any monoid newtypes of Bool
2016-01-11 01:35:53	◀	L8D (~L8D@cpe-70-123-155-208.austin.res.rr.com) has quit (Ping timeout: 240 seconds)
2016-01-11 01:36:21	aweinstock	err, what tree?
2016-01-11 01:36:30	Nadrieril	*set, sorry
2016-01-11 01:36:30	▶	adam__ (~adam@static-50-53-43-165.bvtn.or.frontiernet.net) has joined #haskell
2016-01-11 01:36:51	geekosaur	there's also Liquid Haskell, I guess
2016-01-11 01:37:00	geekosaur	http://goto.ucsd.edu/~rjhala/liquid/haskell/blog/about/
2016-01-11 01:37:05	aweinstock	data MySet a = MySet (a -> Bool) -- this is exactly the same as Data.Functor.Contravariant.Predicate
2016-01-11 01:37:10	◀	koz_ (~koz@wireless-nat-student.aut.ac.nz) has left #haskell ("WeeChat 1.3")
2016-01-11 01:37:39	▶	binaryplease1 (~binaryple@xdsl-78-34-180-238.netcologne.de) has joined #haskell
2016-01-11 01:37:40	aweinstock	well, modulo data/newtype
2016-01-11 01:37:53	Nadrieril	yup
2016-01-11 01:37:56	▶	nakal__ (~nakal@port-92-201-219-40.dynamic.qsc.de) has joined #haskell
2016-01-11 01:38:04	aweinstock	(am I missing something?)
2016-01-11 01:38:06	Nadrieril	no
2016-01-11 01:38:19	◀	diegoksp (~diegoksp@190.215.244.40) has quit (Quit: Leaving)
2016-01-11 01:38:32	Nadrieril	I was just saying they didn't define anything for composing "sets" like you did
2016-01-11 01:38:48	Nadrieril	oh, here is a contravariatn applicative: https://hackage.haskell.org/package/contravariant-1.3.3/docs/Data-Functor-Contravariant-Divisible.html#t:Divisible
2016-01-11 01:39:08	◀	binaryplease1 (~binaryple@xdsl-78-34-180-238.netcologne.de) has quit (Client Quit)
2016-01-11 01:39:10	▶	griotspeak (~textual@c-73-237-161-156.hsd1.ga.comcast.net) has joined #haskell
2016-01-11 01:39:28	Cale	dgpratt: sorry, got distracted by dinner :)
2016-01-11 01:39:38	Cale	dgpratt: did you manage to solve it?
2016-01-11 01:39:39	▶	cheetah2 (~cheetah2@172.242.102.144) has joined #haskell
2016-01-11 01:39:50	Cale	dgpratt: or should we work through some more?
2016-01-11 01:39:52	◀	tristanp_ (~tristanp@c-50-159-71-64.hsd1.wa.comcast.net) has quit (Remote host closed the connection)
2016-01-11 01:39:58	◀	strburst (~allen@r4-128-61-88-50.res.gatech.edu) has quit (Quit: WeeChat 1.3)
2016-01-11 01:40:10	dgpratt	Cale, no problem -- naw, I'm still working on it -- thought I was getting somewhere, but no such luck
2016-01-11 01:40:16	▶	strburst (~allen@res388d-128-61-88-50.res.gatech.edu) has joined #haskell
2016-01-11 01:40:20	▶	tristanp (~tristanp@2601:602:8a00:1310::4) has joined #haskell
2016-01-11 01:40:29	Cale	okay, let's go to #haskell-overflow just to avoid noise from other discussions :)
2016-01-11 01:41:24	◀	binaryplease (~binaryple@xdsl-78-34-143-220.netcologne.de) has quit (Ping timeout: 276 seconds)
2016-01-11 01:41:24	◀	nakal1 (~nakal@port-92-201-66-116.dynamic.qsc.de) has quit (Ping timeout: 276 seconds)
2016-01-11 01:41:44	◀	amosr (~amos@59.167.64.185) has quit (Quit: amosr)
2016-01-11 01:41:57	◀	cir0x (~Adium@dslb-088-076-084-066.088.076.pools.vodafone-ip.de) has quit (Quit: Leaving.)
2016-01-11 01:41:58	▶	chrisramsey (~chrisrams@2602:306:3762:700:286d:27f4:4635:8255) has joined #haskell
2016-01-11 01:42:00	◀	chrisramsey (~chrisrams@2602:306:3762:700:286d:27f4:4635:8255) has quit (Remote host closed the connection)
2016-01-11 01:42:11	▶	saulzar (~oliver@99.148.69.111.dynamic.snap.net.nz) has joined #haskell
2016-01-11 01:42:27	aweinstock	Nadrieril: the prose in the documentation for contravariant goes way over my head
2016-01-11 01:42:40	Nadrieril	aweinstock: me too ^^
2016-01-11 01:43:16	◀	al-damiri (~manzoor@unaffiliated/al-damiri) has quit (Quit: WeeChat 0.4.2)
2016-01-11 01:43:19	aweinstock	what's a co-pre-sheave? what's even a sheave?
2016-01-11 01:43:20	▶	badon_ (~badon@pdpc/supporter/active/badon) has joined #haskell
2016-01-11 01:43:20	◀	badon (~badon@pdpc/supporter/active/badon) has quit (Disconnected by services)
2016-01-11 01:43:24	ℹ	badon_ is now known as badon
2016-01-11 01:43:39	▶	al-damiri (~manzoor@unaffiliated/al-damiri) has joined #haskell
2016-01-11 01:44:13	◀	hannelita (~hannelita@2804:14c:a8:27a5:4db7:95d9:2720:4044) has quit (Remote host closed the connection)
2016-01-11 01:44:21	▶	grassass (grass@gateway/vpn/mullvad/x-rtfcxstxxmtaqmrn) has joined #haskell
2016-01-11 01:44:50	▶	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2016-01-11 01:44:53	Nadrieril	I have not the slightest idea
2016-01-11 01:44:56	◀	tristanp (~tristanp@2601:602:8a00:1310::4) has quit (Ping timeout: 250 seconds)
2016-01-11 01:45:03	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-11 01:45:09	Nadrieril	bu you don't need the theory to actually use the thing
2016-01-11 01:45:25	Nadrieril	apparently applicatives are defined similarly
2016-01-11 01:45:37	◀	adamCS (~textual@cpe-74-71-211-64.nyc.res.rr.com) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-11 01:45:40	◀	krypt (~krypt@pool-141-155-178-253.nycmny.fios.verizon.net) has quit (Remote host closed the connection)
2016-01-11 01:46:05	▶	saulzar_ (~oliver@132.181.14.113) has joined #haskell
2016-01-11 01:46:33	◀	ril (~ril@c-98-210-195-123.hsd1.ca.comcast.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-11 01:46:36	▶	umib0zu (~umib0zu@146-115-43-219.c3-0.abr-ubr1.sbo-abr.ma.cable.rcn.com) has joined #haskell
2016-01-11 01:46:37	aweinstock	and are divide/conquer in Contravariant.Divisible related to divide and conquer algorithms, or is conquer just a pun after divide was named sanely?
2016-01-11 01:47:32	chrisdotcode	@src fold
2016-01-11 01:47:32	lambdabot	Source not found. It can only be attributed to human error.
2016-01-11 01:47:33	chrisdotcode	@src foldr
2016-01-11 01:47:34	lambdabot	foldr f z []     = z
2016-01-11 01:47:34	lambdabot	foldr f z (x:xs) = f x (foldr f z xs)
2016-01-11 01:48:35	Nadrieril	can't help you there, sry
2016-01-11 01:49:18	◀	pauliprice (~paulipric@ool-4350ace2.dyn.optonline.net) has quit (Ping timeout: 255 seconds)
2016-01-11 01:49:19	◀	kazagistar (~Adium@host-98-127-133-183.gdj-co.client.bresnan.net) has quit (Quit: Leaving.)
2016-01-11 01:49:35	◀	emmanuel_erc (~user@d-128-74-143.bootp.Virginia.EDU) has quit (Remote host closed the connection)
2016-01-11 01:49:42	▶	emmanuel_erc (~user@d-128-74-143.bootp.Virginia.EDU) has joined #haskell
2016-01-11 01:49:42	◀	plucas (~plucas@c-98-210-10-52.hsd1.ca.comcast.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-11 01:49:59	◀	Goplat (~goplat@reactos/developer/Goplat) has quit (Remote host closed the connection)
2016-01-11 01:50:27	▶	Heasummn (~Heasummn@c-73-51-87-243.hsd1.il.comcast.net) has joined #haskell
2016-01-11 01:50:33	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Ping timeout: 250 seconds)
2016-01-11 01:50:51	▶	doomlord (~textual@host86-153-157-188.range86-153.btcentralplus.com) has joined #haskell
2016-01-11 01:52:29	◀	MrJohn (uid138657@gateway/web/irccloud.com/x-mgmahxmwthworfgb) has quit (Quit: Updating details, brb)
2016-01-11 01:52:37	▶	RelaxedPanda (uid138657@gateway/web/irccloud.com/x-yddcdubsatlgovdg) has joined #haskell
2016-01-11 01:53:22	▶	rodlogic (~rodlogic@179.159.96.218) has joined #haskell
2016-01-11 01:54:44	▶	kazagistar (~Adium@host-98-127-133-183.gdj-co.client.bresnan.net) has joined #haskell
2016-01-11 01:54:57	◀	derdon (~derdon@p5B31E01A.dip0.t-ipconnect.de) has quit (Ping timeout: 260 seconds)
2016-01-11 01:55:06	▶	nhunter (~nhunter@c-71-236-158-215.hsd1.or.comcast.net) has joined #haskell
2016-01-11 01:55:10	◀	favetelinguis (~favetelin@78-72-40-166-no186.tbcn.telia.com) has quit (Ping timeout: 260 seconds)
2016-01-11 01:55:51	parsnip	hmm, so regarding this .ghci created by `stack init`, i have errors re: dist/build/autogen/cabal_macros.h, i found a mailing list mention of this, that suggests using `cabal configure && cabal build` to generate this file. but then i get a series of entires listed after "cabal: At least the following dependencies are missing:", is there a way to fix this? ultimately, i was trying to do `stack ghci` in hakyll/, and wasn't su
2016-01-11 01:55:52	parsnip	commenting out that line in .ghci was a good idea. 
2016-01-11 01:56:44	parsnip	i'm also upgrading stack, hopefully i can try that soon. 
2016-01-11 01:57:04	geekosaur	you hit an IRC messagelength limit by the way
2016-01-11 01:57:14	geekosaur	 i was trying to do `stack ghci` in hakyll/, and wasn't su <-- chopped here
2016-01-11 01:57:26	kadoban	parsnip: 'stack init' doesn't create a .ghci file ?
2016-01-11 01:58:09	▶	luismilanoolivei (~luismilan@189.115.15.217) has joined #haskell
2016-01-11 01:58:29	▶	poopiefa_ (~rikonor@ool-457b460f.dyn.optonline.net) has joined #haskell
2016-01-11 01:58:33	parsnip	kadoban: it does, but when i do `stack ghci`, i get a complaint about cabal_macros.h, unless i comment out /that/ half of .ghci
2016-01-11 01:58:54	luigy	lpaste the .ghci 
2016-01-11 01:59:30	◀	boris`` (~boris@unaffiliated/boris/x-0919186) has quit (Ping timeout: 265 seconds)
2016-01-11 01:59:39	parsnip	http://lpaste.net/148788
2016-01-11 01:59:41	▶	Welkin (~Welkin@rrcs-97-78-71-195.se.biz.rr.com) has joined #haskell
2016-01-11 01:59:42	◀	rodlogic (~rodlogic@179.159.96.218) has quit (Ping timeout: 264 seconds)
2016-01-11 01:59:45	kadoban	parsnip: I've done 'stack init' quite a bit, none of them have a .ghci file. I think you're confused, or I am.
2016-01-11 02:00:00	▶	Wes[SA-PHI] (~textual@74.197.67.119) has joined #haskell
2016-01-11 02:00:06	◀	albertus1 (~albertus1@f051224118.adsl.alicedsl.de) has quit (Quit: Leaving.)
2016-01-11 02:00:15	luigy	kadoban it doesn't afaik :)
2016-01-11 02:00:32	parsnip	oops, you're right https://github.com/jaspervdj/hakyll/blob/master/.ghci
2016-01-11 02:00:34	▶	favetelinguis (~favetelin@78-72-40-166-no186.tbcn.telia.com) has joined #haskell
2016-01-11 02:00:39	parsnip	i guess it made the stack.yaml
2016-01-11 02:00:42	◀	Swizec (~swizec@c-67-164-98-169.hsd1.ca.comcast.net) has quit (Quit: Leaving...)
2016-01-11 02:00:53	kadoban	Right
2016-01-11 02:01:01	▶	XorSwap (~XorSwap@wnpgmb016qw-ds01-214-177.dynamic.mtsallstream.net) has joined #haskell
2016-01-11 02:01:06	◀	DDR (~david@ec2.happyspork.com) has quit (Max SendQ exceeded)
2016-01-11 02:01:24	▶	chrisramsey (~chrisrams@2602:306:3762:700:286d:27f4:4635:8255) has joined #haskell
2016-01-11 02:01:29	◀	cheetah2 (~cheetah2@172.242.102.144) has quit (Remote host closed the connection)
2016-01-11 02:01:43	▶	chrisram_ (~chrisrams@99-118-32-112.lightspeed.snantx.sbcglobal.net) has joined #haskell
2016-01-11 02:01:44	◀	umib0zu (~umib0zu@146-115-43-219.c3-0.abr-ubr1.sbo-abr.ma.cable.rcn.com) has quit (Quit: umib0zu)
2016-01-11 02:01:47	▶	ril (~ril@199-230-11-50.PUBLIC.monkeybrains.net) has joined #haskell
2016-01-11 02:01:47	▶	Sindriava (~textual@250.99.broadband10.iol.cz) has joined #haskell
2016-01-11 02:01:54	▶	DDR (~david@ec2.happyspork.com) has joined #haskell
2016-01-11 02:02:38	◀	Welkin (~Welkin@rrcs-97-78-71-195.se.biz.rr.com) has left #haskell
2016-01-11 02:02:48	◀	luismilanoolivei (~luismilan@189.115.15.217) has quit (Ping timeout: 255 seconds)
2016-01-11 02:02:51	◀	jonathanfrias (~jonathanf@c-73-35-73-134.hsd1.fl.comcast.net) has quit (Ping timeout: 276 seconds)
2016-01-11 02:02:51	parsnip	hmm, should i bother trying to get `cabal configure && cabal build` to succeed? 
2016-01-11 02:03:12	parsnip	here is article where i saw this suggested: https://mail.haskell.org/pipermail/libraries/2012-September/018491.html
2016-01-11 02:04:07	parsnip	geekosaur: "ultimately, i was trying to do `stack ghci` in hakyll/, and wasn't sure if simply commenting out that line in .ghci was a good idea."
2016-01-11 02:04:57	▶	MrMeowMeow (~MrMeowMeo@2602:306:b826:6950::44) has joined #haskell
2016-01-11 02:05:22	◀	chrisramsey (~chrisrams@2602:306:3762:700:286d:27f4:4635:8255) has quit (Ping timeout: 240 seconds)
2016-01-11 02:05:38	luigy	parsnip `stack ghci` handles that for you.. no need for any of those
2016-01-11 02:05:43	◀	chrisram_ (~chrisrams@99-118-32-112.lightspeed.snantx.sbcglobal.net) has quit (Remote host closed the connection)
2016-01-11 02:06:05	▶	umib0zu (~umib0zu@146-115-43-219.c3-0.abr-ubr1.sbo-abr.ma.cable.rcn.com) has joined #haskell
2016-01-11 02:06:54	◀	lspitzner (~lspitzner@x5f7690c9.dyn.telefonica.de) has quit (Ping timeout: 246 seconds)
2016-01-11 02:07:07	◀	homovitruvius (~user@pool-108-17-70-127.pitbpa.fios.verizon.net) has quit (Ping timeout: 256 seconds)
2016-01-11 02:07:15	◀	exferenceBot (~exference@x5f7690c9.dyn.telefonica.de) has quit (Ping timeout: 246 seconds)
2016-01-11 02:07:15	◀	hexagoxel (~hexagoxel@x5f7690c9.dyn.telefonica.de) has quit (Ping timeout: 246 seconds)
2016-01-11 02:07:29	▶	exferenceBot (~exference@x5f769b87.dyn.telefonica.de) has joined #haskell
2016-01-11 02:07:30	◀	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has quit (Remote host closed the connection)
2016-01-11 02:07:32	parsnip	no need for what exactly? i get an error if i "don't do anything". 
2016-01-11 02:07:53	▶	lspitzner (~lspitzner@x5f769b87.dyn.telefonica.de) has joined #haskell
2016-01-11 02:08:23	▶	hexagoxel (~hexagoxel@x5f769b87.dyn.telefonica.de) has joined #haskell
2016-01-11 02:08:57	◀	nhunter (~nhunter@c-71-236-158-215.hsd1.or.comcast.net) has quit (Ping timeout: 260 seconds)
2016-01-11 02:09:19	ℹ	irc: disconnected from server
2016-01-11 20:34:46	▶	psyq (~Psyq@unaffiliated/psyq) has joined #haskell
2016-01-11 20:34:46	ℹ	Topic for #haskell is "http://www.haskell.org/ | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | http://reddit.com/r/haskell | Administrative issues: #haskell-ops | Hackage status? http://status.haskell.org | http://downloads.haskell.org"
2016-01-11 20:34:46	ℹ	Topic set by quicksilver on Wed, 07 Oct 2015 16:39:51
2016-01-11 20:34:46	ℹ	Channel #haskell: 1560 nicks (1 op, 0 voices, 1559 normals)
2016-01-11 20:34:47	ℹ	URL for #haskell: http://www.haskell.org/
2016-01-11 20:35:09	ℹ	Channel created on Sun, 26 Nov 2006 07:42:48
2016-01-11 20:35:10	▶	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has joined #haskell
2016-01-11 20:35:14	◀	strburst (~allen@lawn-128-61-26-37.lawn.gatech.edu) has quit (Quit: WeeChat 1.3)
2016-01-11 20:35:29	andromeda-galaxy	adamCS: I've been trying to build ghcjs locally, for improved-base
2016-01-11 20:35:41	andromeda-galaxy	but I'm getting a particularly weird error during setup that:
2016-01-11 20:35:42	Cale	Yeah, nix is a bit of a constant source of frustration for me, since I haven't yet taken much time to learn the ad-hoc programming language its configuration files are written in.
2016-01-11 20:35:47	andromeda-galaxy	adamCS: setup: The program 'ghcjs' version >=0.1 is required but the version of '/home/redacted/.cabal/bin/ghcjs' could not be determined.
2016-01-11 20:36:01	▶	infinitezero (~infinitez@209.95.50.148) has joined #haskell
2016-01-11 20:36:18	▶	Pzor (~Pzor@123.201.198.23) has joined #haskell
2016-01-11 20:36:19	adamCS	andromeda-galaxy:  That's what I have, along with some later branches of ghcjs-dom, reflex-dom and reflex-dom-contrib.
2016-01-11 20:36:43	adamCS	that's during stack setup?
2016-01-11 20:36:57	andromeda-galaxy	Cale:  the top post on luite's blog (that I can see at least) is from 2013 and says that 'ghcjs-build repository is no longer maintained.'
2016-01-11 20:37:01	andromeda-galaxy	adamCS: stack?
2016-01-11 20:37:06	Cale	oh, that's sad
2016-01-11 20:37:16	andromeda-galaxy	adamCS: I did what the ghcjs repo says:
2016-01-11 20:37:20	andromeda-galaxy	cabal install ghcjs && ghcjs-boot
2016-01-11 20:37:23	◀	plucas (~plucas@8.18.218.175) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-11 20:37:29	Cale	Yeah I missed that
2016-01-11 20:37:39	adamCS	andromeda-galaxy: http://docs.haskellstack.org/en/stable/README.html
2016-01-11 20:37:51	adamCS	and: http://docs.haskellstack.org/en/stable/ghcjs.html
2016-01-11 20:37:56	◀	cdg (~cdg@157.166.175.129) has quit (Ping timeout: 265 seconds)
2016-01-11 20:38:02	andromeda-galaxy	adamCS: the ghcjs page only talks about how to get binaries from rsheppard, right?
2016-01-11 20:38:29	andromeda-galaxy	adamCS: I mean, nrollad
2016-01-11 20:38:41	andromeda-galaxy	it says to use 'url: "https://github.com/nrolland/ghcjs/releases/download/v0.2.0.20151029/ghcjs-0.2.0.20151029.tar.gz"'
2016-01-11 20:38:42	adamCS	I didn't get the binary, I built it.  It does take a while but then things work like a charm..
2016-01-11 20:38:57	adamCS	Well, as long as you can live without ghc-mod...which is annoying
2016-01-11 20:39:02	andromeda-galaxy	adamCS: so it builds from source, but from that source instead of the main repo source?
2016-01-11 20:39:17	⚡	hackagebot compose-ltr 0.1.3 - More intuitive, left-to-right function composition.  https://hackage.haskell.org/package/compose-ltr-0.1.3 (Wizek)
2016-01-11 20:40:06	◀	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has quit (Remote host closed the connection)
2016-01-11 20:40:19	adamCS	andromeda-galaxy:  Yes.  It builds from whatever source your stack.yaml points to.
2016-01-11 20:40:40	adamCS	I've been working with the 2015-10-29 branch
2016-01-11 20:41:29	andromeda-galaxy	adamCS: ah, okay...
2016-01-11 20:41:32	▶	vF3hNGxc47h8 (~androirc@152.249.216.8) has joined #haskell
2016-01-11 20:41:53	andromeda-galaxy	adamCS: I wasn't sure about trusting the nrolland branch of the sources, that's all
2016-01-11 20:42:12	adamCS	right
2016-01-11 20:42:20	adamCS	Let me see what I have been using...
2016-01-11 20:42:32	andromeda-galaxy	adamCS: thanks!
2016-01-11 20:42:37	adamCS	yeah, I've been using that one
2016-01-11 20:43:06	▶	wanderleyguima (~textual@199.201.64.3) has joined #haskell
2016-01-11 20:43:10	◀	kazagistar1 (~Adium@76.191.88.132) has quit (Quit: Leaving.)
2016-01-11 20:43:27	andromeda-galaxy	adamCS: ah well, I'll try it with ghcjs/ghcjs and see what happens, or maybe diff nrolland & ghcjs
2016-01-11 20:43:29	▶	kazagistar (~Adium@76.191.88.132) has joined #haskell
2016-01-11 20:43:43	▶	jdt (~user@208.85.233.130) has joined #haskell
2016-01-11 20:43:49	andromeda-galaxy	adamCS, Cale: thanks for looking into it, anyway
2016-01-11 20:44:36	adamCS	then I used github desktop to get local copies of the appropriate ghcjs-dom, reflex and reflex-dom and specify the local directories in stack.yaml under "packages"
2016-01-11 20:45:16	andromeda-galaxy	adamCS: right...
2016-01-11 20:46:15	adamCS	Also, and I'm not sure it matters, I've been using "resolver: nightly-2015-11-14"
2016-01-11 20:46:37	◀	sssilver (~sssilver@38.122.48.218) has quit (Ping timeout: 260 seconds)
2016-01-11 20:46:45	adamCS	at some point I'll figure out if that's necessary but it all works and the deps are sort of finicky...
2016-01-11 20:47:30	andromeda-galaxy	indeed
2016-01-11 20:47:46	◀	L8D (~L8D@216.201.168.18) has quit (Ping timeout: 260 seconds)
2016-01-11 20:48:11	◀	ggole (~ggole@106-68-252-110.dyn.iinet.net.au) has quit (Ping timeout: 245 seconds)
2016-01-11 20:48:18	◀	marko______ (~markovirc@brod.es) has quit (Ping timeout: 246 seconds)
2016-01-11 20:48:18	◀	xylen_ (~codywelsh@c-73-189-204-160.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2016-01-11 20:50:51	▶	sssilver (~sssilver@38.122.48.218) has joined #haskell
2016-01-11 20:50:53	◀	croyd (~croyd@129.10.9.24) has quit (Read error: Connection reset by peer)
2016-01-11 20:51:02	◀	vlatkoB (~IRC_clien@unaffiliated/vlatkob) has quit (Ping timeout: 240 seconds)
2016-01-11 20:51:25	▶	croyd (~croyd@129.10.9.24) has joined #haskell
2016-01-11 20:51:54	◀	Geraldus_____ (~Geraldus@213.59.130.243) has quit (Ping timeout: 264 seconds)
2016-01-11 20:52:37	▶	hellwolf (~hellwolf@85.253.102.223.cable.starman.ee) has joined #haskell
2016-01-11 20:53:03	▶	vlatkoB (~IRC_clien@unaffiliated/vlatkob) has joined #haskell
2016-01-11 20:53:16	▶	cheetah2 (~cheetah2@172.242.102.144) has joined #haskell
2016-01-11 20:54:02	◀	insitu (~textual@36.125.100.84.rev.sfr.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-01-11 20:54:56	▶	moltalk101 (~axeld@cable-dynamic-87-245-125-198.shinternet.ch) has joined #haskell
2016-01-11 20:55:21	◀	sssilver (~sssilver@38.122.48.218) has quit (Client Quit)
2016-01-11 20:55:35	▶	ThatOtherPerson (~ThatOther@unaffiliated/thatotherpersony) has joined #haskell
2016-01-11 20:57:22	▶	lemur (~baweaver@173.230.196.25) has joined #haskell
2016-01-11 20:57:24	▶	favetelinguis (~favetelin@78-72-40-166-no186.tbcn.telia.com) has joined #haskell
2016-01-11 20:57:59	▶	Geraldus_____ (~Geraldus@213.59.130.246) has joined #haskell
2016-01-11 20:58:54	▶	sssilver (~sssilver@38.122.48.218) has joined #haskell
2016-01-11 20:59:29	▶	Seblink (51a485c1@gateway/web/freenode/ip.81.164.133.193) has joined #haskell
2016-01-11 21:00:01	▶	plucas (~plucas@8.18.218.175) has joined #haskell
2016-01-11 21:00:28	ReinH	adamCS: I have a working stack.yml for ghcjs. It also sets up reflex-dom, but you can skip that part.
2016-01-11 21:00:37	◀	koshmar (~koshmar@unaffiliated/koshmar) has quit (Ping timeout: 250 seconds)
2016-01-11 21:00:41	ReinH	You can use lts-3.16 and similar as well
2016-01-11 21:00:58	ReinH	oh. andromeda-galaxy: try https://github.com/reinh/reflex-dom-stack-demo
2016-01-11 21:00:59	adamCS	ReinH:  I think it's andromeda-galaxy that needs that
2016-01-11 21:01:04	adamCS	right
2016-01-11 21:01:08	ReinH	adamCS: yeah I just pieced that together ;)
2016-01-11 21:01:09	▶	zeroed (~zeroed@unaffiliated/zeroed) has joined #haskell
2016-01-11 21:01:20	Seblink	Hello, any suggestions how i can make the hamming method more readable using function chaining and '$'? http://lpaste.net/148835 I tried to edit it , but it won't compile.
2016-01-11 21:01:25	◀	bamboo (~bamboo@201-92-45-30.dsl.telesp.net.br) has quit (Quit: bamboo)
2016-01-11 21:01:43	▶	yqt (~yqt@81.88.230.28) has joined #haskell
2016-01-11 21:01:44	adamCS	I had a resolver issue when I first tried, got it working with that nightly, and then figured I change once more of the reflex stuff that I need is in the LTS snapshot. 
2016-01-11 21:01:47	andromeda-galaxy	ReinH: that's the one that uses the nrolland fork, right?
2016-01-11 21:02:01	ReinH	andromeda-galaxy: yes
2016-01-11 21:02:09	ReinH	well, it uses nrolland's ghcjs release
2016-01-11 21:02:29	▶	albertus1 (~albertus1@x55b47f74.dyn.telefonica.de) has joined #haskell
2016-01-11 21:02:31	andromeda-galaxy	ReinH: I've been trying to avoid downloading code from anyone but the main ghcjs repository
2016-01-11 21:02:49	andromeda-galaxy	ReinH: which is why I didn't just do that...
2016-01-11 21:02:49	◀	cheetah2 (~cheetah2@172.242.102.144) has quit (Remote host closed the connection)
2016-01-11 21:03:03	ReinH	Ok then. Good luck.
2016-01-11 21:03:26	andromeda-galaxy	ReinH: thanks anyway
2016-01-11 21:03:31	◀	nogic (~nogic@24-116-193-19.cpe.cableone.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-11 21:03:48	▶	koshmar (~koshmar@unaffiliated/koshmar) has joined #haskell
2016-01-11 21:03:50	▶	cheetah2 (~cheetah2@172.242.102.144) has joined #haskell
2016-01-11 21:04:14	▶	mlrutherford (~mlrutherf@solus-us.tk) has joined #haskell
2016-01-11 21:04:17	andromeda-galaxy	ReinH: my original question was about why ghcjs-boot has decided that it can't determine the version of my ghcjs executable
2016-01-11 21:04:28	▶	wowdog (~wowdog@s99-199-66-28.bc.hsia.telus.net) has joined #haskell
2016-01-11 21:04:30	andromeda-galaxy	even though ghcjs --version and ghcjs --numeric-version both work
2016-01-11 21:04:41	hexagoxel	til haskell Floats can be 64bits
2016-01-11 21:05:08	◀	darkf (~darkf___@unaffiliated/darkf) has quit (Quit: Leaving)
2016-01-11 21:05:36	◀	mlrutherford (~mlrutherf@solus-us.tk) has left #haskell
2016-01-11 21:05:42	▶	afalstin (~afalstin@179.7.75.92) has joined #haskell
2016-01-11 21:05:50	▶	fizruk (~anonymous@128-68-140-96.broadband.corbina.ru) has joined #haskell
2016-01-11 21:05:52	◀	zipper (~luv_panda@unaffiliated/zipper) has quit (Ping timeout: 260 seconds)
2016-01-11 21:06:30	◀	montanonic (~nicholas@c-98-246-188-73.hsd1.or.comcast.net) has quit (Ping timeout: 246 seconds)
2016-01-11 21:06:32	▶	amdi_ (~amdi_@150.212.124.115) has joined #haskell
2016-01-11 21:06:36	▶	vectorman68 (~kkkk@ip5f5add7a.dynamic.kabel-deutschland.de) has joined #haskell
2016-01-11 21:06:56	▶	L8D (~L8D@216.201.168.18) has joined #haskell
2016-01-11 21:07:22	◀	chaosmasttter (~chaosmast@p54B7F8CF.dip0.t-ipconnect.de) has quit (Ping timeout: 260 seconds)
2016-01-11 21:07:33	◀	tehgeekmeister (~tehgeekme@4a.3f.6132.ip4.static.sl-reverse.com) has quit (Ping timeout: 240 seconds)
2016-01-11 21:07:44	◀	nilg (~user@77.70.2.229) has quit (Remote host closed the connection)
2016-01-11 21:08:09	▶	oish (~charlie@159.22.169.217.in-addr.arpa) has joined #haskell
2016-01-11 21:08:19	◀	cheetah2 (~cheetah2@172.242.102.144) has quit (Remote host closed the connection)
2016-01-11 21:08:25	▶	xnil (~xnil@69.43.66.12) has joined #haskell
2016-01-11 21:08:39	▶	cheetah2 (~cheetah2@172.242.102.144) has joined #haskell
2016-01-11 21:08:46	▶	montanonic (~nicholas@c-98-246-188-73.hsd1.or.comcast.net) has joined #haskell
2016-01-11 21:10:20	hexagoxel	wait, but the storable sizeOf is 4? so peek . poke is not identity? meh
2016-01-11 21:10:35	◀	vlatkoB (~IRC_clien@unaffiliated/vlatkob) has quit (Remote host closed the connection)
2016-01-11 21:11:01	▶	astrofog (~astrofog@unaffiliated/astrofog) has joined #haskell
2016-01-11 21:11:16	hexagoxel	(and is there a Float32 like there is Int32 ?)
2016-01-11 21:11:28	ReinH	hexagoxel: so... sizeOf is 4 on architectures where Float happens to be 32 bits?
2016-01-11 21:11:36	ReinH	(which is, afaik, all of them)
2016-01-11 21:11:43	▶	mrmargolis (~mrmargoli@h69-128-47-52.mdsnwi.dedicated.static.tds.net) has joined #haskell
2016-01-11 21:11:50	▶	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has joined #haskell
2016-01-11 21:11:53	▶	gabriel_ (~gabriel@r167-62-129-27.dialup.adsl.anteldata.net.uy) has joined #haskell
2016-01-11 21:11:57	ReinH	do you have any evidence of sizeOf being 4 on an arch where Float is not 32 bits?
2016-01-11 21:12:07	hexagoxel	this system?
2016-01-11 21:12:11	▶	puregreen (~puregreen@nat4-minsk-pool-46-53-176-141.telecom.by) has joined #haskell
2016-01-11 21:12:30	▶	ziro` (~textual@154.58.99.105) has joined #haskell
2016-01-11 21:12:54	ReinH	which system?
2016-01-11 21:12:58	hexagoxel	system is 64bit
2016-01-11 21:13:02	ReinH	So?
2016-01-11 21:13:22	◀	gabriel__ (~gabriel@r167-62-119-184.dialup.adsl.anteldata.net.uy) has quit (Read error: Connection reset by peer)
2016-01-11 21:13:22	ReinH	That doesn't mean that Float is 64 bit.
2016-01-11 21:13:59	hexagoxel	ReinH: i am judging by the results from using wordToFloat from Data.Binary.IEEE754
2016-01-11 21:14:16	▶	pauliprice (~paulipric@207.251.103.46) has joined #haskell
2016-01-11 21:14:21	hexagoxel	(and unsafeCoercing between Float and Int32, but that is.. unsafe reasoning)
2016-01-11 21:14:55	ReinH	uh, Word32 and Int32 are both 32 bits.
2016-01-11 21:15:15	◀	dadaro (~androidde@78.173.207.153) has quit (Quit: Leaving)
2016-01-11 21:15:30	◀	oisdk_ (~oisdk_@95.45.70.25) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-11 21:15:42	ReinH	I'll bet you a nickel that Float on your system is 32bit and Double is 64bit.
2016-01-11 21:15:46	◀	Zekka (~zekka@ip24-251-69-145.ph.ph.cox.net) has quit (Ping timeout: 260 seconds)
2016-01-11 21:15:46	▶	rntz (~rntz@96.95.216.165) has joined #haskell
2016-01-11 21:15:52	◀	rntz (~rntz@96.95.216.165) has left #haskell
2016-01-11 21:16:01	hpc	float is always 32 bits
2016-01-11 21:16:04	▶	rntz (~rntz@96.95.216.165) has joined #haskell
2016-01-11 21:16:04	hpc	double is always 64
2016-01-11 21:16:15	hpc	(for practical values of "always")
2016-01-11 21:16:37	◀	csd_ (~chris@pool-108-30-122-128.nycmny.fios.verizon.net) has quit (Quit: Changing server)
2016-01-11 21:16:49	▶	xylen_ (~codywelsh@c-73-189-204-160.hsd1.ca.comcast.net) has joined #haskell
2016-01-11 21:16:51	hexagoxel	ok, my observation is this: i coerce (1::Int32) to Float. that should be the smallest possible non-zero positive number, right?
2016-01-11 21:16:52	andromeda-galaxy	hpc: for practical values of "always" -- I'm going to start using that
2016-01-11 21:16:54	▶	csd_ (~chris@pool-108-30-122-128.nycmny.fios.verizon.net) has joined #haskell
2016-01-11 21:17:09	◀	erikd (~erikd@hendrix.mega-nerd.net) has quit (Quit: disappearing into the sunset)
2016-01-11 21:17:14	hexagoxel	it prints "1.0e-45" here
2016-01-11 21:17:37	▶	marko______ (~markovirc@brod.es) has joined #haskell
2016-01-11 21:17:45	hexagoxel	ah wait, no
2016-01-11 21:18:02	hexagoxel	not the smallest possible
2016-01-11 21:18:03	hexagoxel	meh
2016-01-11 21:18:07	▶	jonathanfrias (~jonathanf@c-73-35-73-134.hsd1.fl.comcast.net) has joined #haskell
2016-01-11 21:18:11	▶	aartamonau (~shaleny@206.169.106.2) has joined #haskell
2016-01-11 21:18:27	▶	justanotheruser (~Justan@unaffiliated/justanotheruser) has joined #haskell
2016-01-11 21:18:35	ReinH	easiest nickel I ever almost made
2016-01-11 21:21:06	▶	dented42 (~dented42@155.99.110.193) has joined #haskell
2016-01-11 21:21:14	▶	choosetw1 (~jmeyer@208.92.248.25) has joined #haskell
2016-01-11 21:21:22	◀	choosetwo (~jmeyer@208.92.248.25) has quit (Ping timeout: 260 seconds)
2016-01-11 21:21:23	▶	yfeldblum (~yfeldblum@2620:10d:c090:180::1:349) has joined #haskell
2016-01-11 21:22:57	▶	refried__ (~textual@frontend.gtri.gatech.edu) has joined #haskell
2016-01-11 21:23:09	Jaxan	I have some type constructor X, and a map f : X a -> X b -> X (a, b), what kind of structure is that?
2016-01-11 21:23:14	▶	zachk (~foo@unaffiliated/zachk) has joined #haskell
2016-01-11 21:23:38	ReinH	Jaxan: a functor.
2016-01-11 21:23:52	ReinH	specifically, one equipped with a strength, which all functors are.
2016-01-11 21:23:54	Fuco	:t liftA2 (,)
2016-01-11 21:23:56	lambdabot	Applicative f => f a -> f b -> f (a, b)
2016-01-11 21:24:14	Jaxan	ReinH: you say that I can implement fmap from f?
2016-01-11 21:24:24	◀	yellow_apple (~yapple@31.135.115.52) has quit (Ping timeout: 276 seconds)
2016-01-11 21:24:50	Fuco	fmap for X?
2016-01-11 21:24:59	ReinH	Hmm.
2016-01-11 21:25:04	Ankhers	I don't understand how that can be considered a functor.
2016-01-11 21:25:13	◀	nerfando (~textual@177.220.182.50) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-11 21:25:28	Ankhers	Automatically considered a functor*
2016-01-11 21:25:33	ℹ	icen1 is now known as icen
2016-01-11 21:25:44	◀	Ab123 (0e8b7a72@gateway/web/freenode/ip.14.139.122.114) has quit (Quit: Page closed)
2016-01-11 21:25:48	▶	roelof (524acd6d@gateway/web/freenode/ip.82.74.205.109) has joined #haskell
2016-01-11 21:26:07	▶	micmus (~micmus@088156129087.dynamic-ww-1.vectranet.pl) has joined #haskell
2016-01-11 21:26:30	▶	pie_ (~pie_@unaffiliated/pie-/x-0787662) has joined #haskell
2016-01-11 21:27:01	Jaxan	So it might be something weaker
2016-01-11 21:27:10	ReinH	Yeah, strength is a -> X b -> X (a, b)
2016-01-11 21:27:12	ReinH	sorry
2016-01-11 21:27:13	roelof	Hello, I have a map with a integer. Now I want to add, let's say 2 to it. When I do map.update ( + 2)  number  numbers I see that it will not work because +2 needs to be a string 
2016-01-11 21:27:24	roelof	How can I solve this ?
2016-01-11 21:27:53	ReinH	roelof: why does (+2) need to be a string?
2016-01-11 21:27:58	▶	chaosmasttter (~chaosmast@p54B7F8CF.dip0.t-ipconnect.de) has joined #haskell
2016-01-11 21:28:10	◀	ril (~ril@c-98-210-195-123.hsd1.ca.comcast.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-11 21:29:06	▶	yellow_apple (~yapple@31.135.115.52) has joined #haskell
2016-01-11 21:29:17	roelof	ReinH:  I think that because of this error message : http://lpaste.net/148839
2016-01-11 21:29:17	Jaxan	So in the ByteString package, this class is called Monoidal: http://hackage.haskell.org/package/bytestring-0.10.6.0/docs/src/Data.ByteString.Builder.Prim.Internal.html#Monoidal
2016-01-11 21:29:19	⚡	hackagebot buffer-pipe 0.0 - Read from stdin and write to stdout in large blocks  https://hackage.haskell.org/package/buffer-pipe-0.0 (HenningThielemann)
2016-01-11 21:29:25	▶	zipper (~luv_panda@unaffiliated/zipper) has joined #haskell
2016-01-11 21:29:26	ReinH	X a -> X b -> X (a, b) is one side of an isomorphism needed to have a strong monoidal functor.
2016-01-11 21:29:39	hexagoxel	ReinH: well i am glad you are right
2016-01-11 21:29:50	ReinH	roelof: you haven't included the context we need to solve your question
2016-01-11 21:30:07	glittershark_	roelof: what's the map itself look like?
2016-01-11 21:30:13	◀	yellow_apple (~yapple@31.135.115.52) has quit (Client Quit)
2016-01-11 21:30:18	roelof	and the type definition of Map.update : adjust :: Ord k => (a -> a) -> k -> Map k a -> Map k a
2016-01-11 21:30:28	ReinH	Yes, we know what update is. What are *your* types?
2016-01-11 21:30:43	andromeda-galaxy	roelof: the first argument to Map.update is (a -> Maybe a)
2016-01-11 21:30:50	andromeda-galaxy	roelof: not (a -> a)
2016-01-11 21:30:59	ReinH	We don't know why Strings should be involved at all.
2016-01-11 21:31:04	glittershark_	yeah, you could just `return . (+ amountToDeposit)` there
2016-01-11 21:31:12	glittershark_	or `Just . (+ amountToDeposit)`
2016-01-11 21:31:13	andromeda-galaxy	ReinH: true
2016-01-11 21:31:40	andromeda-galaxy	roelof: what are the types of name and accts?
2016-01-11 21:31:42	ReinH	if the error is that a -> a should be a -> Maybe a then yes, you can stick a return on it.
2016-01-11 21:31:47	roelof	here is I think all the relevant code : http://lpaste.net/148840
2016-01-11 21:32:03	zipper	Can anyone tell me why my websocket server isn't sending data to the client here: https://gist.github.com/urbanslug/9afc750080003b6d440d
2016-01-11 21:32:06	◀	kurt11 (~Adium@207.191.34.198) has quit (Quit: Leaving.)
2016-01-11 21:32:23	▶	Bor0 (~boro@unaffiliated/boro/x-000000001) has joined #haskell
2016-01-11 21:32:41	▶	timwilkens (~timwilken@cpe-76-88-64-94.san.res.rr.com) has joined #haskell
2016-01-11 21:33:22	roelof	name is Maybe Account is accts is   type AccountStore' = Map.Map String Account
2016-01-11 21:33:30	andromeda-galaxy	roelof: for one thing, the values of accts are Account values, not numbers
2016-01-11 21:33:53	◀	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 240 seconds)
2016-01-11 21:34:01	◀	amdi_ (~amdi_@150.212.124.115) has quit (Quit: Leaving)
2016-01-11 21:34:05	ReinH	Well
2016-01-11 21:34:07	▶	bollullera (~anuxi@95.63.152.106) has joined #haskell
2016-01-11 21:34:09	ReinH	There are a few problems here
2016-01-11 21:34:14	ReinH	amountToDeposit is not a number
2016-01-11 21:34:18	ReinH	accounts are not numbers
2016-01-11 21:34:19	▶	kurt11 (~Adium@207.191.34.198) has joined #haskell
2016-01-11 21:34:21	andromeda-galaxy	(+2) :: Num a => a -> a
2016-01-11 21:34:21	roelof	andromeda-galaxy:  oke, so I have to pull out the amount to add the new integer 
2016-01-11 21:34:45	glittershark_	zipper: could be the /socketserver URL
2016-01-11 21:34:45	◀	usershell (~usershell@41.136.108.86) has quit (Read error: Connection reset by peer)
2016-01-11 21:34:48	ReinH	you need to convert amountToDeposit into a number and you are updating an account, not a number
2016-01-11 21:34:50	andromeda-galaxy	roeelof: as ReinH mentioned, also amountToDeposit is a string
2016-01-11 21:34:51	◀	zachk (~foo@unaffiliated/zachk) has quit (Ping timeout: 250 seconds)
2016-01-11 21:34:58	glittershark_	zipper: also maybe that you're connecting to www.example.com
2016-01-11 21:35:04	andromeda-galaxy	also, name :: Maybe String needs to be name :: String
2016-01-11 21:35:42	roelof	Can I do amountToDeposit::Integer   ?? 
2016-01-11 21:35:46	▶	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2016-01-11 21:35:51	ReinH	No.
2016-01-11 21:35:54	ReinH	Because it is a String.
2016-01-11 21:36:01	ReinH	:t getLine
2016-01-11 21:36:03	lambdabot	IO String
2016-01-11 21:36:10	glittershark_	you need to `read` it
2016-01-11 21:36:24	◀	Black-Wolf (~Black-Wol@114.139.61.94.rev.vodafone.pt) has quit (Quit: \m/)
2016-01-11 21:36:30	roelof	stupid I have to use (read amountToDeposit::Integer) 
2016-01-11 21:36:32	ReinH	roelof: there is a lot of logic involved in adding a transaction to an account
2016-01-11 21:36:33	andromeda-galaxy	glittershark_, roelof: readMaybe is better than read, thoughtpolice
2016-01-11 21:36:39	glittershark_	well, yeah
2016-01-11 21:36:42	ReinH	you have to update the amount, you have to add a Transaction to the list, etc
2016-01-11 21:37:06	zipper	OMG
2016-01-11 21:37:15	▶	zariuq (~zar@86.58.143.146) has joined #haskell
2016-01-11 21:37:16	zipper	glittershark_: Such a URL
2016-01-11 21:37:17	◀	timwilkens (~timwilken@cpe-76-88-64-94.san.res.rr.com) has quit (Ping timeout: 256 seconds)
2016-01-11 21:37:19	▶	usershell (~usershell@41.136.108.86) has joined #haskell
2016-01-11 21:37:21	zipper	How did I miss that
2016-01-11 21:37:22	ReinH	roelof: this would be easier if you wrote a function addTransaction :: Account -> Integer -> String -> Account that does this for you.
2016-01-11 21:37:23	glittershark_	zipper: :)
2016-01-11 21:37:44	ReinH	or s/Integer/Amount, which is the same thing
2016-01-11 21:38:01	▶	Ziltrum (~Destol@public-250-220.nat.utoronto.ca) has joined #haskell
2016-01-11 21:38:04	◀	usershell (~usershell@41.136.108.86) has quit (Remote host closed the connection)
2016-01-11 21:38:21	◀	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Ping timeout: 265 seconds)
2016-01-11 21:38:29	glittershark_	is there a typeclass in base or a well-used package for a type that can be converted to and from booleans?
2016-01-11 21:38:36	ReinH	Also, if you have no intention of removing keys from your map, you do not need update. You only need adjust.
2016-01-11 21:38:46	▶	josdeha_rt (~josdehart@535299F3.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2016-01-11 21:38:59	▶	zachk (~foo@pool-108-26-38-204.syrcny.east.verizon.net) has joined #haskell
2016-01-11 21:38:59	◀	zachk (~foo@pool-108-26-38-204.syrcny.east.verizon.net) has quit (Changing host)
2016-01-11 21:38:59	▶	zachk (~foo@unaffiliated/zachk) has joined #haskell
2016-01-11 21:38:59	◀	zachk (~foo@unaffiliated/zachk) has quit (Excess Flood)
2016-01-11 21:39:12	▶	caecilius (~caecilius@bdv75-9-88-165-92-126.fbx.proxad.net) has joined #haskell
2016-01-11 21:39:14	▶	zachk (~foo@pool-108-26-38-204.syrcny.east.verizon.net) has joined #haskell
2016-01-11 21:39:14	◀	zachk (~foo@pool-108-26-38-204.syrcny.east.verizon.net) has quit (Changing host)
2016-01-11 21:39:14	▶	zachk (~foo@unaffiliated/zachk) has joined #haskell
2016-01-11 21:39:15	◀	zachk (~foo@unaffiliated/zachk) has quit (Excess Flood)
2016-01-11 21:39:18	ReinH	You also don't need to specifically test for the existence of the key: if it does not exist, the map will be returned unchanged.
2016-01-11 21:39:21	⚡	hackagebot multiset 0.3.1 - The Data.MultiSet container type  https://hackage.haskell.org/package/multiset-0.3.1 (TwanVanLaarhoven)
2016-01-11 21:39:35	▶	zachk (~foo@pool-108-26-38-204.syrcny.east.verizon.net) has joined #haskell
2016-01-11 21:39:35	◀	zachk (~foo@pool-108-26-38-204.syrcny.east.verizon.net) has quit (Max SendQ exceeded)
2016-01-11 21:39:47	ℹ	irc: disconnected from server
2016-01-12 20:42:20	▶	psyq (~Psyq@unaffiliated/psyq) has joined #haskell
2016-01-12 20:42:20	ℹ	Topic for #haskell is "http://www.haskell.org/ | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | http://reddit.com/r/haskell | Administrative issues: #haskell-ops | Hackage status? http://status.haskell.org | http://downloads.haskell.org"
2016-01-12 20:42:20	ℹ	Topic set by quicksilver on Wed, 07 Oct 2015 16:39:51
2016-01-12 20:42:20	ℹ	Channel #haskell: 1550 nicks (1 op, 0 voices, 1549 normals)
2016-01-12 20:42:21	ℹ	URL for #haskell: http://www.haskell.org/
2016-01-12 20:42:28	geekosaur	csd_, when tracking type variables through unification it tries to use the same variables the definition did. but if two definitions used the same type vars (or it's using the same definition twice or etc.) one of them must be renamed
2016-01-12 20:42:31	▶	pbgc (~pbgc@bl21-152-17.dsl.telepac.pt) has joined #haskell
2016-01-12 20:42:31	▶	eis_ (~eis@64.201.244.6) has joined #haskell
2016-01-12 20:42:31	◀	xpilot (126f4cb2@gateway/web/freenode/ip.18.111.76.178) has quit (Ping timeout: 252 seconds)
2016-01-12 20:42:34	▶	cargill (~ondra@host86-182-2-170.range86-182.btcentralplus.com) has joined #haskell
2016-01-12 20:42:46	ℹ	Channel created on Sun, 26 Nov 2006 07:42:48
2016-01-12 20:42:50	◀	eis_ (~eis@64.201.244.6) has quit (Client Quit)
2016-01-12 20:42:50	◀	mister-metaphor (~mister-me@64.201.244.6) has quit (Client Quit)
2016-01-12 20:42:59	▶	mrowe_away (~mrowe@markab.mojain.net) has joined #haskell
2016-01-12 20:43:07	▶	eis_ (~eis@64.201.244.6) has joined #haskell
2016-01-12 20:43:07	◀	eis_ (~eis@64.201.244.6) has quit (Client Quit)
2016-01-12 20:43:17	geekosaur	if it can't unify them directly
2016-01-12 20:43:29	▶	eis_ (~eis@64.201.244.6) has joined #haskell
2016-01-12 20:43:29	◀	eis_ (~eis@64.201.244.6) has quit (Client Quit)
2016-01-12 20:43:33	◀	grouzen (~grouzen@diagonal-interview.volia.net) has quit (Ping timeout: 240 seconds)
2016-01-12 20:43:39	▶	perspectival (~perspecti@ip-94-113-221-156.net.upcbroadband.cz) has joined #haskell
2016-01-12 20:43:45	▶	eis_ (~eis@64.201.244.6) has joined #haskell
2016-01-12 20:43:46	csd_	so it's after an error / type check failure?
2016-01-12 20:43:57	◀	kgadek (~kgadek@atp197.neoplus.adsl.tpnet.pl) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-12 20:44:00	geekosaur	...?
2016-01-12 20:44:01	▶	jbgi (~jbgi@84-72-168-7.dclient.hispeed.ch) has joined #haskell
2016-01-12 20:44:19	▶	goodacre-liam (~goodacre-@host-92-29-243-41.as13285.net) has joined #haskell
2016-01-12 20:44:21	monochrom	I don't think "before vs after" is important or even observable
2016-01-12 20:44:23	▶	BlueRavenGT (~BlueRaven@8-22-13-219.utopiafiber.net) has joined #haskell
2016-01-12 20:44:25	ReinH	orion: what is F? Show us your code.
2016-01-12 20:44:40	▶	kurt11 (~Adium@207.191.34.198) has joined #haskell
2016-01-12 20:45:12	geekosaur	only in the sense that the names only matter for error reporting
2016-01-12 20:45:18	◀	jbgi (~jbgi@84-72-168-7.dclient.hispeed.ch) has quit (Client Quit)
2016-01-12 20:45:32	orion	ReinH: F is http://hackage.haskell.org/package/free-4.12.1/docs/Control-Monad-Free-Church.html#t:F
2016-01-12 20:45:55	monochrom	yeah, by the time an error message says both "a" and "a1", it means "some human thought they were the same. wrong."
2016-01-12 20:45:58	csd_	i guess i dont understand well enough how GHC works to understand your response
2016-01-12 20:46:03	bollu	Cale: I'm sorry I DC'd the other day and never came back when you were teaching me HoTT. Something came up and I had to leave :)
2016-01-12 20:46:11	▶	pavolzetor (9b6213cd@gateway/web/freenode/ip.155.98.19.205) has joined #haskell
2016-01-12 20:46:17	▶	amyers (~icarus127@pool-71-114-134-219.hrbgpa.dsl-w.verizon.net) has joined #haskell
2016-01-12 20:46:20	◀	cdg (~cdg@157.166.175.129) has quit (Remote host closed the connection)
2016-01-12 20:46:26	◀	amyers (~icarus127@pool-71-114-134-219.hrbgpa.dsl-w.verizon.net) has quit (Read error: Connection reset by peer)
2016-01-12 20:46:46	geekosaur	ghc wants you to be able to relate an error message to what you wrote, so it tries to remember the names of type variables. type unification regularly must invent new type variables for use in constraining the types of expressions
2016-01-12 20:46:55	▶	cdg (~cdg@157.166.175.129) has joined #haskell
2016-01-12 20:47:31	Zekka|Sigfig	Imagine if you feed ‘id’ to ‘id’
2016-01-12 20:47:35	Zekka|Sigfig	:t id
2016-01-12 20:47:36	lambdabot	a -> a
2016-01-12 20:47:43	▶	jbgi (~jbgi@84-72-168-7.dclient.hispeed.ch) has joined #haskell
2016-01-12 20:47:55	csd_	:t id id
2016-01-12 20:47:55	Zekka|Sigfig	The a in the first id now corresponds to the type of hte second id, but the second ‘id’ also has an a in it
2016-01-12 20:47:56	lambdabot	a -> a
2016-01-12 20:48:11	◀	ramky (~ramky@114.143.67.5) has quit (Quit: Leaving)
2016-01-12 20:48:14	▶	jbiesnecker (~textual@199.201.64.129) has joined #haskell
2016-01-12 20:48:15	geekosaur	that's not the best example since it can directly unify them
2016-01-12 20:48:21	Zekka|Sigfig	Oh wow! It didn’t introduce any gensyms
2016-01-12 20:48:26	Zekka|Sigfig	:t const const
2016-01-12 20:48:27	lambdabot	b -> a -> b1 -> a
2016-01-12 20:48:31	Zekka|Sigfig	There!
2016-01-12 20:48:33	Zekka|Sigfig	:t const
2016-01-12 20:48:35	lambdabot	a -> b -> a
2016-01-12 20:48:45	geekosaur	right, there's a good example
2016-01-12 20:48:46	Zekka|Sigfig	Both ‘const’s take an extra b — but those bs don’t necessarily have to be the same
2016-01-12 20:48:48	▶	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has joined #haskell
2016-01-12 20:48:54	◀	asmyers (~icarus127@pool-71-113-129-233.hrbgpa.fios.verizon.net) has quit (Ping timeout: 265 seconds)
2016-01-12 20:48:55	◀	josdeha_rt (~josdehart@535299F3.cm-6-3c.dynamic.ziggo.nl) has quit (Quit: josdeha_rt)
2016-01-12 20:49:11	Zekka|Sigfig	@src const
2016-01-12 20:49:11	◀	Geraldus__ (~Geraldus@213.59.131.114) has quit (Remote host closed the connection)
2016-01-12 20:49:12	lambdabot	const x _ = x
2016-01-12 20:49:15	Zekka|Sigfig	(as a refresher)
2016-01-12 20:49:24	csd_	meaning that the type of b doesnt have to be the same? 
2016-01-12 20:49:36	Zekka|Sigfig	Yeah. We named them both ‘b’ but they can be different
2016-01-12 20:49:42	geekosaur	so the second one can't be "b" because "b" is already in use and it can't prove that they're the same type (in fact they aren't), so the second one is renamed to b1 to indicate that it's a different type
2016-01-12 20:49:43	csd_	and if the one b were c then it would mean they couldnt be the same
2016-01-12 20:49:46	Zekka|Sigfig	the b for the first const doesn’t always haev to be the same as the b for the second const
2016-01-12 20:50:02	◀	quchen (~quchen@ipb21a1330.dynamic.kabel-deutschland.de) has quit (Ping timeout: 240 seconds)
2016-01-12 20:50:33	▶	doomlord (~textual@host86-153-157-188.range86-153.btcentralplus.com) has joined #haskell
2016-01-12 20:50:46	▶	griotspeak (~textual@c-73-237-161-156.hsd1.ga.comcast.net) has joined #haskell
2016-01-12 20:51:41	◀	pbgc (~pbgc@bl21-152-17.dsl.telepac.pt) has quit (Quit: Computer has gone to sleep.)
2016-01-12 20:51:48	▶	glittershark_ (~griffin@38.108.221.50) has joined #haskell
2016-01-12 20:51:55	◀	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has quit (Remote host closed the connection)
2016-01-12 20:51:59	◀	glittershark (~griffin@38.108.221.50) has quit (Quit: leaving)
2016-01-12 20:52:05	◀	glittershark_ (~griffin@38.108.221.50) has quit (Remote host closed the connection)
2016-01-12 20:52:21	◀	cdg (~cdg@157.166.175.129) has quit (Ping timeout: 250 seconds)
2016-01-12 20:52:46	▶	glittershark (~griffin@38.108.221.50) has joined #haskell
2016-01-12 20:53:06	◀	poopiefacetomato (~rikonor@128.177.123.162) has quit (Remote host closed the connection)
2016-01-12 20:53:08	▶	realloc (~realloc@unaffiliated/realloc) has joined #haskell
2016-01-12 20:53:59	monochrom	const const has "two b's" in the exact same sense that "sin (sin 2)" has "two x's"
2016-01-12 20:54:29	▶	ril (~ril@c-98-210-195-123.hsd1.ca.comcast.net) has joined #haskell
2016-01-12 20:55:10	◀	pavolzetor (9b6213cd@gateway/web/freenode/ip.155.98.19.205) has quit (Ping timeout: 252 seconds)
2016-01-12 20:55:40	▶	jay6981 (~Adium@2601:646:8d01:7f7d:fcab:46b5:7170:d01d) has joined #haskell
2016-01-12 20:57:48	◀	fizbin (~Adium@pool-96-235-153-152.cmdnnj.east.verizon.net) has quit (Quit: Leaving.)
2016-01-12 20:57:49	ℹ	ril is now known as ril[away]
2016-01-12 20:57:56	ℹ	ril[away] is now known as ril
2016-01-12 20:58:08	◀	stef204 (~stef204@unaffiliated/stef-204/x-384198) has quit (Quit: WeeChat 1.3)
2016-01-12 20:58:13	◀	rasen (~rasen@impressed.contract.volia.net) has quit (Ping timeout: 240 seconds)
2016-01-12 20:58:42	◀	lemur (~baweaver@173.230.196.25) has quit (Remote host closed the connection)
2016-01-12 20:59:17	◀	Itkovian_ (~Itkovian@178-117-76-63.access.telenet.be) has quit (Ping timeout: 250 seconds)
2016-01-12 21:00:19	◀	hellertime (~hellertim@pool-173-48-56-241.bstnma.fios.verizon.net) has quit (Quit: Leaving.)
2016-01-12 21:00:33	◀	oish (~charlie@217.38.156.28) has quit (Ping timeout: 240 seconds)
2016-01-12 21:00:33	◀	derekbrown (~derekbrow@52.5.195.72) has left #haskell
2016-01-12 21:00:46	◀	glittershark (~griffin@38.108.221.50) has quit (Remote host closed the connection)
2016-01-12 21:01:21	▶	zeroed (~zeroed@93-34-203-146.ip51.fastwebnet.it) has joined #haskell
2016-01-12 21:01:21	◀	zeroed (~zeroed@93-34-203-146.ip51.fastwebnet.it) has quit (Changing host)
2016-01-12 21:01:21	▶	zeroed (~zeroed@unaffiliated/zeroed) has joined #haskell
2016-01-12 21:01:26	ℹ	ril is now known as ril[away]
2016-01-12 21:01:53	obadz	what's the best source of documentation to understand how to productively use type families?
2016-01-12 21:02:22	⚡	hackagebot rethinkdb-client-driver 0.0.21 - Client driver for RethinkDB  https://hackage.haskell.org/package/rethinkdb-client-driver-0.0.21 (wereHamster)
2016-01-12 21:02:26	ℹ	ril[away] is now known as ril
2016-01-12 21:02:54	monochrom	what is extra in "productively use" that is not already in just "use"?
2016-01-12 21:03:20	▶	hannelita (~hannelita@2804:14c:a8:27a5:a842:bbb8:fcef:86af) has joined #haskell
2016-01-12 21:03:24	obadz	monochrom: it's not what's extra, it's what's missing... I'm not trying to understand any more theory than needed to use productively
2016-01-12 21:03:41	cocreature	obadz: just use them when you feel you need them
2016-01-12 21:03:43	cocreature	that’s it
2016-01-12 21:03:45	cocreature	done
2016-01-12 21:03:52	geekosaur	there's always use for the sake of use as opposed to use for an actual purpose
2016-01-12 21:03:55	obadz	cocreature: I'm not asking when to use, I'm asking where to find documentation..
2016-01-12 21:04:10	monochrom	the GHC user's guide has syntax semantics and example uses. no theory.
2016-01-12 21:04:30	◀	bamboo (~bamboo@201-92-45-30.dsl.telesp.net.br) has quit (Quit: bamboo)
2016-01-12 21:04:39	obadz	https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/type-families.html ? Will read.
2016-01-12 21:04:59	ℹ	ril is now known as ril[away]
2016-01-12 21:05:17	▶	glittershark (~griffin@38.108.221.50) has joined #haskell
2016-01-12 21:05:18	monochrom	you probably also has it on your hard disk
2016-01-12 21:05:26	monochrom	it comes with normal GHC installations
2016-01-12 21:06:05	obadz	yes /nix/store/7hnlpxpmpka84zrhyq7z11bs0q3vgak1-ghc-7.10.2/share/doc/ghc/html/users_guide/type-families.html :)
2016-01-12 21:06:12	▶	insitu (~textual@105.196.201.77.rev.sfr.net) has joined #haskell
2016-01-12 21:06:18	obadz	any enlightening youtube videos?
2016-01-12 21:06:29	◀	darkf (~darkf___@unaffiliated/darkf) has quit (Quit: Leaving)
2016-01-12 21:06:53	▶	AndriusBartulis (~andriusb@cpc14-hawk12-2-0-cust18.18-1.cable.virginm.net) has joined #haskell
2016-01-12 21:07:31	▶	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has joined #haskell
2016-01-12 21:07:33	◀	hannelita (~hannelita@2804:14c:a8:27a5:a842:bbb8:fcef:86af) has quit (Ping timeout: 240 seconds)
2016-01-12 21:07:37	⚡	hackagebot ipopt-hs 0.5.1.0 - haskell binding to ipopt and nlopt including automatic differentiation  https://hackage.haskell.org/package/ipopt-hs-0.5.1.0 (AdamVogt)
2016-01-12 21:07:45	◀	Zekka|Sigfig (~zekka@wsip-70-184-90-138.ph.ph.cox.net) has quit (Quit: Zekka|Sigfig)
2016-01-12 21:07:54	◀	erochester (~Adium@d-128-167-72.bootp.Virginia.EDU) has left #haskell
2016-01-12 21:08:10	bitemyapp	obadz: I think mono-traversable shows off one use-case
2016-01-12 21:08:14	▶	chenshen (~chenshen@199.201.64.136) has joined #haskell
2016-01-12 21:08:30	▶	pavolzetor (9b6213cd@gateway/web/freenode/ip.155.98.19.205) has joined #haskell
2016-01-12 21:09:03	ReinH	obadz: maybe https://ocharles.org.uk/blog/posts/2014-12-12-type-families.html
2016-01-12 21:09:04	pavolzetor	Text.Pandoc.Definition does not build on 4GB of ram
2016-01-12 21:09:05	◀	Th30n (~Th30n@83-131-19-85.adsl.net.t-com.hr) has quit (Quit: leaving)
2016-01-12 21:09:11	pavolzetor	is this a GHC bug?
2016-01-12 21:09:28	ReinH	4GB is not necessarily a bug.
2016-01-12 21:09:35	▶	x_pilot (~vlad@dhcp-18-111-51-137.dyn.mit.edu) has joined #haskell
2016-01-12 21:09:36	◀	rcat (~us3r@host86-164-41-241.range86-164.btcentralplus.com) has quit (Remote host closed the connection)
2016-01-12 21:09:39	ReinH	I've seen GHC take that much RAM before.
2016-01-12 21:09:51	◀	aartamonau (~shaleny@206.169.106.2) has quit (Quit: Leaving.)
2016-01-12 21:09:58	pavolzetor	so how am I supposed to use pandoc?
2016-01-12 21:10:01	▶	poopiefacetomato (~rikonor@128.177.123.162) has joined #haskell
2016-01-12 21:10:08	◀	Elish (~x@unaffiliated/elish) has quit (Quit: Elish)
2016-01-12 21:10:15	◀	delYsid (~user@debian/developer/mlang) has quit (Ping timeout: 246 seconds)
2016-01-12 21:10:24	Clint	apt install pandoc
2016-01-12 21:10:27	◀	techy (~u0_a121@50.153.134.160) has quit (Read error: Connection reset by peer)
2016-01-12 21:10:30	◀	choosetw1 (~jmeyer@208.92.248.25) has quit (Ping timeout: 264 seconds)
2016-01-12 21:10:33	pavolzetor	gentoo
2016-01-12 21:10:52	▶	techy (~u0_a121@50.153.134.160) has joined #haskell
2016-01-12 21:10:58	pavolzetor	I think that is unacceptable to use that much ram
2016-01-12 21:11:03	zachk	emerge pandoc? 
2016-01-12 21:11:17	pavolzetor	zachk: that runs out of memory
2016-01-12 21:11:23	▶	greg` (~user@141.228.17.193) has joined #haskell
2016-01-12 21:11:28	zachk	ghc binaries wouldn't even fit in my original pc's ram
2016-01-12 21:11:49	▶	caecilius (~caecilius@bdv75-9-88-165-92-126.fbx.proxad.net) has joined #haskell
2016-01-12 21:11:52	greg`	s3.amazon.com is blocked from my firewall at work ,anyone know how to get stack to work without it?
2016-01-12 21:12:02	glittershark	who the heck blocks s3 at work
2016-01-12 21:12:06	◀	joel-dice (~dicej@184-96-51-14.hlrn.qwest.net) has quit (Ping timeout: 265 seconds)
2016-01-12 21:12:08	xplat|work	pavolzetor: use it as a web service?
2016-01-12 21:12:30	ℹ	Sornaensis is now known as NUMIDIUM
2016-01-12 21:12:47	◀	centrinia (~centrinia@2602:306:bd0d:a690:f5b3:b0dc:627b:8720) has quit (Quit: Leaving)
2016-01-12 21:12:56	obadz	ReinH: thx
2016-01-12 21:12:59	pavolzetor	zachk: I know, but 4 GB of ram is a lot
2016-01-12 21:13:09	zachk	used to be 
2016-01-12 21:13:16	pavolzetor	I never had a problem with any compiler in my life for which it was not enough
2016-01-12 21:13:24	glittershark	pandoc is huge, fwiw
2016-01-12 21:13:31	◀	Zekka (~zekka@70.184.90.138) has quit (Ping timeout: 272 seconds)
2016-01-12 21:13:35	ℹ	ril[away] is now known as ril
2016-01-12 21:13:47	▶	meoblast001 (~meoblast@cable-95-168-133-160.cust.telecolumbus.net) has joined #haskell
2016-01-12 21:13:55	greg`	no kinda stack offline mode then i take it
2016-01-12 21:14:22	Ankhers	greg`: You could technically build the entirety of stackage.
2016-01-12 21:14:28	◀	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has quit (Remote host closed the connection)
2016-01-12 21:14:31	greg`	uhmmmm.....
2016-01-12 21:14:35	◀	jay6981 (~Adium@2601:646:8d01:7f7d:fcab:46b5:7170:d01d) has quit (Quit: Leaving.)
2016-01-12 21:14:43	greg`	any other proxies?
2016-01-12 21:14:44	▶	pbgc (~pbgc@bl21-152-17.dsl.telepac.pt) has joined #haskell
2016-01-12 21:14:51	greg`	or mirrors?
2016-01-12 21:14:54	pavolzetor	I am going to report a bug; this is just silly argument to say 4GB is not enough
2016-01-12 21:14:57	◀	chaosmasttter (~chaosmast@p54B7F8CF.dip0.t-ipconnect.de) has quit (Ping timeout: 260 seconds)
2016-01-12 21:15:00	◀	michas_ (~michas@p4FCA73B9.dip0.t-ipconnect.de) has quit (Ping timeout: 265 seconds)
2016-01-12 21:15:09	◀	thc202 (~thc202@unaffiliated/thc202) has quit (Read error: Connection reset by peer)
2016-01-12 21:15:13	▶	Church- (~hatter@unaffiliated/church-) has joined #haskell
2016-01-12 21:15:18	◀	Xack (znc@unaffiliated/matrixiumn) has quit (Quit: Bæ provides this ZNC for me <3)
2016-01-12 21:15:28	glittershark	maybe it's possible to run GHC itself with RTS opts?
2016-01-12 21:15:29	greg`	pavolzetor: sorry i came late 4GB is not enough for what?
2016-01-12 21:15:29	▶	Xack (bae@unaffiliated/matrixiumn) has joined #haskell
2016-01-12 21:15:35	glittershark	building pandoc
2016-01-12 21:15:47	glittershark	4GB of RAM, specifically
2016-01-12 21:16:07	▶	nkaretnikov (~nikita@unaffiliated/nkar) has joined #haskell
2016-01-12 21:16:30	◀	Lord_of_Life (Elite12246@gateway/shell/elitebnc/x-khrgerneubzwcjgx) has quit (Ping timeout: 264 seconds)
2016-01-12 21:16:41	◀	jbiesnecker (~textual@199.201.64.129) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-12 21:16:44	greg`	most likely the bug will be ignored until 4GB is a laughably small amount of memory 
2016-01-12 21:16:48	ReinH	pavolzetor: there's no bug
2016-01-12 21:17:05	ReinH	It is obviously not silly, since GHC is using that much RAM
2016-01-12 21:17:20	zachk	is there a dev build option for it?
2016-01-12 21:17:21	glittershark	pavolzetor: cabal build --ghc-options='+RTS -M2G -RTS'
2016-01-12 21:17:24	glittershark	works for me
2016-01-12 21:17:24	▶	athan (~athan_@70-91-172-238-BusName-Colorado.hfc.comcastbusiness.net) has joined #haskell
2016-01-12 21:17:28	zachk	try shutting off -O2 etc
2016-01-12 21:17:29	▶	grouzen (~grouzen@diagonal-interview.volia.net) has joined #haskell
2016-01-12 21:17:46	glittershark	ghc itself uses the ghc runtime to run
2016-01-12 21:17:53	▶	me_ (~me@97-100-73-213.res.bhn.net) has joined #haskell
2016-01-12 21:17:55	◀	sdothum (~sdothum@108.63.133.5) has quit (Quit: ZNC - 1.6.0 - http://znc.in)
2016-01-12 21:18:09	me_	is BONUS here?
2016-01-12 21:18:45	▶	Paks (~paks@c-71-239-122-174.hsd1.il.comcast.net) has joined #haskell
2016-01-12 21:18:51	▶	sdothum (~sdothum@108.63.133.5) has joined #haskell
2016-01-12 21:18:53	pavolzetor	greg: pretty sad
2016-01-12 21:18:56	x_pilot	anyone used opengl before?
2016-01-12 21:19:08	ReinH	pavolzetor: ok.
2016-01-12 21:19:25	x_pilot	I'm trying to figure out how to render 3d scenes directly to images/files
2016-01-12 21:19:27	▶	vijaykiran (~user@52D90D03.cm-11-1a.dynamic.ziggo.nl) has joined #haskell
2016-01-12 21:19:31	pavolzetor	ReinH: I want to know why it needs so much RAM? Does it justifiably use it or just wastes it?
2016-01-12 21:19:31	greg`	finally getting my head around category theory , but still struggle with its practical application
2016-01-12 21:19:34	zachk	x_pilot in haskell? I have, if you want to play around with 2d stuff try gloss 
2016-01-12 21:19:41	dedgrant	Why does building pandoc with GHC take as much RAM as it does?  I've heard similar complaints from others with figures varying from 2GB to 4GB.
2016-01-12 21:19:48	zachk	juicy-pixels might be of help 
2016-01-12 21:19:50	x_pilot	zachk: yeah in haskell
2016-01-12 21:19:59	ReinH	pavolzetor: I'm sure it just allocates 3GB of garbage to annoy you.
2016-01-12 21:20:09	x_pilot	I found a package called not-gloss which seems to work pretty well
2016-01-12 21:20:16	greg`	lol
2016-01-12 21:20:35	◀	vijaykiran (~user@52D90D03.cm-11-1a.dynamic.ziggo.nl) has quit (Remote host closed the connection)
2016-01-12 21:20:39	◀	me_ (~me@97-100-73-213.res.bhn.net) has quit (Client Quit)
2016-01-12 21:20:39	ReinH	I've regularly seen it take that much RAM when building complex projects, especially with high levels of optimization
2016-01-12 21:20:41	pavolzetor	zachk: I will try, it without -O2
2016-01-12 21:20:49	x_pilot	zachk: gloss is 2D only right? not-gloss is supposed to be gloss but 3D
2016-01-12 21:20:58	ReinH	There are some pathological cases that can cause the typechecker to consume a huge amount of space, but 4GB is not pathological.
2016-01-12 21:21:02	◀	nkaretnikov (~nikita@unaffiliated/nkar) has quit (Ping timeout: 240 seconds)
2016-01-12 21:21:04	▶	thc202 (~thc202@unaffiliated/thc202) has joined #haskell
2016-01-12 21:21:05	glittershark	I mean, it's 2016, RAM is cheap
2016-01-12 21:21:08	cocreature	it’s all part of making ghc great again
2016-01-12 21:21:13	ReinH	cocreature: <3
2016-01-12 21:21:27	greg`	yeah depends what you are trying to compile to
2016-01-12 21:21:33	◀	pauliprice (~paulipric@207.251.103.46) has quit (Ping timeout: 240 seconds)
2016-01-12 21:21:36	greg`	some people like arm processors
2016-01-12 21:21:43	▶	kosorith (~kosorith@xdsl-4679.lodz.dialog.net.pl) has joined #haskell
2016-01-12 21:22:00	◀	wanderleyguima (~wanderley@199.201.64.3) has quit (Ping timeout: 255 seconds)
2016-01-12 21:22:01	cocreature	:)
2016-01-12 21:22:01	dzdncnfzd	Who wants to help me diagnose type errors? :D lpaste.net/148877
2016-01-12 21:22:11	zachk	not-gloss hasnt't been building for me on 7.10.x 
2016-01-12 21:22:26	▶	rcat (~us3r@host86-164-41-241.range86-164.btcentralplus.com) has joined #haskell
2016-01-12 21:22:40	x_pilot	zachk: what kinds of errors?
2016-01-12 21:22:41	◀	perspectival (~perspecti@ip-94-113-221-156.net.upcbroadband.cz) has quit (Ping timeout: 250 seconds)
2016-01-12 21:22:42	dedgrant	ReinH: I've noted a correspondence between exploding RAM usage and number of modules being compiled in the past.. alleviated by -O0, so it seems that intermodule optimization is a common sort of complexity.
2016-01-12 21:22:49	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-12 21:22:55	x_pilot	zachk: it works for me
2016-01-12 21:23:02	zachk	looked like a bunch of functions in dependencies it required, have changed names
2016-01-12 21:23:03	dzdncnfzd	The problem is in the last part of the function on line 17
2016-01-12 21:23:04	zachk	seriously?
2016-01-12 21:23:08	⚡	zachk will try again
2016-01-12 21:23:11	ReinH	dedgrant: and various type-level extensions can make GHC especially hungry, as can template haskell.
2016-01-12 21:23:19	dedgrant	right
2016-01-12 21:23:22	ReinH	iirc, at least
2016-01-12 21:23:27	x_pilot	zachk: maybe try in a sandbox?
2016-01-12 21:23:46	ReinH	we had to use high-memory instances for our build servers because of it
2016-01-12 21:23:49	dedgrant	ReinH: Though from an engineering rather than cs perspective, those cases are more pathological. I'm just looking at use cases.
2016-01-12 21:23:57	◀	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2016-01-12 21:24:06	ReinH	dedgrant: if they're pathological then we were doing a lot of pathological things
2016-01-12 21:24:08	▶	wanderleyguima (~wanderley@199.201.64.2) has joined #haskell
2016-01-12 21:24:09	▶	coot_ (~marcin@bl5-234-92.dsl.telepac.pt) has joined #haskell
2016-01-12 21:24:11	dedgrant	haha yes.
2016-01-12 21:24:15	▶	lethjakman (~lethjakma@71.56.221.51) has joined #haskell
2016-01-12 21:24:18	glittershark	dzdncnfzd: hard to diagnose without proper line numbers in the error messages :)
2016-01-12 21:24:22	dmwit	dzdncnfzd: Include enough stuff for us to reproduce your problem. Stub out implementations with undefined if they're not important, but keep their type signatures.
2016-01-12 21:24:23	dedgrant	It's a tricky balance :)
2016-01-12 21:24:32	▶	bvad (~bvad@50a1b03c.flatrate.dk) has joined #haskell
2016-01-12 21:24:33	◀	bvad (~bvad@50a1b03c.flatrate.dk) has quit (Remote host closed the connection)
2016-01-12 21:24:42	greg`	yeah its talking about Lib.hs
2016-01-12 21:24:51	glittershark	dzdncnfzd: but my first thought is to change `liftM Listing <=<` to `Listing <$>`
2016-01-12 21:25:06	obadz	ReinH: in https://ocharles.org.uk/blog/posts/2014-12-12-type-families.html, the IOStore example, what makes it not possible to do without type families? Looks like a standard type class to me..
2016-01-12 21:25:15	▶	coot__ (~marcin@2001:8a0:6599:a901:c68e:8fff:fef9:ea59) has joined #haskell
2016-01-12 21:25:21	◀	coot_ (~marcin@bl5-234-92.dsl.telepac.pt) has quit (Remote host closed the connection)
2016-01-12 21:25:22	▶	sphinxo (~sphinxo@212-139-66-70.dynamic.dsl.as9105.com) has joined #haskell
2016-01-12 21:25:51	dmwit	glittershark: or maybe `liftM Listing .`?
2016-01-12 21:26:06	obadz	cc // ocharles 
2016-01-12 21:26:08	ReinH	obadz: IOStore doesn't use type families. It is a motivation for introducing Store, which does.
2016-01-12 21:26:13	dzdncnfzd	glittershark: done
2016-01-12 21:26:17	obadz	ReinH: oh ok
2016-01-12 21:26:24	dzdncnfzd	dmwit: done
2016-01-12 21:26:30	obadz	ReinH: sorry my bad
2016-01-12 21:26:31	ReinH	See the paragraph that begins "Cool - now we can go and extend this to TVar and other STM cells!"
2016-01-12 21:27:07	ReinH	obadz: Store is very similar to the use of newArray too.
2016-01-12 21:27:19	dzdncnfzd	glittershark: parseListing' is the working version of parseListing
2016-01-12 21:27:21	◀	athan (~athan_@70-91-172-238-BusName-Colorado.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2016-01-12 21:27:23	dzdncnfzd	dmwit: see above
2016-01-12 21:27:25	ReinH	it abstracts over state rather than arrays, but otherwise is the same concept
2016-01-12 21:27:54	◀	rcat (~us3r@host86-164-41-241.range86-164.btcentralplus.com) has quit (Quit: leaving)
2016-01-12 21:27:59	dmwit	dzdncnfzd: So, yeah, I would bet `liftM Listing . (mapM parseArticle <=< ...)` would be a step in the right direction.
2016-01-12 21:27:59	▶	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has joined #haskell
2016-01-12 21:28:10	bollu	ReinH: is there a nice place to read the "comonads are objects" other than the neighbourhood of infinity article?
2016-01-12 21:28:12	▶	rcat (~us3r@host86-164-41-241.range86-164.btcentralplus.com) has joined #haskell
2016-01-12 21:28:29	bollu	ReinH: along with comonad + free + cofree interaction
2016-01-12 21:28:32	ReinH	bollu: I mean, that's the thing that presents that view.
2016-01-12 21:28:42	▶	boothead (~ben@88.96.112.118) has joined #haskell
2016-01-12 21:28:47	bollu	ReinH: hm, I thought there would be multiple expositions :)
2016-01-12 21:28:52	◀	lethjakman (~lethjakma@71.56.221.51) has quit (Ping timeout: 260 seconds)
2016-01-12 21:29:27	▶	athan (~athan_@70-91-172-238-BusName-Colorado.hfc.comcastbusiness.net) has joined #haskell
2016-01-12 21:29:32	ReinH	bollu: maybe http://www.haskellforall.com/2013/02/you-could-have-invented-comonads.html
2016-01-12 21:29:46	thoughtpolice	pavolzetor: The reality is, A) It's hard to say whether RAM on these things are 'wasted' or 'used efficiently' without a lot of context (design, goals etc of the compiler). But, B) No, I don't think it's reasonable to require 4GB of RAM for such a module, and it seems reasonably like a bug to me or some possible edge case being triggered.
2016-01-12 21:30:10	ReinH	thoughtpolice: really? I've seen GHC take that much RAM many times.
2016-01-12 21:30:16	◀	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2016-01-12 21:30:23	thoughtpolice	GHC should be much faster/speedier than it is now, IMO. But it takes a lot of dedicated time to shave down lots of small things that add up. People are mentioning things like type checking extensions, but the module in question is extremely 'simple' Haskell, all things considered. If I had to take a guess, I'd say Aeson is causing the optimizer to churn very
2016-01-12 21:30:23	thoughtpolice	hard.
2016-01-12 21:30:26	bollu	ReinH: thank you
2016-01-12 21:30:26	Ankhers	I just compiled pandoc, peaking at ~2.4GB RAM.
2016-01-12 21:30:32	▶	michas_ (~michas@p4FCA73B9.dip0.t-ipconnect.de) has joined #haskell
2016-01-12 21:30:54	▶	pauliprice (~paulipric@207.251.103.46) has joined #haskell
2016-01-12 21:31:07	ReinH	Ankhers: how did you detect that peak?
2016-01-12 21:31:11	◀	kurt11 (~Adium@207.191.34.198) has quit (Quit: Leaving.)
2016-01-12 21:31:40	thoughtpolice	If a module as simple as this is using 4GB, I'd say it's a bug _somewhere_: https://hackage.haskell.org/package/pandoc-types-1.16.0.1/docs/src/Text-Pandoc-Definition.html It's hard to get all the variables that factor into that laid out, though (Pandoc is large and has a lot of dependencies, so reproduction needs to be very precise)
2016-01-12 21:31:42	Ankhers	ReinH: Not very scientific, but just looking at OSX's Activity Monitor and htop.
2016-01-12 21:31:51	ReinH	Right.
2016-01-12 21:31:57	thoughtpolice	That module doesn't even import anything outside of the Platform, not even any other pandoc modules. That's not good.
2016-01-12 21:32:02	dzdncnfzd	dmwit: that works! Also working is: return . Listing <=< ...
2016-01-12 21:32:17	dzdncnfzd	really what we need is a function (a -> b) -> (a -> m b) 
2016-01-12 21:32:25	dzdncnfzd	which, well, I was sure there'd be one like that
2016-01-12 21:32:32	dzdncnfzd	but I guess you just need to compose with return
2016-01-12 21:32:35	▶	kurt11 (~Adium@207.191.34.198) has joined #haskell
2016-01-12 21:32:46	ReinH	thoughtpolice: We don't know what exactly was being compiled.
2016-01-12 21:33:02	dmwit	dzdncnfzd: Sure, that's a nice fix, too.
2016-01-12 21:33:10	dmwit	glittershark++
2016-01-12 21:33:11	◀	uncle-j_j (~unclechu@95.153.133.173) has quit (Remote host closed the connection)
2016-01-12 21:33:22	▶	hilquias (~user@unaffiliated/hilquias) has joined #haskell
2016-01-12 21:33:27	Ankhers	It could have been compiling multiple modules at once, and it ran out of memory on that one.
2016-01-12 21:33:51	glittershark	yeah, pavolzetor: try compiling with -j1
2016-01-12 21:33:54	ReinH	GHC doesn't even die on OOM errors, it just keeps chugging along...
2016-01-12 21:33:58	◀	suppi (~suppi@unaffiliated/suppi) has quit (Quit: Leaving)
2016-01-12 21:33:59	◀	hilquias (~user@unaffiliated/hilquias) has quit (Remote host closed the connection)
2016-01-12 21:34:07	◀	realloc (~realloc@unaffiliated/realloc) has quit (Ping timeout: 260 seconds)
2016-01-12 21:34:27	glittershark	it could hypothetically be using 1GB per compiler process on a 4-core machine
2016-01-12 21:34:27	ReinH	I mean, eventually the compilation fails, but an OOM error doesn't immediately cause it to terminate, which is Fun.
2016-01-12 21:34:33	◀	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 260 seconds)
2016-01-12 21:34:37	Ankhers	pavolzetor: What was the exact message you received?
2016-01-12 21:35:33	▶	chaosmasttter (~chaosmast@p54B7F8CF.dip0.t-ipconnect.de) has joined #haskell
2016-01-12 21:36:00	▶	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2016-01-12 21:36:24	▶	sputnik_ (~textual@147.8.150.83.ftth.as8758.net) has joined #haskell
2016-01-12 21:37:38	⚡	hackagebot multiset 0.3.2 - The Data.MultiSet container type  https://hackage.haskell.org/package/multiset-0.3.2 (TwanVanLaarhoven)
2016-01-12 21:37:44	ReinH	Ankhers: you can use /usr/bin/time -l fwiw
2016-01-12 21:37:49	greg`	ok must away , tara
2016-01-12 21:37:53	◀	greg` (~user@141.228.17.193) has quit (Remote host closed the connection)
2016-01-12 21:38:07	◀	techy (~u0_a121@50.153.134.160) has quit (Read error: Connection reset by peer)
2016-01-12 21:38:12	Ankhers	ReinH: I was unaware of that.
2016-01-12 21:38:21	ReinH	And now you are not :D
2016-01-12 21:38:21	▶	techy (~u0_a121@50.153.134.160) has joined #haskell
2016-01-12 21:38:30	Ankhers	Indeed.
2016-01-12 21:38:57	◀	wanderleyguima (~wanderley@199.201.64.2) has quit (Ping timeout: 246 seconds)
2016-01-12 21:39:38	zachk	whaddya know, latest update to not-gloss, and it builds :D
2016-01-12 21:40:12	bollu	what's not-gloss?
2016-01-12 21:40:24	sphinxo	Could someone explain to me why my recursive function is not running as I expect?
2016-01-12 21:40:28	sphinxo	My code 
2016-01-12 21:40:29	zachk	a 3d version of gloss, never had it build before 
2016-01-12 21:40:34	sphinxo	http://lpaste.net/148879
2016-01-12 21:40:36	xplat|work	i don't know what it is, but i know what it isn't
2016-01-12 21:40:45	sphinxo	given for example optimize [Set RAX 1, Set RAX 2, Push RAX,Pop RAX]
2016-01-12 21:40:46	pavolzetor	sorry, was in meeting
2016-01-12 21:40:52	sphinxo	it should return an empty list
2016-01-12 21:41:06	◀	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 264 seconds)
2016-01-12 21:41:08	shachaf	No it shouldn't.
2016-01-12 21:41:09	◀	IrishPrime (~IrishPrim@74.202.224.66) has quit (Quit: Leaving)
2016-01-12 21:41:47	xplat|work	shachaf: maybe it should.  we may be being misled by the identifiers about what it's actually supposed to do
2016-01-12 21:41:47	sphinxo	shachaf: ?
2016-01-12 21:41:55	shachaf	xplat|work: True.
2016-01-12 21:42:07	◀	doomlord (~textual@host86-153-157-188.range86-153.btcentralplus.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-12 21:42:11	shachaf	I was thinking that was amd64 assembly.
2016-01-12 21:42:14	▶	Pokinawa (~Ezalor@cpc92312-cmbg19-2-0-cust775.5-4.cable.virginm.net) has joined #haskell
2016-01-12 21:42:24	xplat|work	it might not actually be about machine code at all, it could be about chess problems
2016-01-12 21:42:49	◀	neoncontrails (~neoncontr@2602:304:cc4e:9410:a59f:82b2:36e:a100) has quit (Remote host closed the connection)
2016-01-12 21:43:05	shachaf	Whatever it's about, those overlapping instances are going to be a bad time all around.
2016-01-12 21:43:11	▶	moltalk101 (~axeld@cable-dynamic-87-245-125-198.shinternet.ch) has joined #haskell
2016-01-12 21:43:17	sphinxo	How should I do it otherwise?
2016-01-12 21:43:19	byorgey	sphinxo: in the [Instr] instance for Optimisable, should the first two clauses of optimise be recursive?
2016-01-12 21:43:20	monochrom	sphinxo: in "optimize (Push r : Pop r' : xs) | r == r' = xs", there is no recursion. is this what you want?
2016-01-12 21:43:22	zachk	could it launch missiles though? 
2016-01-12 21:43:25	◀	Sucks_ (~quassel@187.39.13.235) has quit (Quit: No Ping reply in 180 seconds.)
2016-01-12 21:43:30	◀	Pokinawa (~Ezalor@cpc92312-cmbg19-2-0-cust775.5-4.cable.virginm.net) has quit (Client Quit)
2016-01-12 21:43:31	sphinxo	monochrom: ahh yes
2016-01-12 21:43:42	ReinH	Well, fmap can't perform any peephole optimizations
2016-01-12 21:43:53	ReinH	so regardless of what you're trying to do, you won't achieve it with fmap.
2016-01-12 21:43:54	◀	SCHAAP137 (SCHAPiE@unaffiliated/schaap137) has quit (Remote host closed the connection)
2016-01-12 21:43:59	◀	reindeernix (~ksj@d40a979f.rev.stofanet.dk) has quit (Quit: Leaving)
2016-01-12 21:44:16	sphinxo	thanks byorgey and monochrom 
2016-01-12 21:44:20	▶	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-12 21:44:25	ReinH	unless I misunderstand the purpose of the fmap there
2016-01-12 21:44:31	pavolzetor	thoughtpolice, glittershark: it was a single ghc process
2016-01-12 21:44:43	pavolzetor	so I guess j1 would not help right?
2016-01-12 21:44:47	◀	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has quit (Remote host closed the connection)
2016-01-12 21:44:53	▶	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has joined #haskell
2016-01-12 21:44:56	ReinH	pavolzetor: what were you actually compiling
2016-01-12 21:44:57	ReinH	?
2016-01-12 21:45:10	pavolzetor	ReinH: OS killed it, because it churned even through all the swap
2016-01-12 21:45:10	sphinxo	How could I do it better?
2016-01-12 21:45:13	▶	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has joined #haskell
2016-01-12 21:45:14	◀	coddinkn (~coddinkn@bouncer.cslabs.clarkson.edu) has quit (Ping timeout: 250 seconds)
2016-01-12 21:45:15	▶	amigojapan (~amigojapa@unaffiliated/amigojapan) has joined #haskell
2016-01-12 21:45:15	◀	dmj` (~user@c-50-158-126-110.hsd1.il.comcast.net) has quit (Ping timeout: 246 seconds)
2016-01-12 21:45:18	▶	yfeldblum (~yfeldblum@2620:10d:c090:180::1:85ea) has joined #haskell
2016-01-12 21:45:22	ReinH	pavolzetor: but what were you compiling?
2016-01-12 21:45:34	pavolzetor	it was probably more than 4 GB, when it hit 3.3 GB I just could not do anything and wait
2016-01-12 21:46:23	monochrom	"the OOM caused a cascade of unfortunate events leading to the erasure of what I was compiling. so now I don't know what I was compiling." :)
2016-01-12 21:46:27	pavolzetor	Ankhers: http://lpaste.net/148880
2016-01-12 21:46:48	ReinH	sphinxo: presumably you mean, e.g., optimize (Push r : Pop r' : xs) | r == r' = optimize xs
2016-01-12 21:46:54	◀	pauliprice (~paulipric@207.251.103.46) has quit (Ping timeout: 276 seconds)
2016-01-12 21:46:54	byorgey	sphinxo: if I were you I would get rid of the overlapping instance, and just declare explicit instances using fmap in the cases where you want it
2016-01-12 21:47:03	sphinxo	ahh ok
2016-01-12 21:47:04	◀	athan (~athan_@70-91-172-238-BusName-Colorado.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2016-01-12 21:47:06	◀	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has quit (Ping timeout: 264 seconds)
2016-01-12 21:47:09	pavolzetor	ReinH: http://lpaste.net/148880
2016-01-12 21:47:15	ReinH	pavolzetor: where's the rest?
2016-01-12 21:47:39	▶	Pirat3 (~AndChat29@197.210.172.73) has joined #haskell
2016-01-12 21:47:53	pavolzetor	ReinH: what rest?
2016-01-12 21:47:53	▶	Geraldus (~Geraldus@213.59.131.114) has joined #haskell
2016-01-12 21:48:02	ReinH	pavolzetor: the rest of the output?
2016-01-12 21:48:04	pavolzetor	that was the only ghc process
2016-01-12 21:48:12	pavolzetor	that is the output I got from emerge
2016-01-12 21:48:38	ℹ	kipras is now known as kipras`away
2016-01-12 21:48:40	pavolzetor	sans the output for all previous packages
2016-01-12 21:49:02	◀	bollu (~Adium@1.186.134.197) has quit (Quit: Leaving.)
2016-01-12 21:49:15	▶	Itkovian_ (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-12 21:49:19	◀	zeroed (~zeroed@unaffiliated/zeroed) has quit (Ping timeout: 265 seconds)
2016-01-12 21:49:24	▶	bollu (~Adium@1.186.134.197) has joined #haskell
2016-01-12 21:49:44	▶	zeroed (~zeroed@93-34-203-146.ip51.fastwebnet.it) has joined #haskell
2016-01-12 21:49:44	◀	zeroed (~zeroed@93-34-203-146.ip51.fastwebnet.it) has quit (Changing host)
2016-01-12 21:49:44	▶	zeroed (~zeroed@unaffiliated/zeroed) has joined #haskell
2016-01-12 21:49:59	ReinH	Well, at least we can see that you weren't just compiling Text.Pandoc.Definition
2016-01-12 21:49:59	◀	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has quit (Ping timeout: 250 seconds)
2016-01-12 21:50:16	▶	centrinia (~centrinia@2602:306:bd0d:a690:f5b3:b0dc:627b:8720) has joined #haskell
2016-01-12 21:50:31	▶	RedPandaUA (~RedPandaU@unaffiliated/redpandaua) has joined #haskell
2016-01-12 21:50:32	▶	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has joined #haskell
2016-01-12 21:50:45	ReinH	But we don't know, e.g., whether your emerge build was in parallel or anything else that might be relevant.
2016-01-12 21:51:13	◀	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2016-01-12 21:51:21	Ankhers	pavolzetor: What is in the log file?
2016-01-12 21:51:27	◀	kurt11 (~Adium@207.191.34.198) has quit (Quit: Leaving.)
2016-01-12 21:51:39	ReinH	You could try to compile pandoc directly with GHC
2016-01-12 21:51:44	pavolzetor	ReinH: only one GHC process was running
2016-01-12 21:52:01	◀	Denommus (~user@unaffiliated/denommus) has quit (Quit: rebooting)
2016-01-12 21:52:33	◀	mahasamoot (~mahasamoo@24.42.192.202) has quit (Ping timeout: 240 seconds)
2016-01-12 21:53:00	▶	jbiesnecker (~textual@199.201.64.129) has joined #haskell
2016-01-12 21:53:06	◀	JagaJaga (~JagaJaga@178.62.202.50) has quit (Ping timeout: 264 seconds)
2016-01-12 21:53:11	▶	kurt11 (~Adium@207.191.34.198) has joined #haskell
2016-01-12 21:53:46	◀	bollu (~Adium@1.186.134.197) has quit (Client Quit)
2016-01-12 21:54:01	▶	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has joined #haskell
2016-01-12 21:54:11	ReinH	I'd be interested in the output of /usr/bin/time -l cabal install pandoc, for instance
2016-01-12 21:54:31	ReinH	especially from an empty user database.
2016-01-12 21:54:52	▶	josdeha_rt (~josdehart@535299F3.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2016-01-12 21:54:52	▶	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has joined #haskell
2016-01-12 21:55:18	▶	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-12 21:55:29	pavolzetor	Ankhers: http://lpaste.net/148881
2016-01-12 21:55:33	◀	grada (~grada@c-24-18-136-241.hsd1.wa.comcast.net) has left #haskell
2016-01-12 21:55:46	sphinxo	How do I represent a type that could be String, Int and Int, String?
2016-01-12 21:55:56	◀	nerfando (~textual@177.92.43.238) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-12 21:56:04	ReinH	sphinxo: why not pick one?
2016-01-12 21:56:18	▶	montanonic (~nicholas@c-98-246-188-73.hsd1.or.comcast.net) has joined #haskell
2016-01-12 21:56:52	◀	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2016-01-12 21:56:58	sphinxo	How about String, String and String, int?
2016-01-12 21:57:14	sphinxo	for example Xor Register Register
2016-01-12 21:57:21	sphinxo	and Xor Register Int
2016-01-12 21:57:33	◀	Itkovian_ (~Itkovian@178-117-76-63.access.telenet.be) has quit (Ping timeout: 255 seconds)
2016-01-12 21:57:47	ReinH	Those are two different Xors, but why are your registers strings?
2016-01-12 21:58:01	sphinxo	Well I was just giving an example
2016-01-12 21:58:02	▶	Sucks (~quassel@187.39.13.235) has joined #haskell
2016-01-12 21:58:02	pavolzetor	I am going to lunch then I will report a bug
2016-01-12 21:58:09	◀	michas_ (~michas@p4FCA73B9.dip0.t-ipconnect.de) has quit (Ping timeout: 256 seconds)
2016-01-12 21:58:31	▶	SCHAAP137 (SCHAPiE@unaffiliated/schaap137) has joined #haskell
2016-01-12 21:58:34	sphinxo	ReinH: ?
2016-01-12 21:58:36	alpha123	wouldnt it be easier for them to be type Register = RAX | RBX | RCX | ..
2016-01-12 21:58:39	▶	pantsman_ (~pantsman@cpc85034-haye22-2-0-cust50.17-4.cable.virginm.net) has joined #haskell
2016-01-12 21:58:44	sphinxo	they are alpha123  :)
2016-01-12 21:59:03	ReinH	your choices are basically Either (String, String) (String, Int) or A String (Either String Int), named as you see fit.
2016-01-12 21:59:15	sphinxo	Great Thanks
2016-01-12 21:59:16	ReinH	iow you can choose to factor the String out, or not.
2016-01-12 21:59:18	◀	theorbtwo (~theorb@cpc81866-swin19-2-0-cust48.3-1.cable.virginm.net) has quit (Remote host closed the connection)
2016-01-12 21:59:22	▶	lemur (~baweaver@173.230.196.25) has joined #haskell
2016-01-12 21:59:33	sphinxo	I'm not using any strings
2016-01-12 21:59:40	sphinxo	data Register = EAX | EBX deriving (Show, Eq)
2016-01-12 21:59:41	▶	Lord_of_Life (Elite12246@gateway/shell/elitebnc/x-tjkzjhevcpkxlcgo) has joined #haskell
2016-01-12 21:59:44	▶	algae (~algae@blk-11-46-131.eastlink.ca) has joined #haskell
2016-01-12 22:00:00	ReinH	iow you can use ab + ac or a(b+c)
2016-01-12 22:00:18	◀	ril (~ril@c-98-210-195-123.hsd1.ca.comcast.net) has quit (Ping timeout: 246 seconds)
2016-01-12 22:00:36	sphinxo	I think i'll go with the second one
2016-01-12 22:00:48	◀	martin-t (~martin-t@199.201.64.131) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-12 22:01:01	◀	vpm (~vpm@blumenthal.vrinimi.int.eu.org) has quit (Quit: co'o)
2016-01-12 22:01:18	▶	martin-t (~martin-t@199.201.64.134) has joined #haskell
2016-01-12 22:01:20	▶	vpm (~vpm@blumenthal.vrinimi.int.eu.org) has joined #haskell
2016-01-12 22:01:23	◀	chenshen (~chenshen@199.201.64.136) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-12 22:02:02	monochrom	you need a "data ArgumentType = Immediate Int | Register Register | Address Int | AddressAndOffset Int Int"
2016-01-12 22:02:53	monochrom	except that the Immediate case never makes sense as a target argument. now you are between a rock and a hard place.
2016-01-12 22:03:02	▶	chenshen (~chenshen@199.201.64.136) has joined #haskell
2016-01-12 22:03:27	monochrom	on top of that you eventually have to talk about 8-bit vs 16-bit vs 32-bit vs 64-bit
2016-01-12 22:04:02	▶	hannelita (~hannelita@2804:14c:a8:27a5:a474:31fb:a297:7d48) has joined #haskell
2016-01-12 22:04:06	▶	dmj` (~user@c-50-158-126-110.hsd1.il.comcast.net) has joined #haskell
2016-01-12 22:04:18	◀	lemur (~baweaver@173.230.196.25) has quit (Ping timeout: 255 seconds)
2016-01-12 22:04:19	ReinH	monochrom: ArgumentType also doesn't restrict arguments in the cases where only some of the options are valid
2016-01-12 22:04:19	◀	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has quit (Quit: caumeslasal)
2016-01-12 22:04:21	xplat|work	data ArgumentType a where { Immediate :: Int -> ArgumentType Source; Register :: Register -> ArgumentType a; ... }
2016-01-12 22:04:44	monochrom	at which point you are more than choosing between the physical strength of Dr. Jekyll and the gentleman manner of Mr. Hyde
2016-01-12 22:04:53	ReinH	heh
2016-01-12 22:05:10	xplat|work	it would be a nightmare to guarantee valid arguments at the type level for, e.g., x86 tho
2016-01-12 22:05:16	▶	doomlord (~textual@host86-153-157-188.range86-153.btcentralplus.com) has joined #haskell
2016-01-12 22:05:21	xplat|work	at least, it would with GADTs
2016-01-12 22:05:24	ReinH	xplat|work: true enough
2016-01-12 22:05:32	◀	sphinxo (~sphinxo@212-139-66-70.dynamic.dsl.as9105.com) has quit (Quit: WeeChat 1.3)
2016-01-12 22:05:43	ReinH	this is why I restrict myself to brainfuck compilers.
2016-01-12 22:05:45	ReinH	much easier
2016-01-12 22:05:48	▶	athan (~athan_@2601:283:4401:6090:e89d:3122:7a1d:c93d) has joined #haskell
2016-01-12 22:05:48	xplat|work	i could see it actually working out with refinement types though
2016-01-12 22:05:53	ReinH	xplat|work: yeah
2016-01-12 22:05:57	◀	vpm (~vpm@blumenthal.vrinimi.int.eu.org) has quit (Client Quit)
2016-01-12 22:06:05	▶	vpm (~vpm@blumenthal.vrinimi.int.eu.org) has joined #haskell
2016-01-12 22:06:34	xplat|work	in fact i feel that that sort of thing is almost the ideal scenario for refinement types
2016-01-12 22:06:47	◀	centrinia (~centrinia@2602:306:bd0d:a690:f5b3:b0dc:627b:8720) has quit (Ping timeout: 260 seconds)
2016-01-12 22:07:54	▶	theorbtwo (~theorb@cpc81866-swin19-2-0-cust48.3-1.cable.virginm.net) has joined #haskell
2016-01-12 22:07:56	▶	slester (~slester@cpe-76-88-8-120.san.res.rr.com) has joined #haskell
2016-01-12 22:08:33	◀	hannelita (~hannelita@2804:14c:a8:27a5:a474:31fb:a297:7d48) has quit (Ping timeout: 240 seconds)
2016-01-12 22:08:55	▶	lollancf37 (~lollancf3@mar92-2-82-67-215-41.fbx.proxad.net) has joined #haskell
2016-01-12 22:09:05	▶	aranea (~aranea@wikimedia/FalconL) has joined #haskell
2016-01-12 22:10:06	▶	michas_ (~michas@p4FCA73B9.dip0.t-ipconnect.de) has joined #haskell
2016-01-12 22:11:39	◀	bennofs (~benno@2a02:810a:8200:2934:56ee:75ff:fe53:d108) has quit (Ping timeout: 250 seconds)
2016-01-12 22:12:08	▶	umayahabdennabi (~umayahabd@198.241.159.28) has joined #haskell
2016-01-12 22:12:33	▶	jesyspa (~jesyspa@unaffiliated/jesyspa) has joined #haskell
2016-01-12 22:12:55	◀	Pirat3 (~AndChat29@197.210.172.73) has left #haskell ("Leaving")
2016-01-12 22:13:42	◀	cbaatz (~cb@46-127-141-225.dynamic.hispeed.ch) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-01-12 22:14:22	◀	borkdude (~borkdude@2a02:2308:20:0:216:3eff:fe5f:4c0b) has quit (Ping timeout: 240 seconds)
2016-01-12 22:14:26	◀	jeltsch (~wolfgang@kybi.ioc.ee) has quit (Ping timeout: 245 seconds)
2016-01-12 22:14:33	◀	sword_smith_ (~quassel@77.66.112.22) has quit (Ping timeout: 240 seconds)
2016-01-12 22:14:42	◀	kosorith (~kosorith@xdsl-4679.lodz.dialog.net.pl) has quit (Ping timeout: 240 seconds)
2016-01-12 22:15:44	▶	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has joined #haskell
2016-01-12 22:16:16	◀	umayahabdennabi (~umayahabd@198.241.159.28) has quit (Client Quit)
2016-01-12 22:16:26	▶	sword_smith (~quassel@77.66.112.22) has joined #haskell
2016-01-12 22:17:14	◀	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has quit (Quit: Textual IRC Client signing off)
2016-01-12 22:17:18	◀	Lord_of_Life (Elite12246@gateway/shell/elitebnc/x-tjkzjhevcpkxlcgo) has quit (Ping timeout: 250 seconds)
2016-01-12 22:17:46	◀	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2016-01-12 22:18:52	▶	cdg (~cdg@157.166.175.129) has joined #haskell
2016-01-12 22:18:57	◀	Geraldus (~Geraldus@213.59.131.114) has quit (Quit: Lingo: www.lingoirc.com)
2016-01-12 22:20:04	▶	kgadek (~kgadek@atp197.neoplus.adsl.tpnet.pl) has joined #haskell
2016-01-12 22:21:35	◀	insitu (~textual@105.196.201.77.rev.sfr.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-01-12 22:22:14	▶	chrisbarrett (~chrisb@121.98.103.14) has joined #haskell
2016-01-12 22:23:06	▶	irrequietus (~irqus@unaffiliated/irrequietus) has joined #haskell
2016-01-12 22:23:30	▶	grepsuzette_ (~captainca@58.37.209.50) has joined #haskell
2016-01-12 22:23:31	▶	choosetwo (~jmeyer@50-93-252-202.fttp.usinternet.com) has joined #haskell
2016-01-12 22:23:40	▶	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-12 22:23:42	◀	t0by (~t0by@host135-247-dynamic.4-87-r.retail.telecomitalia.it) has quit (Ping timeout: 264 seconds)
2016-01-12 22:24:05	◀	cloudhead (~textual@ip5f5af307.dynamic.kabel-deutschland.de) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-12 22:24:11	◀	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has quit (Client Quit)
2016-01-12 22:24:12	▶	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has joined #haskell
2016-01-12 22:24:13	◀	vmeson (~rmacleod@128.224.252.2) has quit (Ping timeout: 250 seconds)
2016-01-12 22:24:52	◀	chrisdotcode (~quassel@2605:a000:e500:7c00:306b:38ad:5e02:f2f7) has quit (Ping timeout: 260 seconds)
2016-01-12 22:24:56	▶	lethjakman (~lethjakma@71.56.221.51) has joined #haskell
2016-01-12 22:25:05	▶	borkdude (~borkdude@2a02:2308:20:0:216:3eff:fe5f:4c0b) has joined #haskell
2016-01-12 22:25:13	▶	joel-dice (~dicej@184-96-51-14.hlrn.qwest.net) has joined #haskell
2016-01-12 22:25:47	▶	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-12 22:25:51	▶	lemur (~baweaver@173.230.196.25) has joined #haskell
2016-01-12 22:25:51	◀	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2016-01-12 22:26:15	▶	umayahabdennabi (~umayahabd@198.241.159.28) has joined #haskell
2016-01-12 22:27:27	◀	lemur (~baweaver@173.230.196.25) has quit (Remote host closed the connection)
2016-01-12 22:27:29	▶	justanotheruser (~Justan@unaffiliated/justanotheruser) has joined #haskell
2016-01-12 22:28:21	▶	kosorith (~kosorith@dynamic-78-8-95-88.ssp.dialog.net.pl) has joined #haskell
2016-01-12 22:28:45	◀	bb010g (uid21050@gateway/web/irccloud.com/x-tefnhqddktbrccoi) has quit (Quit: Connection closed for inactivity)
2016-01-12 22:29:06	◀	Mediogre (~Mediogre@50-197-231-5-static.hfc.comcastbusiness.net) has quit (Ping timeout: 264 seconds)
2016-01-12 22:29:42	◀	lethjakman (~lethjakma@71.56.221.51) has quit (Ping timeout: 264 seconds)
2016-01-12 22:30:41	◀	sssilver (~sssilver@38.122.48.218) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-12 22:31:34	▶	lemur (~baweaver@173.230.196.25) has joined #haskell
2016-01-12 22:31:35	◀	MarceColl (~MarceColl@2.Red-79-155-140.dynamicIP.rima-tde.net) has quit (Quit: Lost terminal)
2016-01-12 22:32:03	◀	kgadek (~kgadek@atp197.neoplus.adsl.tpnet.pl) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-12 22:32:09	◀	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has quit (Quit: brb, fixing uninitialized values bug.)
2016-01-12 22:32:13	▶	mahasamoot (~mahasamoo@24.42.192.202) has joined #haskell
2016-01-12 22:34:22	◀	techy (~u0_a121@50.153.134.160) has quit (Read error: Connection reset by peer)
2016-01-12 22:34:22	◀	yfeldblum (~yfeldblum@2620:10d:c090:180::1:85ea) has quit (Ping timeout: 240 seconds)
2016-01-12 22:34:44	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Remote host closed the connection)
2016-01-12 22:34:56	▶	zipper (~luv_panda@unaffiliated/zipper) has joined #haskell
2016-01-12 22:35:13	◀	zipper (~luv_panda@unaffiliated/zipper) has quit (Quit: Gone to pet the sleepy panda.)
2016-01-12 22:35:20	◀	baweaver (~baweaver@c-24-4-24-160.hsd1.ca.comcast.net) has quit (Disconnected by services)
2016-01-12 22:35:26	ℹ	lemur is now known as baweaver
2016-01-12 22:35:49	▶	kimbo_ (~kimbo@93-36-127-154.ip60.fastwebnet.it) has joined #haskell
2016-01-12 22:35:57	▶	lemur (~baweaver@2601:644:8280:b3c:ccf0:47c1:3d28:c45) has joined #haskell
2016-01-12 22:35:58	▶	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has joined #haskell
2016-01-12 22:36:42	◀	Xzip (~Xzip@81-230-143-111-no169.tbcn.telia.com) has quit (Ping timeout: 246 seconds)
2016-01-12 22:37:02	◀	athan (~athan_@2601:283:4401:6090:e89d:3122:7a1d:c93d) has quit (Remote host closed the connection)
2016-01-12 22:37:04	▶	techy (~u0_a121@50.153.134.160) has joined #haskell
2016-01-12 22:37:08	◀	umayahabdennabi (~umayahabd@198.241.159.28) has quit (Quit: umayahabdennabi)
2016-01-12 22:37:50	◀	jbiesnecker (~textual@199.201.64.129) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-12 22:38:36	◀	quicksilver (~jules@roobarb.crazydogs.org) has quit (Ping timeout: 245 seconds)
2016-01-12 22:38:50	◀	kimbo_ (~kimbo@93-36-127-154.ip60.fastwebnet.it) has left #haskell
2016-01-12 22:38:51	▶	zipper (~luv_panda@unaffiliated/zipper) has joined #haskell
2016-01-12 22:39:30	▶	dadaro (~androidde@78.173.251.201) has joined #haskell
2016-01-12 22:39:56	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-12 22:41:24	▶	sssilver (~sssilver@38.122.48.218) has joined #haskell
2016-01-12 22:41:36	◀	zipper (~luv_panda@unaffiliated/zipper) has quit (Client Quit)
2016-01-12 22:42:03	▶	zipper (~luv_panda@unaffiliated/zipper) has joined #haskell
2016-01-12 22:42:04	▶	coddinkn (~coddinkn@128.153.196.181) has joined #haskell
2016-01-12 22:42:09	◀	techy (~u0_a121@50.153.134.160) has quit (Ping timeout: 276 seconds)
2016-01-12 22:42:09	◀	spuz (~spuz@80.169.162.50) has quit (Disconnected by services)
2016-01-12 22:42:09	▶	spuz_ (~spuzz@host-2-96-179-218.as13285.net) has joined #haskell
2016-01-12 22:42:16	▶	jbiesnecker (~textual@199.201.64.129) has joined #haskell
2016-01-12 22:43:17	▶	bam365 (~blake@23-29-39-194.static.kc.surewest.net) has joined #haskell
2016-01-12 22:43:38	▶	pauliprice (~paulipric@207.251.103.46) has joined #haskell
2016-01-12 22:44:02	▶	usershell (~usershell@41.136.119.41) has joined #haskell
2016-01-12 22:44:05	◀	griotspeak (~textual@c-73-237-161-156.hsd1.ga.comcast.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-12 22:44:12	▶	umayahabdennabi (~umayahabd@198.241.159.28) has joined #haskell
2016-01-12 22:44:20	◀	coddinkn (~coddinkn@128.153.196.181) has left #haskell ("WeeChat 1.3")
2016-01-12 22:44:21	◀	phyrex1an (~phyrex1an@2a02:fe0:c151:4d10:dcc1:2a13:6c4d:384f) has quit (Ping timeout: 255 seconds)
2016-01-12 22:44:31	▶	lostman_ (uid16273@gateway/web/irccloud.com/x-devmbtyhwxjdooaw) has joined #haskell
2016-01-12 22:44:57	▶	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has joined #haskell
2016-01-12 22:45:05	▶	Zekka (~zekka@wsip-70-184-90-138.ph.ph.cox.net) has joined #haskell
2016-01-12 22:45:43	▶	strburst (~allen@lawn-128-61-28-161.lawn.gatech.edu) has joined #haskell
2016-01-12 22:45:52	◀	naudiz (~naudiz@ki-omniarts.de) has quit (Ping timeout: 265 seconds)
2016-01-12 22:46:02	▶	hunteriam (uid63798@gateway/web/irccloud.com/x-kgzhcncxlahydnct) has joined #haskell
2016-01-12 22:46:11	▶	Zekka|Sigfig (~zekka@wsip-70-184-90-138.ph.ph.cox.net) has joined #haskell
2016-01-12 22:46:38	◀	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2016-01-12 22:46:46	◀	jbgi (~jbgi@84-72-168-7.dclient.hispeed.ch) has quit (Quit: jbgi)
2016-01-12 22:47:21	◀	raichoo (~raichoo@mue-88-130-46-050.dsl.tropolys.de) has quit (Ping timeout: 276 seconds)
2016-01-12 22:48:11	◀	dmj` (~user@c-50-158-126-110.hsd1.il.comcast.net) has quit (Ping timeout: 245 seconds)
2016-01-12 22:48:22	▶	aartamonau (~shaleny@206.169.106.2) has joined #haskell
2016-01-12 22:48:28	◀	Ziltrum (~Destol@public-112-107.nat.utoronto.ca) has quit (Quit: leaving)
2016-01-12 22:49:18	◀	usershell (~usershell@41.136.119.41) has quit (Ping timeout: 246 seconds)
2016-01-12 22:50:07	◀	umayahabdennabi (~umayahabd@198.241.159.28) has quit (Quit: umayahabdennabi)
2016-01-12 22:50:22	▶	mgsloan (~mgsloan@157.130.186.54) has joined #haskell
2016-01-12 22:50:25	◀	osa1 (~omer@haskell/developer/osa1) has quit (Ping timeout: 272 seconds)
2016-01-12 22:50:57	▶	YP-HW7 (~YP-Win10@5ec019cd.skybroadband.com) has joined #haskell
2016-01-12 22:51:21	◀	cereal_killer_ (~ernesto@host28.186-109-207.telecom.net.ar) has quit (Quit: Konversation terminated!)
2016-01-12 22:51:22	◀	baweaver (~baweaver@173.230.196.25) has quit (Remote host closed the connection)
2016-01-12 22:51:41	▶	umayahabdennabi (~umayahabd@198.241.159.28) has joined #haskell
2016-01-12 22:51:47	▶	imalsogreg (~user@dhcp-18-111-117-29.dyn.MIT.EDU) has joined #haskell
2016-01-12 22:52:14	◀	grepsuzette_ (~captainca@58.37.209.50) has left #haskell ("WeeChat 1.2")
2016-01-12 22:52:18	▶	grepsuzette_ (~captainca@58.37.209.50) has joined #haskell
2016-01-12 22:52:27	◀	python476 (~user@2a02-8420-6f5c-4200-021f-3bff-fe7d-f603.rev.sfr.net) has quit (Ping timeout: 255 seconds)
2016-01-12 22:52:30	◀	grepsuzette_ (~captainca@58.37.209.50) has left #haskell ("WeeChat 1.2")
2016-01-12 22:52:32	lollancf37	clear
2016-01-12 22:52:34	◀	AndriusBartulis (~andriusb@cpc14-hawk12-2-0-cust18.18-1.cable.virginm.net) has quit (Quit: Time to go)
2016-01-12 22:52:36	lollancf37	oops sorry
2016-01-12 22:52:42	◀	lollancf37 (~lollancf3@mar92-2-82-67-215-41.fbx.proxad.net) has quit (Quit: leaving)
2016-01-12 22:52:56	⚡	hackagebot hledger-ui 0.27.3 - Curses-style user interface for the hledger accounting tool  https://hackage.haskell.org/package/hledger-ui-0.27.3 (SimonMichael)
2016-01-12 22:54:03	◀	clynamen (~clynamen@93-50-191-217.ip153.fastwebnet.it) has quit (Read error: Connection reset by peer)
2016-01-12 22:54:05	◀	conal (~textual@104.255.240.10) has quit (Quit: Computer has gone to sleep.)
2016-01-12 22:54:39	▶	Lord_of_Life (Elite12246@gateway/shell/elitebnc/x-jnaaooxhycbsddva) has joined #haskell
2016-01-12 22:55:13	▶	conal (~textual@104.255.240.10) has joined #haskell
2016-01-12 22:55:40	◀	umayahabdennabi (~umayahabd@198.241.159.28) has quit (Client Quit)
2016-01-12 22:55:57	◀	mgsloan (~mgsloan@157.130.186.54) has quit (Ping timeout: 256 seconds)
2016-01-12 22:56:09	▶	xiinotulp (~q@node-1cc6.pool-101-108.dynamic.totbb.net) has joined #haskell
2016-01-12 22:56:50	▶	athan (~athan_@2601:283:4401:6090:e89d:3122:7a1d:c93d) has joined #haskell
2016-01-12 22:56:59	▶	mgsloan (~mgsloan@157.130.186.54) has joined #haskell
2016-01-12 22:57:34	▶	jorj (~jorj@162.220.240.216) has joined #haskell
2016-01-12 22:57:59	◀	chenshen (~chenshen@199.201.64.136) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-12 22:58:26	◀	mahasamoot (~mahasamoo@24.42.192.202) has quit (Ping timeout: 265 seconds)
2016-01-12 22:58:40	▶	clynamen (~clynamen@93-50-191-217.ip153.fastwebnet.it) has joined #haskell
2016-01-12 22:58:42	▶	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined #haskell
2016-01-12 22:58:45	◀	plutoniix (~q@node-jfu.pool-101-108.dynamic.totbb.net) has quit (Ping timeout: 246 seconds)
2016-01-12 22:59:10	▶	hilquias (~user@unaffiliated/hilquias) has joined #haskell
2016-01-12 22:59:12	◀	Lord_of_Life (Elite12246@gateway/shell/elitebnc/x-jnaaooxhycbsddva) has quit (Ping timeout: 255 seconds)
2016-01-12 22:59:20	▶	plucas (~plucas@8.18.218.175) has joined #haskell
2016-01-12 22:59:29	◀	choosetwo (~jmeyer@50-93-252-202.fttp.usinternet.com) has quit (Ping timeout: 260 seconds)
2016-01-12 23:00:04	▶	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2016-01-12 23:00:06	◀	altphi (~altphi@150-182-191-247.dynamic.utc.edu) has quit (Quit: somno opus est.)
2016-01-12 23:00:19	▶	chrisdotcode (~quassel@2605:a000:e500:7c00:8187:c9b6:b089:8db9) has joined #haskell
2016-01-12 23:00:55	◀	poopiefacetomato (~rikonor@128.177.123.162) has quit (Remote host closed the connection)
2016-01-12 23:00:57	◀	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has quit (Remote host closed the connection)
2016-01-12 23:00:58	▶	griotspeak (~textual@c-73-237-161-156.hsd1.ga.comcast.net) has joined #haskell
2016-01-12 23:01:10	▶	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined #haskell
2016-01-12 23:02:18	◀	kungp (~kp@185.21.217.80) has quit (Ping timeout: 265 seconds)
2016-01-12 23:02:45	◀	shelf (~bnc@unaffiliated/shelf) has quit (Ping timeout: 256 seconds)
2016-01-12 23:03:05	◀	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-12 23:03:31	▶	adam___ (~adam@static-50-53-43-165.bvtn.or.frontiernet.net) has joined #haskell
2016-01-12 23:03:32	▶	silver_ (~silver@93.85.49.120) has joined #haskell
2016-01-12 23:03:36	◀	conal (~textual@104.255.240.10) has quit (Quit: Computer has gone to sleep.)
2016-01-12 23:03:39	◀	dlundy (~dlundy@185.21.217.16) has quit (Ping timeout: 246 seconds)
2016-01-12 23:04:08	ℹ	mrowe_away is now known as mrowe
2016-01-12 23:04:50	▶	hannelita (~hannelita@2804:14c:a8:27a5:8c2e:1dbb:f596:1816) has joined #haskell
2016-01-12 23:05:21	▶	shelf (~bnc@unaffiliated/shelf) has joined #haskell
2016-01-12 23:05:47	▶	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has joined #haskell
2016-01-12 23:05:55	◀	Helvekta (~enel@2601:4a:4202:d58c:7c7a:c67a:3ebe:a560) has quit (Read error: Connection reset by peer)
2016-01-12 23:05:57	◀	imalsogreg (~user@dhcp-18-111-117-29.dyn.MIT.EDU) has quit (Ping timeout: 255 seconds)
2016-01-12 23:06:06	◀	dgpratt (~dpratt71@207.182.208.2) has quit (Ping timeout: 246 seconds)
2016-01-12 23:06:21	◀	cfricke (~cfricke@unaffiliated/cfricke) has quit (Quit: leaving)
2016-01-12 23:06:31	◀	silver (~silver@93.85.49.120) has quit (Ping timeout: 245 seconds)
2016-01-12 23:07:24	◀	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2016-01-12 23:07:33	▶	synergistics (~synergist@2601:154:8102:4299:6444:8fd2:2421:a985) has joined #haskell
2016-01-12 23:07:35	▶	mizu_no_oto (~textual@c-67-189-145-156.hsd1.ma.comcast.net) has joined #haskell
2016-01-12 23:07:37	▶	baweaver (~baweaver@173.230.196.25) has joined #haskell
2016-01-12 23:07:38	◀	mizu_no_oto (~textual@c-67-189-145-156.hsd1.ma.comcast.net) has quit (Client Quit)
2016-01-12 23:07:49	◀	Jackneill (~Jackneill@gateway/vpn/privateinternetaccess/jackneill) has quit (Remote host closed the connection)
2016-01-12 23:07:50	▶	wanderleyguima (~wanderley@199.201.64.2) has joined #haskell
2016-01-12 23:07:57	▶	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-12 23:07:57	▶	conal (~textual@104.255.240.10) has joined #haskell
2016-01-12 23:07:59	▶	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has joined #haskell
2016-01-12 23:08:46	▶	PatrickRobotham (uid18270@gateway/web/irccloud.com/x-bxkougzviennatcj) has joined #haskell
2016-01-12 23:08:56	synergistics	I want to learn category theory and Haskell. Would starting with Haskell make learning category theory more productive? 
2016-01-12 23:09:54	◀	hannelita (~hannelita@2804:14c:a8:27a5:8c2e:1dbb:f596:1816) has quit (Ping timeout: 264 seconds)
2016-01-12 23:09:54	▶	mahasamoot (~mahasamoo@24.42.192.202) has joined #haskell
2016-01-12 23:10:02	x_pilot	synergistics: Haskell provides a lot of concrete examples of concepts in category theory like Functors
2016-01-12 23:10:29	▶	dlundy (~dlundy@185.21.217.16) has joined #haskell
2016-01-12 23:10:45	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-12 23:10:58	▶	Diogo (~Diogo@10.25.114.89.rev.vodafone.pt) has joined #haskell
2016-01-12 23:11:10	◀	marchelzo_ (~marchelzo@unaffiliated/marchelzo/x-2669545) has quit (Remote host closed the connection)
2016-01-12 23:11:18	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-12 23:11:26	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-12 23:11:34	◀	Diogo (~Diogo@10.25.114.89.rev.vodafone.pt) has quit (Remote host closed the connection)
2016-01-12 23:11:53	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-12 23:12:18	▶	enoch_root (~quassel@195.191.12.59) has joined #haskell
2016-01-12 23:12:23	synergistics	x_pilot: Yea I haven't seen much of that reading academic papers so far 
2016-01-12 23:12:24	▶	kungp (~kp@2a04:1980:3100:1aab:e61d:2dff:fe29:fc20) has joined #haskell
2016-01-12 23:12:36	▶	Rizy (~Rizy@36.77.231.174) has joined #haskell
2016-01-12 23:13:06	◀	xiinotulp (~q@node-1cc6.pool-101-108.dynamic.totbb.net) has quit (Quit: จรลี จรลา)
2016-01-12 23:13:11	◀	dsh (~daishi@ool-18bd7436.dyn.optonline.net) has quit (Quit: Leaving)
2016-01-12 23:13:31	◀	L8D (~L8D@216.201.168.18) has quit (Ping timeout: 256 seconds)
2016-01-12 23:13:38	▶	xnil (~xnil@69.43.66.12) has joined #haskell
2016-01-12 23:14:36	exio4	synergistics: it might help, but not much
2016-01-12 23:15:17	xplat|work	mathematics may not provide a lot of concrete examples of functors, but it provides many examples of concrete functors
2016-01-12 23:15:19	◀	Jesin (~Jesin@pool-108-45-39-144.washdc.fios.verizon.net) has quit (Quit: Leaving)
2016-01-12 23:15:27	◀	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has quit (Remote host closed the connection)
2016-01-12 23:15:36	◀	conal (~textual@104.255.240.10) has quit (Quit: Computer has gone to sleep.)
2016-01-12 23:15:40	▶	SuperLazyUnicorn (~superlazy@10.25.114.89.rev.vodafone.pt) has joined #haskell
2016-01-12 23:15:44	◀	slester (~slester@cpe-76-88-8-120.san.res.rr.com) has quit
2016-01-12 23:15:49	▶	adam____ (~adam@104.156.228.191) has joined #haskell
2016-01-12 23:15:55	◀	enoch_root (~quassel@195.191.12.59) has quit (Remote host closed the connection)
2016-01-12 23:15:57	Jello_Raptor	is there a haskell type that I should use if I want a monoid such that for all `a` and `b` in that monoid `a <> b >= a`? 
2016-01-12 23:16:27	▶	stultus (~stultus@wikisource/Hrishikesh.kb) has joined #haskell
2016-01-12 23:16:48	nolraiU	That isn't a monoid.
2016-01-12 23:16:50	▶	Ziltrum (~Destol@public-112-107.nat.utoronto.ca) has joined #haskell
2016-01-12 23:16:54	xplat|work	not particularly other than 'monoid'
2016-01-12 23:16:55	Jello_Raptor	the type has to be an instance of Monoid and Ord
2016-01-12 23:17:01	nolraiU	(Because of id)
2016-01-12 23:17:17	xplat|work	nolraiU: >= , not >
2016-01-12 23:17:18	Jello_Raptor	nolraiU: '>=' 
2016-01-12 23:17:22	◀	kungp (~kp@2a04:1980:3100:1aab:e61d:2dff:fe29:fc20) has quit (Ping timeout: 260 seconds)
2016-01-12 23:17:23	kadoban	nolraiU: Why not? It wouldn't be with >, but >= seems fine.
2016-01-12 23:17:26	nolraiU	Oh.
2016-01-12 23:17:28	nolraiU	Hmm.
2016-01-12 23:17:42	▶	oish (~charlie@159.22.169.217.in-addr.arpa) has joined #haskell
2016-01-12 23:17:43	nolraiU	Miss read it as "=".
2016-01-12 23:17:46	dolio	Max
2016-01-12 23:17:54	◀	dadaro (~androidde@78.173.251.201) has quit (Quit: Leaving)
2016-01-12 23:17:57	◀	dlundy (~dlundy@185.21.217.16) has quit (Ping timeout: 260 seconds)
2016-01-12 23:18:08	◀	FofG (uid91005@gateway/web/irccloud.com/x-gbfbzgtolglsranu) has quit (Quit: Connection closed for inactivity)
2016-01-12 23:18:13	▶	kazagistar (~Adium@76.191.88.132) has joined #haskell
2016-01-12 23:18:16	Jello_Raptor	I figured, but seems good practice to check if there's already a convention before going on to reinvent it. 
2016-01-12 23:18:26	▶	dgpratt (~dpratt71@pool-72-65-102-203.ptldme.east.myfairpoint.net) has joined #haskell
2016-01-12 23:18:26	◀	SuperLazyUnicorn (~superlazy@10.25.114.89.rev.vodafone.pt) has quit (Client Quit)
2016-01-12 23:18:47	xplat|work	Max is an example, but is it the only example?
2016-01-12 23:19:01	synergistics	exio4: what, Haskell or the papers? 
2016-01-12 23:19:12	◀	adam___ (~adam@static-50-53-43-165.bvtn.or.frontiernet.net) has quit (Ping timeout: 276 seconds)
2016-01-12 23:19:12	◀	Y_Ichiro (~Y_Ichiro@104.238.169.42) has quit (Remote host closed the connection)
2016-01-12 23:19:13	◀	mahasamoot (~mahasamoo@24.42.192.202) has quit (Ping timeout: 265 seconds)
2016-01-12 23:19:15	▶	ThaDon1 (~ThaDon@46.166.136.162) has joined #haskell
2016-01-12 23:19:26	dolio	Not necessarily.
2016-01-12 23:19:27	▶	bb010g (uid21050@gateway/web/irccloud.com/x-beqwmhdtctlhxaey) has joined #haskell
2016-01-12 23:19:47	xplat|work	i think it isn't even the only join-semigroup, and all lower-bounded join-semigroups would be this thing
2016-01-12 23:19:47	dolio	If you have natural numbers, then the addition monoid works.
2016-01-12 23:19:50	Jello_Raptor	xplat: positive integers and floats with (+) as the operator and 0 work
2016-01-12 23:20:04	xplat|work	er, not even lower-bounded
2016-01-12 23:20:38	Jello_Raptor	infact, that's what i want to use the typeclass with (it's meant for costs in a search tree monad, and the monad requires that property to ensure ordered output) 
2016-01-12 23:20:54	▶	conal (~textual@104.255.240.10) has joined #haskell
2016-01-12 23:21:21	▶	mac10688 (~mac10688@c-69-180-251-120.hsd1.tn.comcast.net) has joined #haskell
2016-01-12 23:21:31	◀	aranea (~aranea@wikimedia/FalconL) has quit (Quit: leaving)
2016-01-12 23:21:31	◀	erikd (~erikd@hendrix.mega-nerd.net) has quit (Quit: disappearing into the sunset)
2016-01-12 23:21:35	xplat|work	if i had to make up a name for that thing i'd call it a 'left-inflationary monoid'
2016-01-12 23:21:38	▶	mahasamoot (~mahasamoo@24.42.192.202) has joined #haskell
2016-01-12 23:21:49	◀	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has quit (Quit: one more resync needed)
2016-01-12 23:22:26	▶	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has joined #haskell
2016-01-12 23:22:43	kadoban	Why "left"?
2016-01-12 23:22:58	▶	jedws (~jedws@c58-109-75-176.randw4.nsw.optusnet.com.au) has joined #haskell
2016-01-12 23:23:21	Jello_Raptor	xplat: oh oops, '<>' doesn't require commutativity. I actually need both `a <> b >= a` and `a <> b >= b` though *not* `a <> b == b <> a` 
2016-01-12 23:23:43	kadoban	Oh yeah nevermind, about the left thing.
2016-01-12 23:24:17	◀	csd_ (~chris@pool-108-30-122-128.nycmny.fios.verizon.net) has quit (Ping timeout: 256 seconds)
2016-01-12 23:24:31	dolio	I always have to ask "why left," because I can never remember which side of operations matter for designating something "left" vs. "right."
2016-01-12 23:24:32	◀	adam____ (~adam@104.156.228.191) has quit (Ping timeout: 265 seconds)
2016-01-12 23:25:07	dolio	Left because it's bigger than the left, or left because operating from the left results in something greater?
2016-01-12 23:25:09	◀	kurt11 (~Adium@207.191.34.198) has quit (Quit: Leaving.)
2016-01-12 23:25:15	Jello_Raptor	i assumed the first
2016-01-12 23:25:40	dolio	Well, it's obvious since the definition came first.
2016-01-12 23:26:13	▶	kurt11 (~Adium@207.191.34.198) has joined #haskell
2016-01-12 23:26:37	dolio	But if I say, "left seminearring," then you may not know.
2016-01-12 23:26:46	dolio	And I don't know, because I can't remember.
2016-01-12 23:27:04	zachk	Jello_Raptor so you want a :  a + b = a and a + b = b forall and b? where + is a  monoid's binary operator? 
2016-01-12 23:27:28	▶	naudiz (~naudiz@ki-omniarts.de) has joined #haskell
2016-01-12 23:27:30	Jello_Raptor	zachk: '>='
2016-01-12 23:27:33	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-12 23:27:38	⚡	zachk looks that up
2016-01-12 23:27:58	zachk	cause I was just gonna say only the neutral element/right identity left identity would sovle that for all
2016-01-12 23:28:02	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-12 23:28:05	Jello_Raptor	It's just Ord's "greater than or equal" 
2016-01-12 23:28:07	◀	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2016-01-12 23:28:24	▶	pacak (~pacak@175.156.145.194) has joined #haskell
2016-01-12 23:28:50	▶	neoncontrails (~neoncontr@2602:304:cc4e:9410:ac5c:f43f:4c79:96ed) has joined #haskell
2016-01-12 23:28:51	◀	Stratege (~Stratege@unaffiliated/stratege) has quit (Ping timeout: 246 seconds)
2016-01-12 23:28:57	◀	mahasamoot (~mahasamoo@24.42.192.202) has quit (Ping timeout: 276 seconds)
2016-01-12 23:29:30	dolio	I have the same problem with 'shallow' and 'deep' embeddings.
2016-01-12 23:29:57	◀	chrisbarrett (~chrisb@121.98.103.14) has quit (Ping timeout: 256 seconds)
2016-01-12 23:29:58	▶	luismilanoolivei (~luismilan@acesso-98-84.persisinternet.com.br) has joined #haskell
2016-01-12 23:30:36	◀	plucas (~plucas@8.18.218.175) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-12 23:30:38	▶	dfeuer (~dfeuer@pool-72-83-145-184.washdc.fios.verizon.net) has joined #haskell
2016-01-12 23:30:38	◀	dfeuer (~dfeuer@pool-72-83-145-184.washdc.fios.verizon.net) has quit (Changing host)
2016-01-12 23:30:38	▶	dfeuer (~dfeuer@wikimedia/Dfeuer) has joined #haskell
2016-01-12 23:30:52	▶	Mikas (~adas@cpe-109-60-40-156.st4.cable.xnet.hr) has joined #haskell
2016-01-12 23:31:09	◀	alexa_ (~alexandra@80-244-92-113.customer.t3.se) has quit (Ping timeout: 255 seconds)
2016-01-12 23:31:47	◀	amigojapan (~amigojapa@unaffiliated/amigojapan) has quit (Quit: amigojapan)
2016-01-12 23:31:55	◀	adek (~adek@199.201.64.136) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-12 23:32:10	▶	marchelzo_ (~marchelzo@unaffiliated/marchelzo/x-2669545) has joined #haskell
2016-01-12 23:32:14	ℹ	silver_ is now known as silver
2016-01-12 23:32:58	⚡	hackagebot imagemagick 0.0.4 - bindings to imagemagick library  https://hackage.haskell.org/package/imagemagick-0.0.4 (AlexanderVershilov)
2016-01-12 23:33:00	⚡	hackagebot memory 0.11 - memory and related abstraction stuff  https://hackage.haskell.org/package/memory-0.11 (VincentHanquez)
2016-01-12 23:33:04	zachk	Jello_Raptor is your (<>) just mappend in a monoid? 
2016-01-12 23:33:08	▶	plucas (~plucas@8.18.218.175) has joined #haskell
2016-01-12 23:33:21	monochrom	David Bowie would have appreciated hearing about left semi ear-ring. He might have tried it.
2016-01-12 23:33:56	▶	rasen (~rasen@impressed.contract.volia.net) has joined #haskell
2016-01-12 23:34:04	◀	zachk (~zsh@unaffiliated/zachk) has quit (Quit: bbl)
2016-01-12 23:34:20	Jello_Raptor	zachk: yes
2016-01-12 23:34:30	▶	Black-Wolf (~Black-Wol@114.139.61.94.rev.vodafone.pt) has joined #haskell
2016-01-12 23:34:41	Jello_Raptor	monochrom: I was worried it was just me :P
2016-01-12 23:34:50	monochrom	I love puns.
2016-01-12 23:34:57	▶	vF3hNGxc47h8 (~androirc@179.110.33.156) has joined #haskell
2016-01-12 23:35:17	monochrom	Here is one I just invented this morning. What is unix, in a nutshell? Answer: it consists of a kernel and a shell.
2016-01-12 23:35:19	◀	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-12 23:36:33	▶	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has joined #haskell
2016-01-12 23:36:35	zipper	Hello, say I want to run a server so I have a function `runServer` that runs forver. The problem is the server takes an application that only it calls.
2016-01-12 23:36:47	▶	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-12 23:36:51	▶	adek (~adek@199.201.64.136) has joined #haskell
2016-01-12 23:36:54	▶	kungp (~kp@185.21.217.80) has joined #haskell
2016-01-12 23:37:03	zipper	My problem is that I want to be able to call the application severally while the server runs
2016-01-12 23:37:13	zipper	Does this make sense or do I need an example?
2016-01-12 23:37:23	monochrom	what is the type of runServer?
2016-01-12 23:37:50	▶	yfeldblum (~yfeldblum@2620:10d:c090:200::6:1d6c) has joined #haskell
2016-01-12 23:38:04	zipper	monochrom: Give me a sec to show you
2016-01-12 23:38:21	◀	pavolzetor (9b6213cd@gateway/web/freenode/ip.155.98.19.205) has quit (Quit: Page closed)
2016-01-12 23:38:22	◀	synergistics (~synergist@2601:154:8102:4299:6444:8fd2:2421:a985) has quit (Ping timeout: 240 seconds)
2016-01-12 23:38:28	▶	ksj (~ksj@d40a979f.rev.stofanet.dk) has joined #haskell
2016-01-12 23:38:36	zipper	I'm having issues accesing hackage page on Network.WebSockets
2016-01-12 23:38:40	zipper	Slow internet
2016-01-12 23:38:51	◀	amdi_ (~amdi_@pool-173-75-44-5.pitbpa.fios.verizon.net) has quit (Quit: amdi_)
2016-01-12 23:39:09	monochrom	do you have docs on your hard disk?
2016-01-12 23:39:10	▶	osa1 (~omer@2601:801:1:4a07:2ab2:bdff:fedf:fa66) has joined #haskell
2016-01-12 23:39:10	◀	osa1 (~omer@2601:801:1:4a07:2ab2:bdff:fedf:fa66) has quit (Changing host)
2016-01-12 23:39:10	▶	osa1 (~omer@haskell/developer/osa1) has joined #haskell
2016-01-12 23:39:17	zipper	monochrom: https://hackage.haskell.org/package/websockets-0.9.3.0/docs/Network-WebSockets.html#v:runServer
2016-01-12 23:39:25	zipper	monochrom: The internet
2016-01-12 23:39:28	monochrom	if you overrode a devious cabal default, you would have docs on your hard disk
2016-01-12 23:39:33	▶	amdi_ (~amdi_@pool-173-75-44-5.pitbpa.fios.verizon.net) has joined #haskell
2016-01-12 23:39:42	◀	obadz (~obadz@unaffiliated/obadz) has quit (Ping timeout: 246 seconds)
2016-01-12 23:39:48	zipper	monochrom: I didn't know that will work on it.
2016-01-12 23:39:51	monochrom	http://www.vex.net/~trebla/haskell/cabal-cabal.xhtml#config
2016-01-12 23:40:00	◀	jbiesnecker (~textual@199.201.64.129) has quit (Ping timeout: 276 seconds)
2016-01-12 23:40:02	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-12 23:40:06	zipper	monochrom: Please lets stay on topic :)
2016-01-12 23:40:19	◀	conal (~textual@104.255.240.10) has quit (Quit: Computer has gone to sleep.)
2016-01-12 23:40:22	monochrom	an app has type PendingConnection -> IO ()
2016-01-12 23:40:28	zipper	Yes
2016-01-12 23:40:32	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-12 23:40:42	zipper	But I am unable to call the app from outside runServer
2016-01-12 23:40:49	▶	lethjakman (~lethjakma@71.56.221.51) has joined #haskell
2016-01-12 23:40:55	◀	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has quit (Client Quit)
2016-01-12 23:40:57	zipper	Is there a way to call runServer like I would call the print function?
2016-01-12 23:40:58	monochrom	so I think you mean: runServer "localhost" 80 (\c -> app c >> app c >> app c)
2016-01-12 23:41:07	dfeuer	How the HECK does reifyTypeable work?
2016-01-12 23:41:16	dfeuer	The code looks horrifying and mysterious.
2016-01-12 23:41:19	zipper	I want to use websockets to stream data that is being printed to the browser
2016-01-12 23:41:20	▶	zachk (~zsh@unaffiliated/zachk) has joined #haskell
2016-01-12 23:41:46	▶	dlundy (~dlundy@185.21.217.16) has joined #haskell
2016-01-12 23:41:50	zipper	monochrom: I'm not sure.
2016-01-12 23:42:02	▶	conal (~textual@104.255.240.10) has joined #haskell
2016-01-12 23:42:21	zipper	Just as long as I am able to pass Text to the app. I can't call runServer more than once
2016-01-12 23:42:29	zipper	Let me show you some code I wrote
2016-01-12 23:42:39	▶	t0by (~t0by@host135-247-dynamic.4-87-r.retail.telecomitalia.it) has joined #haskell
2016-01-12 23:42:41	monochrom	I don't think I will understand
2016-01-12 23:42:53	▶	martin-t_ (~martin-t@199.201.64.131) has joined #haskell
2016-01-12 23:42:58	▶	techy (~u0_a121@c-71-233-10-81.hsd1.ma.comcast.net) has joined #haskell
2016-01-12 23:42:59	zipper	monochrom: How so? It's simple
2016-01-12 23:42:59	◀	kungp (~kp@185.21.217.80) has quit (Ping timeout: 272 seconds)
2016-01-12 23:43:01	◀	zeroed (~zeroed@unaffiliated/zeroed) has quit (Quit: leaving)
2016-01-12 23:43:03	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-12 23:43:11	◀	Mikas (~adas@cpe-109-60-40-156.st4.cable.xnet.hr) has quit (Quit: IRC)
2016-01-12 23:43:12	◀	martin-t (~martin-t@199.201.64.134) has quit (Read error: Connection reset by peer)
2016-01-12 23:43:22	◀	coeus (~coeus@dslb-088-076-125-113.088.076.pools.vodafone-ip.de) has quit (Ping timeout: 240 seconds)
2016-01-12 23:43:28	▶	erkin (~erkin@unaffiliated/erkin) has joined #haskell
2016-01-12 23:43:29	glittershark	zipper: are you looking for something like forkIO?
2016-01-12 23:43:29	▶	yqt (~yqt@81.88.230.28) has joined #haskell
2016-01-12 23:43:29	▶	adek_ (~adek@199.201.64.136) has joined #haskell
2016-01-12 23:43:35	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-12 23:43:54	◀	strburst (~allen@lawn-128-61-28-161.lawn.gatech.edu) has quit (Ping timeout: 276 seconds)
2016-01-12 23:44:15	zipper	glittershark: No I don't think forkIO would help in this case.
2016-01-12 23:44:22	zipper	but I could try idk
2016-01-12 23:44:28	monochrom	one single app, even one single run of one single app, can already stream as much data as many times as you want. you shouldn't need to run that app multiple times just to stream a lot of data. (assuming just one "session")
2016-01-12 23:44:43	▶	dmj` (~user@c-50-158-126-110.hsd1.il.comcast.net) has joined #haskell
2016-01-12 23:45:09	zipper	monochrom: yes
2016-01-12 23:45:17	zipper	but how will I get data to that app
2016-01-12 23:45:20	zipper	?
2016-01-12 23:45:32	zipper	monochrom: glittershark https://gist.github.com/urbanslug/eda1b605e45433e730c3
2016-01-12 23:45:33	◀	pantsman_ (~pantsman@cpc85034-haye22-2-0-cust50.17-4.cable.virginm.net) has quit (Ping timeout: 255 seconds)
2016-01-12 23:45:34	monochrom	you create the data, no?
2016-01-12 23:45:48	◀	lethjakman (~lethjakma@71.56.221.51) has quit (Ping timeout: 265 seconds)
2016-01-12 23:45:50	◀	baweaver (~baweaver@173.230.196.25) has quit (Remote host closed the connection)
2016-01-12 23:46:03	zipper	monochrom: Yeah how will I call the sendTextData severally?
2016-01-12 23:46:09	◀	adek (~adek@199.201.64.136) has quit (Ping timeout: 272 seconds)
2016-01-12 23:46:18	◀	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2016-01-12 23:46:22	zipper	glittershark: I could forkIO line 7
2016-01-12 23:46:24	zipper	idk
2016-01-12 23:46:50	◀	dlundy (~dlundy@185.21.217.16) has quit (Remote host closed the connection)
2016-01-12 23:46:54	◀	takuan (~takuan@178-116-211-108.access.telenet.be) has quit (Ping timeout: 255 seconds)
2016-01-12 23:46:59	monochrom	ok, I don't understand.
2016-01-12 23:47:07	zipper	or how will I just print to the browser?
2016-01-12 23:47:21	zipper	monochrom: Which part? You're such a clever guy :(
2016-01-12 23:47:24	◀	z16 (~zed@ffxidb.com) has quit (Ping timeout: 246 seconds)
2016-01-12 23:48:00	zipper	monochrom: You've helped me severally
2016-01-12 23:48:02	◀	osa1 (~omer@haskell/developer/osa1) has quit (Ping timeout: 240 seconds)
2016-01-12 23:48:07	▶	osa1_ (~omer@2601:801:1:4a07:2ab2:bdff:fedf:fa66) has joined #haskell
2016-01-12 23:48:30	▶	synergistics (~synergist@2601:154:8102:4299:6444:8fd2:2421:a985) has joined #haskell
2016-01-12 23:48:39	▶	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-12 23:48:39	glittershark	I mean
2016-01-12 23:48:43	glittershark	you'd need to make a *client*
2016-01-12 23:48:43	◀	synergistics (~synergist@2601:154:8102:4299:6444:8fd2:2421:a985) has quit (Client Quit)
2016-01-12 23:48:54	glittershark	to connect to those websockets
2016-01-12 23:48:56	glittershark	in Javascript
2016-01-12 23:48:58	▶	synergistics (~synergist@2601:154:8102:4299:6444:8fd2:2421:a985) has joined #haskell
2016-01-12 23:49:04	◀	conal (~textual@104.255.240.10) has quit (Quit: Computer has gone to sleep.)
2016-01-12 23:49:04	zipper	glittershark: There is a client in the browser
2016-01-12 23:49:12	glittershark	okay?
2016-01-12 23:49:23	glittershark	so that's where you get your data
2016-01-12 23:49:30	◀	dmj` (~user@c-50-158-126-110.hsd1.il.comcast.net) has quit (Ping timeout: 246 seconds)
2016-01-12 23:50:09	▶	adek (~adek@199.201.64.136) has joined #haskell
2016-01-12 23:50:10	zipper	No
2016-01-12 23:50:23	zipper	I want to get the data from another part in my application
2016-01-12 23:50:34	glittershark	what other part
2016-01-12 23:50:35	◀	chaosmasttter (~chaosmast@p54B7F8CF.dip0.t-ipconnect.de) has quit (Quit: WeeChat 1.3)
2016-01-12 23:50:39	◀	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has quit (Client Quit)
2016-01-12 23:50:40	glittershark	a file? a database?
2016-01-12 23:50:45	zipper	Like literally write `print` from the standard library but for the browser
2016-01-12 23:51:01	▶	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-12 23:51:01	glittershark	so you want to send data to the websocket?
2016-01-12 23:51:09	◀	moltalk101 (~axeld@cable-dynamic-87-245-125-198.shinternet.ch) has left #haskell
2016-01-12 23:51:15	zipper	It's generated as we go by updateSession from ide-backend
2016-01-12 23:51:19	zipper	glittershark: Yes
2016-01-12 23:51:25	zipper	To the websocket server
2016-01-12 23:51:26	◀	goodacre-liam (~goodacre-@host-92-29-243-41.as13285.net) has quit (Quit: Leaving)
2016-01-12 23:51:31	glittershark	`sendTextData`
2016-01-12 23:51:34	zipper	Which sends to the cleint in the browser
2016-01-12 23:51:45	◀	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has quit (Remote host closed the connection)
2016-01-12 23:51:46	zachk	you could just serve a page off your webserver and have the web client poll for updates to it 
2016-01-12 23:51:46	glittershark	`sendTextData :: WebSocketsData a => Connection -> a -> IO ()`
2016-01-12 23:51:56	◀	adek_ (~adek@199.201.64.136) has quit (Ping timeout: 245 seconds)
2016-01-12 23:52:00	zipper	glittershark: That is what I have but calling sendTextData severally is almost impossible.
2016-01-12 23:52:01	monochrom	that's too bad for you. if the client side stops making request, there is no such thing as "print to the browser".
2016-01-12 23:52:03	▶	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined #haskell
2016-01-12 23:52:12	glittershark	well
2016-01-12 23:52:17	glittershark	this is websockets we're talking about
2016-01-12 23:52:21	zipper	zachk: What now? Please explain
2016-01-12 23:52:24	glittershark	I'm not sure what you mean by "severally"
2016-01-12 23:52:30	monochrom	and the client side can stop making requests because I can simply kill the whole bloody browser.
2016-01-12 23:52:40	▶	obadz (~obadz@unaffiliated/obadz) has joined #haskell
2016-01-12 23:53:05	zachk	you set up a route in your webserver to server a page, and your client keeps checking it and updates the dom from the page, ajax or json only on the page 
2016-01-12 23:53:07	zipper	Well I want the user to see on the browser and their work compiles.
2016-01-12 23:53:15	monochrom	so now your webapp is printing to a much needed audience
2016-01-12 23:53:15	zipper	The output
2016-01-12 23:53:18	zachk	no idea how to get javascript to poll 
2016-01-12 23:53:23	▶	z16 (~zed@ffxidb.com) has joined #haskell
2016-01-12 23:53:32	glittershark	zachk: zipper is using websockets
2016-01-12 23:53:39	zachk	oh, goodluck 
2016-01-12 23:53:49	zipper	glittershark: I could use anything that will work zachk 
2016-01-12 23:53:54	▶	NeverDie (~NeverDie@pool-98-113-171-151.nycmny.fios.verizon.net) has joined #haskell
2016-01-12 23:54:09	◀	chrisramsey (~chrisrams@192.171.117.210) has quit (Remote host closed the connection)
2016-01-12 23:54:15	zachk	if you have something half way working with websockets, just use them, they are newer 
2016-01-12 23:54:24	monochrom	the whole control-flow of web apps is the total opposite of what you think, if I guess correctly what you think.
2016-01-12 23:54:48	◀	josdeha_rt (~josdehart@535299F3.cm-6-3c.dynamic.ziggo.nl) has quit (Quit: josdeha_rt)
2016-01-12 23:54:58	◀	Zekka|Sigfig (~zekka@wsip-70-184-90-138.ph.ph.cox.net) has quit (Quit: Zekka|Sigfig)
2016-01-12 23:55:01	zipper	monochrom: Please tell me. The client has to make a request.
2016-01-12 23:55:03	monochrom	the best you can do is to store your latest build log on the disk somewhere, overwriting the old previous build log.
2016-01-12 23:55:20	zipper	monochrom: I can't start the conversation, amirite?
2016-01-12 23:55:23	monochrom	and then, when a client makes a request, you send that file.
2016-01-12 23:55:39	glittershark	yeah, like
2016-01-12 23:55:41	▶	alexa_ (~alexandra@c83-253-235-47.bredband.comhem.se) has joined #haskell
2016-01-12 23:55:47	glittershark	if I'm understanding you correctly
2016-01-12 23:55:49	◀	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has quit (Client Quit)
2016-01-12 23:55:52	glittershark	and I think I finally do
2016-01-12 23:55:57	monochrom	as opposed to "build, send build log, repeat"
2016-01-12 23:56:06	▶	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-12 23:56:09	◀	adek (~adek@199.201.64.136) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-12 23:56:10	glittershark	you have a server process handling websockets, and another asynchronous server process that's doing a long-running process
2016-01-12 23:56:18	glittershark	and you want the latter to send progress to the former
2016-01-12 23:56:27	glittershark	which sounds to me like you need an MVar
2016-01-12 23:56:42	◀	Mirry (~Mirry@181.85-201-80.adsl-dyn.isp.belgacom.be) has quit (Ping timeout: 240 seconds)
2016-01-12 23:56:43	zipper	May I just show you the entire thing?
2016-01-12 23:56:52	glittershark	go ahead
2016-01-12 23:56:55	monochrom	yeah, store the build log on disk or in MVar or in TVar or in IORef
2016-01-12 23:57:04	zachk	or you could go with message passing via Cloud Haskell 
2016-01-12 23:57:15	glittershark	uh
2016-01-12 23:57:22	◀	synergistics (~synergist@2601:154:8102:4299:6444:8fd2:2421:a985) has quit (Ping timeout: 240 seconds)
2016-01-12 23:57:28	glittershark	not sure if that's necessary here tbh
2016-01-12 23:57:33	▶	baweaver (~baweaver@173.230.196.25) has joined #haskell
2016-01-12 23:57:35	glittershark	MVars and TVars are good enough imo
2016-01-12 23:57:35	zipper	There: https://github.com/urbanslug/wai-devel/blob/master/src/Devel/Compile.hs#L111
2016-01-12 23:57:42	◀	umib0zu (~umib0zu@c-50-177-152-117.hsd1.ma.comcast.net) has quit (Quit: umib0zu)
2016-01-12 23:57:54	zipper	Replace print with something like printToBrowser
2016-01-12 23:58:08	glittershark	ok
2016-01-12 23:58:23	monochrom	in fact atomicModifyIORef is the simplest possible
2016-01-12 23:58:24	glittershark	so, yeah, you need something in the thread that's handling websocket connections
2016-01-12 23:58:32	zipper	zachk: I'm unfamiliar with message passing
2016-01-12 23:58:36	◀	croyd (~croyd@129.10.9.37) has quit (Read error: Connection reset by peer)
2016-01-12 23:58:37	glittershark	that's reading from an MVar
2016-01-12 23:58:37	◀	cowlog (~cowlog@106.186.19.122) has quit (Remote host closed the connection)
2016-01-12 23:58:39	◀	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has quit (Remote host closed the connection)
2016-01-12 23:58:49	◀	hiroakip (~hiroaki@ip4d150c8e.dynamic.kabel-deutschland.de) has quit (Ping timeout: 272 seconds)
2016-01-12 23:59:02	glittershark	this is definitely an MVar/TVar/IORef kind of problem
2016-01-12 23:59:03	▶	croyd (~croyd@129.10.9.37) has joined #haskell
2016-01-12 23:59:21	zipper	glittershark: Okay so what should I do? Am I still to use websockets?
2016-01-12 23:59:22	glittershark	pick one of those, write to it from the `finishCompile` function, read from it in your websocket handler
2016-01-12 23:59:26	glittershark	yeah, websockets are fine
2016-01-12 23:59:28	◀	dwins (~dwins@c-73-200-135-248.hsd1.va.comcast.net) has quit
2016-01-12 23:59:30	▶	kungp (~kp@185.21.217.80) has joined #haskell
2016-01-12 23:59:55	▶	joash (~joash@144.138.104.34) has joined #haskell
2016-01-13 00:00:19	zipper	glittershark: So I'll keep looping the sendTextData to read the MVar?
2016-01-13 00:00:25	▶	synergistics (~synergist@2601:154:8102:4299:6444:8fd2:2421:a985) has joined #haskell
2016-01-13 00:00:28	glittershark	yep
2016-01-13 00:00:36	◀	griotspeak (~textual@c-73-237-161-156.hsd1.ga.comcast.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-13 00:00:37	monochrom	no, sendTextData writes to the MVar
2016-01-13 00:00:43	glittershark	no, monochrom 
2016-01-13 00:00:47	zipper	monochrom: No
2016-01-13 00:00:48	◀	plucas (~plucas@8.18.218.175) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-13 00:00:49	glittershark	sendTextData is a WebSocket library funcion
2016-01-13 00:00:52	glittershark	function*
2016-01-13 00:00:56	zipper	It reads from updateStatus
2016-01-13 00:01:00	monochrom	I see
2016-01-13 00:01:07	◀	Zekka (~zekka@wsip-70-184-90-138.ph.ph.cox.net) has quit (Ping timeout: 260 seconds)
2016-01-13 00:01:19	glittershark	so yeah, you have a loop that reads from an MVar and writes it to the websocket
2016-01-13 00:01:19	ℹ	mrowe is now known as mrowe_away
2016-01-13 00:01:40	▶	cowlog (~cowlog@106.186.19.122) has joined #haskell
2016-01-13 00:02:09	▶	griotspeak (~textual@c-73-237-161-156.hsd1.ga.comcast.net) has joined #haskell
2016-01-13 00:02:12	▶	glitters1ark (~griffin@ool-43553952.dyn.optonline.net) has joined #haskell
2016-01-13 00:02:18	zipper	glittershark: and this loop will be handleConnection calling sendTextData severally?
2016-01-13 00:02:35	zipper	glittershark: I think I have a mental image of what I need.
2016-01-13 00:02:37	glittershark	yeah
2016-01-13 00:02:45	zipper	WOW you guys, I have a general question that's totally offtopic but might I actually be clever? I'm surprised.
2016-01-13 00:02:51	glittershark	heh
2016-01-13 00:03:03	zipper	I join this channel and talk to people and feel dumb today I did not
2016-01-13 00:03:06	▶	coddinkn (~coddinkn@128.153.197.141) has joined #haskell
2016-01-13 00:03:09	monochrom	I am not clever. I am only scientific.
2016-01-13 00:03:13	zipper	Guess I'm improving haha
2016-01-13 00:03:15	glittershark	:) I'm glad!
2016-01-13 00:03:21	zipper	monochrom: Oh please, you're modest
2016-01-13 00:03:33	zipper	*being
2016-01-13 00:03:59	monochrom	I don't know about that. there are a lot of clever, unscientific people, and they do much damage.
2016-01-13 00:04:12	▶	dlundy (~dlundy@185.21.217.16) has joined #haskell
2016-01-13 00:04:16	▶	conal (~textual@104.255.240.10) has joined #haskell
2016-01-13 00:04:57	▶	srcerer (~chatzilla@dns2.klsairexpress.com) has joined #haskell
2016-01-13 00:05:03	ℹ	mrowe_away is now known as mrowe
2016-01-13 00:05:15	◀	NightRa (uid40361@gateway/web/irccloud.com/x-vwizvckdlaiyhpte) has quit (Quit: Connection closed for inactivity)
2016-01-13 00:05:21	◀	silver (~silver@93.85.49.120) has quit (Quit: >>=)
2016-01-13 00:05:37	▶	hannelita (~hannelita@2804:14c:a8:27a5:9ddb:9d2f:6150:6ca5) has joined #haskell
2016-01-13 00:05:49	▶	acowley (~user@pool-72-82-172-77.cmdnnj.east.verizon.net) has joined #haskell
2016-01-13 00:05:55	◀	conal (~textual@104.255.240.10) has quit (Client Quit)
2016-01-13 00:06:00	◀	mrmargolis (~mrmargoli@h69-128-47-52.mdsnwi.dedicated.static.tds.net) has quit (Remote host closed the connection)
2016-01-13 00:06:44	zipper	monochrom: True :)
2016-01-13 00:07:17	◀	glitters1ark (~griffin@ool-43553952.dyn.optonline.net) has quit (Ping timeout: 276 seconds)
2016-01-13 00:07:21	◀	neoncontrails (~neoncontr@2602:304:cc4e:9410:ac5c:f43f:4c79:96ed) has quit (Remote host closed the connection)
2016-01-13 00:07:52	▶	emilypi (~emilypi@2604:2000:8006:ef00:1849:4bb:99cb:3c6c) has joined #haskell
2016-01-13 00:08:13	◀	Jeanne-Kamikaze (~Jeanne-Ka@215.Red-83-60-243.dynamicIP.rima-tde.net) has quit (Quit: Leaving)
2016-01-13 00:08:50	▶	adek (~adek@199.201.64.136) has joined #haskell
2016-01-13 00:08:57	◀	glittershark (~griffin@38.108.221.50) has quit (Ping timeout: 255 seconds)
2016-01-13 00:09:30	◀	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-13 00:09:53	◀	hannelita (~hannelita@2804:14c:a8:27a5:9ddb:9d2f:6150:6ca5) has quit (Ping timeout: 240 seconds)
2016-01-13 00:10:25	▶	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-13 00:10:54	▶	L8D (~L8D@cpe-70-123-155-208.austin.res.rr.com) has joined #haskell
2016-01-13 00:11:00	◀	raulfpl (~Raul@189-12-181-42.user.veloxzone.com.br) has quit (Quit: Leaving)
2016-01-13 00:11:55	▶	csd_ (~chris@cpe-24-90-169-55.nyc.res.rr.com) has joined #haskell
2016-01-13 00:12:17	ℹ	Frankablu_ is now known as Frankablu
2016-01-13 00:13:12	◀	a3Dman_ (~3Dman@unaffiliated/a3dman) has quit (Ping timeout: 246 seconds)
2016-01-13 00:13:26	◀	twanvl (~twanvl@dhcp-077-250-086-217.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-13 00:14:02	▶	conal (~textual@104.255.240.10) has joined #haskell
2016-01-13 00:14:42	◀	sputnik_ (~textual@147.8.150.83.ftth.as8758.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-13 00:14:49	▶	a3Dman (~3Dman@unaffiliated/a3dman) has joined #haskell
2016-01-13 00:14:50	▶	newbie (~yqt@81.88.230.28) has joined #haskell
2016-01-13 00:15:14	ℹ	newbie is now known as Guest86427
2016-01-13 00:15:36	◀	jumblerg (~jumblerg@honeydew.cictr.com) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-13 00:15:50	◀	logzet (~quassel@unaffiliated/logzet) has quit (Remote host closed the connection)
2016-01-13 00:16:01	◀	a3Dman (~3Dman@unaffiliated/a3dman) has quit (Max SendQ exceeded)
2016-01-13 00:16:06	◀	bam365 (~blake@23-29-39-194.static.kc.surewest.net) has quit (Ping timeout: 245 seconds)
2016-01-13 00:16:09	▶	sathish_haskell (~sathish_h@75.143.16.8) has joined #haskell
2016-01-13 00:16:30	◀	yqt (~yqt@81.88.230.28) has quit (Ping timeout: 264 seconds)
2016-01-13 00:16:33	◀	csd_ (~chris@cpe-24-90-169-55.nyc.res.rr.com) has quit (Ping timeout: 272 seconds)
2016-01-13 00:16:54	◀	sathish_haskell (~sathish_h@75.143.16.8) has quit (Client Quit)
2016-01-13 00:17:05	◀	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-13 00:17:14	▶	a3Dman (~3Dman@unaffiliated/a3dman) has joined #haskell
2016-01-13 00:17:24	▶	plucas (~plucas@8.18.218.175) has joined #haskell
2016-01-13 00:17:37	◀	osa1_ (~omer@2601:801:1:4a07:2ab2:bdff:fedf:fa66) has quit (Read error: Connection reset by peer)
2016-01-13 00:17:47	▶	osa1_ (~omer@2601:801:1:4a07:2ab2:bdff:fedf:fa66) has joined #haskell
2016-01-13 00:18:09	▶	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-13 00:18:29	impure_hate	ohai. I'm looking for pointers on generating code for other languages from single haskell codebase
2016-01-13 00:18:42	▶	dwarzoax (~dwarzoax@188.166.122.41) has joined #haskell
2016-01-13 00:19:19	▶	choosetwo (~jmeyer@nat.sierrabravo.net) has joined #haskell
2016-01-13 00:19:56	◀	frerich (~frerich@kde/raabe) has quit (Remote host closed the connection)
2016-01-13 00:19:59	▶	yfeldblu_ (~yfeldblum@199.201.64.138) has joined #haskell
2016-01-13 00:20:22	◀	wanderleyguima (~wanderley@199.201.64.2) has quit (Ping timeout: 260 seconds)
2016-01-13 00:20:47	▶	Denommus (~user@unaffiliated/denommus) has joined #haskell
2016-01-13 00:21:18	◀	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has quit (Client Quit)
2016-01-13 00:21:34	▶	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-13 00:21:40	▶	neoncontrails (~neoncontr@76-196-233-65.lightspeed.sndgca.sbcglobal.net) has joined #haskell
2016-01-13 00:21:41	◀	{AS} (uid45026@gateway/web/irccloud.com/x-fuqgmtqpfaoiwsii) has quit (Quit: Connection closed for inactivity)
2016-01-13 00:21:47	▶	csd_ (~chris@cpe-24-90-169-55.nyc.res.rr.com) has joined #haskell
2016-01-13 00:22:02	◀	yfeldblum (~yfeldblum@2620:10d:c090:200::6:1d6c) has quit (Ping timeout: 240 seconds)
2016-01-13 00:22:15	▶	Jaume (~jaume@CPEbc4dfbd1f493-CMbc4dfbd1f490.cpe.net.cable.rogers.com) has joined #haskell
2016-01-13 00:22:22	◀	spuz_ (~spuzz@host-2-96-179-218.as13285.net) has quit (Ping timeout: 240 seconds)
2016-01-13 00:22:23	◀	luismilanoolivei (~luismilan@acesso-98-84.persisinternet.com.br) has quit
2016-01-13 00:22:25	◀	coddinkn (~coddinkn@128.153.197.141) has quit (Quit: WeeChat 1.0.1)
2016-01-13 00:22:31	◀	Jellydog (~Jellykuf@c-94-255-245-165.cust.bredband2.com) has quit (Ping timeout: 250 seconds)
2016-01-13 00:23:04	▶	jetho (~jetho@191.242.128.202) has joined #haskell
2016-01-13 00:23:29	◀	dwarzoax (~dwarzoax@188.166.122.41) has quit (Client Quit)
2016-01-13 00:23:34	ℹ	mrowe is now known as mrowe_away
2016-01-13 00:24:30	▶	ziocroc (~ziocroc@151.74.99.167) has joined #haskell
2016-01-13 00:25:00	◀	kori (~kori@46.101.119.102) has left #haskell ("WeeChat 1.3")
2016-01-13 00:25:18	▶	jmcarthur (~jmcarthur@pool-72-89-137-39.nycmny.fios.verizon.net) has joined #haskell
2016-01-13 00:25:22	◀	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has quit (Client Quit)
2016-01-13 00:25:22	▶	i-amd3 (~i_amd3@125x102x70x118.ap125.ftth.ucom.ne.jp) has joined #haskell
2016-01-13 00:25:34	◀	albertus1 (~albertus1@x55b5c7ba.dyn.telefonica.de) has quit (Quit: Leaving.)
2016-01-13 00:25:55	◀	kungp (~kp@185.21.217.80) has quit (Ping timeout: 265 seconds)
2016-01-13 00:26:05	▶	martin-t (~martin-t@199.201.64.131) has joined #haskell
2016-01-13 00:26:27	◀	pbgc (~pbgc@bl21-152-17.dsl.telepac.pt) has quit (Quit: Computer has gone to sleep.)
2016-01-13 00:27:12	▶	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has joined #haskell
2016-01-13 00:27:43	◀	dlundy (~dlundy@185.21.217.16) has quit (Ping timeout: 250 seconds)
2016-01-13 00:28:10	▶	erikd (~erikd@113.29.24.25) has joined #haskell
2016-01-13 00:28:16	▶	frerich (~frerich@kde/raabe) has joined #haskell
2016-01-13 00:28:53	Gurkenglas	Can we have Data.Functor.Foldable added to lambdabot?
2016-01-13 00:29:02	Gurkenglas	@let import Data.Functor.Foldable
2016-01-13 00:29:03	lambdabot	 .L.hs:88:1:
2016-01-13 00:29:03	lambdabot	     Failed to load interface for ‘Data.Functor.Foldable’
2016-01-13 00:29:03	lambdabot	     Use -v to see a list of the files searched for.
2016-01-13 00:29:06	◀	martin-t_ (~martin-t@199.201.64.131) has quit (Ping timeout: 264 seconds)
2016-01-13 00:29:25	Gurkenglas	int-e?
2016-01-13 00:30:04	◀	adek (~adek@199.201.64.136) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-13 00:30:06	◀	tomboy64 (~tomboy64@unaffiliated/tomboy64) has quit (Ping timeout: 255 seconds)
2016-01-13 00:30:27	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-13 00:30:46	ℹ	irc: disconnected from server
2016-01-13 20:41:04	▶	psyq (~Psyq@unaffiliated/psyq) has joined #haskell
2016-01-13 20:41:04	ℹ	Topic for #haskell is "http://www.haskell.org/ | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | http://reddit.com/r/haskell | Administrative issues: #haskell-ops | Hackage status? http://status.haskell.org | http://downloads.haskell.org"
2016-01-13 20:41:04	ℹ	Topic set by quicksilver on Wed, 07 Oct 2015 16:39:51
2016-01-13 20:41:04	ℹ	Channel #haskell: 1541 nicks (1 op, 0 voices, 1540 normals)
2016-01-13 20:41:04	ℹ	Notice(rajaniemi.freenode.net): [freenode-info] channel trolls and no channel staff around to help? please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
2016-01-13 20:41:05	ℹ	URL for #haskell: http://www.haskell.org/
2016-01-13 20:41:18	◀	eze (~eze@190.193.33.10) has quit (Quit: Saliendo)
2016-01-13 20:41:32	ℹ	Channel created on Sun, 26 Nov 2006 07:42:48
2016-01-13 20:41:42	◀	{AS} (uid45026@gateway/web/irccloud.com/x-fmqgfqdboozwmdqz) has quit (Quit: Connection closed for inactivity)
2016-01-13 20:41:43	byorgey	the comonad of things on which you can hang your cot and hat
2016-01-13 20:41:57	◀	pytmand (~pytmand@80-71-135-134.u.parknet.dk) has quit (Ping timeout: 250 seconds)
2016-01-13 20:42:17	▶	brainproxy (~michael@pdpc/supporter/gold/brainproxy) has joined #haskell
2016-01-13 20:42:49	◀	Ziltrum (~Destol@public-113-77.nat.utoronto.ca) has quit (Ping timeout: 250 seconds)
2016-01-13 20:43:23	▶	hilquias (~user@unaffiliated/hilquias) has joined #haskell
2016-01-13 20:43:35	▶	Zekka (~zekka@wsip-70-184-90-138.ph.ph.cox.net) has joined #haskell
2016-01-13 20:43:44	MatthiasHu	Is there a common symbol for flip (.) that is not used otherwise by Control.Lens? :-)
2016-01-13 20:43:51	◀	kurt11 (~Adium@207.191.34.198) has quit (Quit: Leaving.)
2016-01-13 20:43:58	▶	frerich (~frerich@kde/raabe) has joined #haskell
2016-01-13 20:44:16	byorgey	MatthiasHu: Control.Arrow.>>>
2016-01-13 20:44:18	glittershark	@hoogle (a -> b) -> (b -> c) -> a -> c
2016-01-13 20:44:19	lambdabot	Prelude (.) :: (b -> c) -> (a -> b) -> a -> c
2016-01-13 20:44:19	lambdabot	Data.Function (.) :: (b -> c) -> (a -> b) -> a -> c
2016-01-13 20:44:19	lambdabot	Control.Parallel.Strategies (-|) :: (a -> b) -> Strategy b -> (b -> c) -> (a -> c)
2016-01-13 20:44:24	▶	SageEx (~SageEx@14.139.194.12) has joined #haskell
2016-01-13 20:44:36	glittershark	:t (>>>)
2016-01-13 20:44:38	lambdabot	forall (k :: BOX) (cat :: k -> k -> *) (a :: k) (b :: k) (c :: k). Category cat => cat a b -> cat b c -> cat a c
2016-01-13 20:44:40	▶	Zekka|Sigfig (~zekka@wsip-70-184-90-138.ph.ph.cox.net) has joined #haskell
2016-01-13 20:44:42	byorgey	actually I guess it is from Control.Category, and re-exported from Control.Arrow
2016-01-13 20:44:55	◀	dmwit (~dmwit@71-36-127-34.ptld.qwest.net) has quit (Ping timeout: 276 seconds)
2016-01-13 20:44:56	byorgey	^^^ the above type may look forbidding, just replace 'cat' with (->) everywhere
2016-01-13 20:45:00	glittershark	yep
2016-01-13 20:45:02	◀	mag__ (~mag@179.52.47.89) has quit (Remote host closed the connection)
2016-01-13 20:45:08	jewels	byorgey: I want to define a FuzzySet that has a generic Lattice as a membership value. If the mu function is applied to a FuzzySet with ZadehMembership, then it should return the Zadeh lattice's bottom, a PA lattice's bottom otherwise.
2016-01-13 20:45:08	▶	meoblast001 (~meoblast@5.28.88.190) has joined #haskell
2016-01-13 20:45:09	glittershark	and ignore the bit between `forall` and `.`
2016-01-13 20:45:21	glittershark	it matters, but not as far as you're concerned
2016-01-13 20:45:41	nexsja	are mathematical operators considered functions in haskell?
2016-01-13 20:45:46	glittershark	yes
2016-01-13 20:45:49	glittershark	:t (+)
2016-01-13 20:45:50	lambdabot	Num a => a -> a -> a
2016-01-13 20:46:09	Denommus	uh
2016-01-13 20:46:21	MatthiasHu	thx all. then i'll probably settle for (>>>), though it seems a little long for such a fundamental operation ;-)
2016-01-13 20:46:31	Denommus	is there anything like bash's cmp in Haskell (that compares two IO String or two IO ByteString)?
2016-01-13 20:46:39	nexsja	thanks, was curious because you could do (+) 5 3 
2016-01-13 20:46:41	nexsja	and get a result
2016-01-13 20:46:45	glittershark	> "abc" < "bca"
2016-01-13 20:46:47	lambdabot	 True
2016-01-13 20:46:54	▶	DanielDiaz (~smuxi@70.Red-80-24-244.staticIP.rima-tde.net) has joined #haskell
2016-01-13 20:47:08	glittershark	"abc" `compare` "bca"
2016-01-13 20:47:23	▶	t0by (~t0by@host199-51-dynamic.14-87-r.retail.telecomitalia.it) has joined #haskell
2016-01-13 20:47:25	▶	kurt11 (~Adium@207.191.34.198) has joined #haskell
2016-01-13 20:47:34	byorgey	jewels: that doesn't make sense.  In Haskell you can't do things like "if such-and-such return this type, else return this other type"
2016-01-13 20:47:42	▶	coot_ (~marcin@bl5-234-92.dsl.telepac.pt) has joined #haskell
2016-01-13 20:47:54	byorgey	jewels: however, you certainly can say "return an element of whatever lattice corresponds to this FuzzySet"
2016-01-13 20:47:58	glittershark	Denommus: if they're in IO, you can just `(>) <$> string1 <*> string2`
2016-01-13 20:48:02	byorgey	which is what the type of mu currently says.
2016-01-13 20:48:11	byorgey	and it should be fine to just say   Nothing -> Lattice.bottom
2016-01-13 20:48:22	byorgey	it will pick the right lattice based on the type of the FuzzySet.
2016-01-13 20:48:22	◀	jophish_ (~jophish@dab-far1-h-10-10.dab.02.net) has quit (Ping timeout: 256 seconds)
2016-01-13 20:49:05	◀	latro`a_ (~latro`a@2601:14a:4002:86bb:7c40:b1f1:2cf0:39d5) has quit (Read error: Connection reset by peer)
2016-01-13 20:49:22	Denommus	glittershark: hm. I was talking about bash cmp, but I think that'll do
2016-01-13 20:49:29	▶	latro`a_ (~latro`a@2601:14a:4002:86bb:7c40:b1f1:2cf0:39d5) has joined #haskell
2016-01-13 20:49:31	◀	NeverDie (~NeverDie@pool-98-113-171-151.nycmny.fios.verizon.net) has quit (Quit: http://radiux.io/)
2016-01-13 20:49:31	glittershark	Denommus: there's also `compare`
2016-01-13 20:49:40	glittershark	> "abc" `compare` "bca"
2016-01-13 20:49:43	lambdabot	 LT
2016-01-13 20:49:58	byorgey	Denommus: in what sense do you want something "like" bash's cmp?
2016-01-13 20:50:58	◀	nilg` (~user@77.70.2.229) has quit (Remote host closed the connection)
2016-01-13 20:51:02	jle`	nexsja: you can also define your own operators, like normal functions
2016-01-13 20:51:03	byorgey	a related question is, what should the type be of the thing you want?
2016-01-13 20:51:06	▶	mag__ (~mag@179.52.47.89) has joined #haskell
2016-01-13 20:51:07	Denommus	byorgey: cmp is basically liftA2 (/=)
2016-01-13 20:51:30	◀	usershell (~usershell@41.136.66.241) has quit (Remote host closed the connection)
2016-01-13 20:52:02	byorgey	Denommus: OK, so is  liftA2 (/=)  not what you want?
2016-01-13 20:52:22	◀	oisdk_ (~oisdk_@95.45.70.25) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-13 20:52:31	Denommus	byorgey: yes
2016-01-13 20:52:34	◀	amyers (~icarus127@128.177.89.240.available.zip.zayo.com) has quit (Quit: Leaving)
2016-01-13 20:52:59	◀	cir0x (~Adium@dslb-094-221-060-159.094.221.pools.vodafone-ip.de) has quit (Quit: Leaving.)
2016-01-13 20:53:09	▶	zivoni (~zivoni@ip-94-112-185-98.net.upcbroadband.cz) has joined #haskell
2016-01-13 20:53:33	◀	M-Illandan (illandanma@gateway/shell/matrix.org/x-vppczvybjujoacaw) has quit (Quit: node-irc says goodbye)
2016-01-13 20:53:54	▶	askalski (~akuda@abbf101.neoplus.adsl.tpnet.pl) has joined #haskell
2016-01-13 20:53:55	▶	cir0x (~Adium@dslb-094-221-060-159.094.221.pools.vodafone-ip.de) has joined #haskell
2016-01-13 20:54:30	▶	mattyw (~mattyw@host109-152-212-76.range109-152.btcentralplus.com) has joined #haskell
2016-01-13 20:54:52	▶	slomo (~slomo@unaffiliated/slomo) has joined #haskell
2016-01-13 20:55:16	dzdncnfzd	If I have a type Foo and an instance of fromJSON Foo (:t fromJSON :: Alternative f => Value -> f a) is there a way of applying fromJSON to a Bytestring without using decode?
2016-01-13 20:55:21	▶	jophish (~jophish@dab-far1-h-1-5.dab.02.net) has joined #haskell
2016-01-13 20:55:22	dzdncnfzd	(this is in Aeson)
2016-01-13 20:55:22	▶	gamegoblin (~grant@64.187.168.233) has joined #haskell
2016-01-13 20:56:24	drdo	dzdncnfzd: What do you want to do?
2016-01-13 20:56:33	▶	edwinvdg_ (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-13 20:56:36	Denommus	Haskell package management with Nix is so great
2016-01-13 20:57:15	dzdncnfzd	drdo: I'm parsing JSON and using it to construct a list of a custom datatype
2016-01-13 20:57:37	Ankhers	dzdncnfzd: What is your reason for not using decode?
2016-01-13 20:57:39	byorgey	dzdncnfzd: decode will automatically call fromJSON for you
2016-01-13 20:57:43	drdo	dzdncnfzd: So do you just want fromJSON . decode?
2016-01-13 20:57:57	byorgey	decode == fromJSON . decode !
2016-01-13 20:58:03	dzdncnfzd	drdo: I'm getting an error when I try to decode the JSON using eitherDecode, and google informs me that I need a type hint
2016-01-13 20:58:18	dzdncnfzd	decode gives a value, right?
2016-01-13 20:58:19	drdo	byorgey: Yeah, I thought it returned a Value since he was asking
2016-01-13 20:58:20	◀	thimoteus (~thimoteus@c-71-198-115-131.hsd1.ca.comcast.net) has quit (Quit: leaving)
2016-01-13 20:58:24	Gurkenglas	There should be MonadIO m => X -> StateT s m a -> m a for some identifier type X so you can more purely handle something like IORefs in IO callbacks
2016-01-13 20:58:28	Ankhers	decode someString :: Foo
2016-01-13 20:58:29	◀	xivix (~mike@net-216-37-73-222.in-addr.worldspice.net) has quit (Read error: Connection reset by peer)
2016-01-13 20:58:45	◀	xylen_ (~codywelsh@c-73-189-204-160.hsd1.ca.comcast.net) has quit (Quit: xylen_)
2016-01-13 20:58:52	byorgey	dzdncnfzd: the type of decode is   FromJSON a => ByteString -> Maybe a
2016-01-13 20:58:52	▶	JCI (~JCI@168.235.67.145) has joined #haskell
2016-01-13 20:58:58	▶	dfeuer (~dfeuer@wikimedia/Dfeuer) has joined #haskell
2016-01-13 20:59:02	byorgey	dzdncnfzd: it can give not just Values, but any type which is an instance of FromJSON
2016-01-13 20:59:13	Ankhers	You need to tell the type system what you are getting out of decode. Because decode makes values of a bunch of different types.
2016-01-13 20:59:24	◀	fizbin (~Adium@hqp-p.bcls.lib.nj.us) has quit (Quit: Leaving.)
2016-01-13 20:59:37	▶	erikd (~erikd@113.29.24.25) has joined #haskell
2016-01-13 20:59:40	dzdncnfzd	Ahhhh, I see!
2016-01-13 20:59:47	dzdncnfzd	Thanks! I hadn't caught that.
2016-01-13 21:00:03	Ankhers	:t Data.Aeson.decode
2016-01-13 21:00:05	lambdabot	aeson-0.9.0.1:Data.Aeson.Types.Class.FromJSON a => BSLC.ByteString -> Maybe a
2016-01-13 21:00:11	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Ping timeout: 260 seconds)
2016-01-13 21:00:34	Ankhers	decode someString :: Maybe Foo
2016-01-13 21:00:43	◀	zcourts (~zcourts@cpc5-croy18-2-0-cust555.croy.cable.virginm.net) has quit (Remote host closed the connection)
2016-01-13 21:00:44	Ankhers	I think that is what you are looking for.
2016-01-13 21:02:07	◀	plucas (~plucas@8.18.218.175) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-13 21:02:43	◀	wanderleyguima (~wanderley@199.201.64.2) has quit (Ping timeout: 264 seconds)
2016-01-13 21:02:51	▶	bvad (~bvad@50a1b03c.flatrate.dk) has joined #haskell
2016-01-13 21:03:14	◀	kgadek (~kgadek@atp197.neoplus.adsl.tpnet.pl) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-13 21:03:20	t0by	Hi, I'm doing some exercises from Homework 3 of http://www.seas.upenn.edu/~cis194/, which was suggested on this chan. I believe they are correct, however, I don't like how they turned out, they seem... ugly, especially since the title of the assignment is "Code Gold". I wouldn't know how to further improve them, though. Can anybody give me a hint or two? http://lpaste.net/148953
2016-01-13 21:03:29	◀	Zekka|Sigfig (~zekka@wsip-70-184-90-138.ph.ph.cox.net) has quit (Quit: Zekka|Sigfig)
2016-01-13 21:03:54	▶	pantsman_ (~pantsman@cpc85034-haye22-2-0-cust50.17-4.cable.virginm.net) has joined #haskell
2016-01-13 21:04:16	t0by	(I see lpaste is giving me some suggestions on its own.)
2016-01-13 21:05:01	▶	SavinaRoja (~pablo@208.89.33.100) has joined #haskell
2016-01-13 21:05:12	◀	erochester (~Adium@137.54.9.142) has quit (Quit: Leaving.)
2016-01-13 21:05:36	▶	fizbin (~Adium@hqp-p.bcls.lib.nj.us) has joined #haskell
2016-01-13 21:05:53	▶	xylen_ (~codywelsh@c-73-189-204-160.hsd1.ca.comcast.net) has joined #haskell
2016-01-13 21:06:03	jle`	t0by: if you use length and !! and drop together and separately, that's usually a sign that you're doing some redundant stuff
2016-01-13 21:06:39	jewels	byorgey: Actually I'm not sure how to define it properly. Maybe can you help me?
2016-01-13 21:06:43	◀	joko (~joko@snf-652351.vm.okeanos.grnet.gr) has quit (Changing host)
2016-01-13 21:06:43	▶	joko (~joko@unaffiliated/joko) has joined #haskell
2016-01-13 21:06:48	t0by	jle`, I don't *especially* like !!
2016-01-13 21:07:03	◀	bvad (~bvad@50a1b03c.flatrate.dk) has quit (Ping timeout: 240 seconds)
2016-01-13 21:07:33	jle`	t0by: try splitAt
2016-01-13 21:07:44	jle`	it's like a combination of take and drop
2016-01-13 21:07:51	jle`	and you can pattern match instead of doing a length check
2016-01-13 21:08:14	jewels	byorgey: All the function defined on the fuzzy set should not depend on the specific Lattice because there are the operators defined in Algebra.BoundedLattice that I can use.
2016-01-13 21:08:15	t0by	jle`, how would I pattern match for a given n?
2016-01-13 21:08:32	jle`	t0by: pattern match on the result of `splitAt`
2016-01-13 21:08:39	jle`	> splitAt 5 "hello world"
2016-01-13 21:08:41	lambdabot	 ("hello"," world")
2016-01-13 21:08:59	jle`	> splitAt 20 "hello world"
2016-01-13 21:09:00	lambdabot	 ("hello world","")
2016-01-13 21:09:08	jle`	you can tell if the length is "too long" if the second list is []
2016-01-13 21:10:06	▶	omilu (omilu@iceland.sdf.org) has joined #haskell
2016-01-13 21:10:06	◀	adulteratedjedi (uid95422@gateway/web/irccloud.com/x-exviowkzpuusitfy) has quit (Quit: Connection closed for inactivity)
2016-01-13 21:10:14	◀	Zekka (~zekka@wsip-70-184-90-138.ph.ph.cox.net) has quit (Ping timeout: 240 seconds)
2016-01-13 21:10:27	byorgey	jewels: you should just be able to write   case result of   Nothing -> Lattice.bottom   (Just m) -> m
2016-01-13 21:10:30	byorgey	jewels: does that not work?
2016-01-13 21:10:33	▶	Wassle (~Elssaw_@falcon.184.19.53.206.cos.dyn.pcisys.net) has joined #haskell
2016-01-13 21:10:38	wlad	Guys, I'm doing CIS196 now and stumbled on compiling this example: http://lpaste.net/5277270314240180224
2016-01-13 21:10:58	wlad	There's type in function name when ivoking, but it still doesn't work
2016-01-13 21:11:03	wlad	Any quick tips?
2016-01-13 21:11:30	◀	pbgc (~pbgc@bl21-152-17.dsl.telepac.pt) has quit (Quit: Computer has gone to sleep.)
2016-01-13 21:11:31	Ankhers	wlad: What is the error you are getting?
2016-01-13 21:11:32	byorgey	wlad: what is the error?
2016-01-13 21:11:47	wlad	 Couldn't match expected type `Integer' with actual type `[Integer]'
2016-01-13 21:11:51	◀	animated (~mike@207.35.29.137) has quit (Ping timeout: 260 seconds)
2016-01-13 21:11:59	▶	visof (~visof@156.198.6.58) has joined #haskell
2016-01-13 21:12:03	byorgey	wlad: what is the type of 'hailstone' ?
2016-01-13 21:12:06	▶	fizbin1 (~Adium@hqp-p.bcls.lib.nj.us) has joined #haskell
2016-01-13 21:12:34	◀	fizbin (~Adium@hqp-p.bcls.lib.nj.us) has quit (Ping timeout: 255 seconds)
2016-01-13 21:12:35	wlad	There is no such function, that's why I'm asking. Anyone went through cis 194 that knows what's up?
2016-01-13 21:12:36	▶	darkbolt (~darkbolt@64.187.165.143) has joined #haskell
2016-01-13 21:12:49	wlad	Is this a type or is it defined elsewhere?
2016-01-13 21:12:54	byorgey	wlad: there must be, or else you would get an error saying that 'hailstone' is not defined
2016-01-13 21:12:56	wlad	http://www.seas.upenn.edu/~cis194/spring13/lectures/01-intro.html
2016-01-13 21:12:59	◀	nomicflux (~nomicflux@rrcs-98-103-209-78.central.biz.rr.com) has quit (Ping timeout: 246 seconds)
2016-01-13 21:13:03	Ankhers	I don't remember that when going through that course.
2016-01-13 21:13:15	▶	kgadek (~kgadek@atp197.neoplus.adsl.tpnet.pl) has joined #haskell
2016-01-13 21:13:17	wlad	byorgey: I must've confused you. I changed hailstone to hailstoneSeq
2016-01-13 21:13:37	wlad	Otherwise it's first.hs:3:36: Not in scope: `hailstone'
2016-01-13 21:13:39	ReinH	byorgey: a.k.a. fromMaybe Lattice.bottom :)
2016-01-13 21:13:51	byorgey	ReinH: sure, one thing at a time =)
2016-01-13 21:13:56	ReinH	byorgey: oh ok :)
2016-01-13 21:13:57	byorgey	wlad: aha, well, that would explain it =)
2016-01-13 21:14:00	jewels	byorgey: I initialize the set using: 
2016-01-13 21:14:01	jewels	ype of mu currently says.
2016-01-13 21:14:02	◀	jdnavarro (~danny@89.Red-83-43-208.dynamicIP.rima-tde.net) has quit (Ping timeout: 245 seconds)
2016-01-13 21:14:03	jewels	[20:48:03] <byorgey>
2016-01-13 21:14:07	wlad	Full excerpt: http://lpaste.net/5277270314240180224
2016-01-13 21:14:10	byorgey	wlad: hailstone is a different function
2016-01-13 21:14:17	▶	wanderleyguima (~wanderley@199.201.64.2) has joined #haskell
2016-01-13 21:14:21	byorgey	wlad: it is actually defined in the lecture notes
2016-01-13 21:14:29	wlad	byorgey: thanks!
2016-01-13 21:14:41	jewels	byorgey: Sorry. This is the code that I use to initialize the fuzzy set -> let fs = Map.fromList [(1, Z 0.2), (2, Z 0.3)]
2016-01-13 21:15:00	▶	jesyspa (~jesyspa@unaffiliated/jesyspa) has joined #haskell
2016-01-13 21:15:04	byorgey	jewels: ok
2016-01-13 21:15:08	▶	strburst (~allen@lawn-128-61-28-161.lawn.gatech.edu) has joined #haskell
2016-01-13 21:15:20	jewels	byorgey: I call mu in this way -> mu fs 1 and I get mu fs 1 :: ZadehMembership
2016-01-13 21:15:32	byorgey	jewels: makes sense
2016-01-13 21:15:42	Denommus	I want a somewhat complex function that I have no idea how to start doing
2016-01-13 21:15:44	orion	Is there a difference in terms of performance to have a ReaderT wrapping a StateT vs. the other way around?
2016-01-13 21:15:46	obadz	so herm, is it ok for (>>) to "parallellize" when >>= doesn't ? I suppose it means that (>>) could succeed when >>= doesn't ?
2016-01-13 21:16:08	▶	creffett|irssi1 (~creffett|@209.95.50.133) has joined #haskell
2016-01-13 21:16:19	◀	zxiiro_ (zxiiro_@gateway/vpn/mullvad/x-whjanuabwvhnjvox) has quit (Ping timeout: 265 seconds)
2016-01-13 21:16:24	jewels	byorgey: We expect 0.2
2016-01-13 21:16:33	▶	erochester (~Adium@d-128-167-72.bootp.Virginia.EDU) has joined #haskell
2016-01-13 21:16:39	◀	puregreen (~puregreen@212.98.172.112) has quit (Read error: Connection reset by peer)
2016-01-13 21:16:49	Denommus	I want to pass two directories, and to return a triple. The first element is the files that are in both directories, the second the files that are only in the first directory, and the third the files that are only in the second directory
2016-01-13 21:16:52	byorgey	jewels: you typed  'mu fs 1'  at a ghci prompt?
2016-01-13 21:16:55	Denommus	I don't care about file contents, only names
2016-01-13 21:16:57	byorgey	(without the quotes)
2016-01-13 21:17:07	◀	FreeFull (~freefull@defocus/sausage-lover) has quit (Ping timeout: 264 seconds)
2016-01-13 21:17:09	jewels	byorgey: Yes
2016-01-13 21:17:18	Denommus	also, that should be recursive (that is, go through every child directory)
2016-01-13 21:17:21	byorgey	jewels: and what did it print?
2016-01-13 21:17:29	jewels	mu fs 1 :: ZadehMembership
2016-01-13 21:17:36	byorgey	jewels: it didn't also print   Z 0.2  ?
2016-01-13 21:17:44	jewels	No, mu fs 1 :: ZadehMembership
2016-01-13 21:17:52	byorgey	jewels: are you sure you didn't put  :t  at the beginning of the line?
2016-01-13 21:18:23	◀	darkbolt (~darkbolt@64.187.165.143) has quit (Ping timeout: 260 seconds)
2016-01-13 21:18:25	Ankhers	Denommus: Build it piece by piece. I would start by building the triple based on the two lists.
2016-01-13 21:18:30	byorgey	mu fs 1 :: ZadehMembership  is the output I would expect if you ask for the *type* of  mu fs 1
2016-01-13 21:18:46	byorgey	but if you ask for it to be *evaluated* it should say   Z 0.2
2016-01-13 21:19:38	▶	Church- (~hatter@unaffiliated/church-) has joined #haskell
2016-01-13 21:19:57	▶	oisdk_ (~oisdk_@95.45.70.25) has joined #haskell
2016-01-13 21:20:10	Denommus	Ankhers: where can I find FilePath manipulation functions?
2016-01-13 21:20:30	byorgey	Denommus: System.FilePath, from http://hackage.haskell.org/package/filepath
2016-01-13 21:20:34	Denommus	Ankhers: since I need to get rid of the absolute part of the directories
2016-01-13 21:20:34	◀	xnil (~xnil@69.43.66.12) has quit (Ping timeout: 240 seconds)
2016-01-13 21:20:41	Denommus	byorgey: thanks
2016-01-13 21:20:46	▶	mgsloan (~mgsloan@174-24-251-119.tukw.qwest.net) has joined #haskell
2016-01-13 21:20:52	Ankhers	Denommus: don't worry about FilePath right now. Just build a function like f :: [String] -> [String] -> ([String], [String], [String])
2016-01-13 21:21:26	jewels	byorgey: I've reloaded the file and now it works. Thank you!
2016-01-13 21:21:33	◀	strburst (~allen@lawn-128-61-28-161.lawn.gatech.edu) has quit (Ping timeout: 260 seconds)
2016-01-13 21:21:40	byorgey	jewels: great!
2016-01-13 21:22:18	▶	baweaver (~baweaver@173.230.196.25) has joined #haskell
2016-01-13 21:22:32	▶	henrique (~henrique_@177.131.178.39) has joined #haskell
2016-01-13 21:23:30	◀	jbiesnecker (~textual@199.201.64.129) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-13 21:24:04	◀	dgpratt (~dpratt71@207.182.208.2) has quit (Quit: Leaving)
2016-01-13 21:25:02	◀	beckyconning_ (uid31604@gateway/web/irccloud.com/x-ebbqqolsujphixhl) has quit (Quit: Connection closed for inactivity)
2016-01-13 21:25:12	▶	chaosmasttter (~chaosmast@p54B7F8CF.dip0.t-ipconnect.de) has joined #haskell
2016-01-13 21:25:17	jewels	byorgey: In this case: http://lpaste.net/148950, I need to match the bottom itself (see 'add' function). Is there a way in order to solve it?
2016-01-13 21:25:20	Denommus	Ankhers: this function is easy to do, the hard part was the makeRelative function
2016-01-13 21:25:35	Denommus	Ankhers: now that I have it, things got easier
2016-01-13 21:25:37	◀	edwinvdg_ (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-13 21:26:09	◀	srenatus (uid322@gateway/web/irccloud.com/x-dfbhvcuowjgjlwxu) has quit (Quit: Connection closed for inactivity)
2016-01-13 21:26:13	◀	fooBard (~henrique_@177.131.178.39) has quit (Ping timeout: 260 seconds)
2016-01-13 21:26:26	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-13 21:26:31	◀	JCI (~JCI@168.235.67.145) has quit (Ping timeout: 255 seconds)
2016-01-13 21:26:35	◀	coot_ (~marcin@bl5-234-92.dsl.telepac.pt) has quit (Quit: coot_)
2016-01-13 21:26:48	▶	coot_ (~marcin@bl5-234-92.dsl.telepac.pt) has joined #haskell
2016-01-13 21:26:57	◀	baweaver (~baweaver@173.230.196.25) has quit (Ping timeout: 245 seconds)
2016-01-13 21:28:01	t0by	jle` what about:  everymth n xs = case (splitAt (n-1) xs) of
2016-01-13 21:28:01	t0by	                  (a,[]) -> []
2016-01-13 21:28:01	t0by	                  (a,(b:bs)) -> (b:(everymth n bs))
2016-01-13 21:28:06	▶	ernestob (~ernesto@179-8-245-190.fibertel.com.ar) has joined #haskell
2016-01-13 21:28:54	t0by	jle`, however, I'm more concerned about the second function
2016-01-13 21:29:09	▶	jdnavarro (~danny@89.Red-83-43-208.dynamicIP.rima-tde.net) has joined #haskell
2016-01-13 21:29:11	◀	mgsloan (~mgsloan@174-24-251-119.tukw.qwest.net) has quit (Quit: leaving)
2016-01-13 21:29:29	▶	mgsloan (~mgsloan@174-24-251-119.tukw.qwest.net) has joined #haskell
2016-01-13 21:29:51	▶	takle_ (~takle@92.40.249.82.threembb.co.uk) has joined #haskell
2016-01-13 21:30:18	◀	takle (~takle@92.40.249.82.threembb.co.uk) has quit (Read error: Connection reset by peer)
2016-01-13 21:30:57	◀	dadaro (~androidde@78.173.237.110) has quit (Read error: Connection reset by peer)
2016-01-13 21:31:03	▶	ixti (~ixti@36.9.165.83.dynamic.reverse-mundo-r.com) has joined #haskell
2016-01-13 21:31:18	◀	Xzip (~Xzip@81-230-143-111-no169.tbcn.telia.com) has quit (Ping timeout: 265 seconds)
2016-01-13 21:31:20	▶	strburst (~allen@lawn-128-61-28-161.lawn.gatech.edu) has joined #haskell
2016-01-13 21:31:24	◀	nilg (~user@77.70.2.229) has quit (Read error: Connection reset by peer)
2016-01-13 21:32:03	◀	cereal_killer_ (~ernesto@181.103.141.47) has quit (Ping timeout: 260 seconds)
2016-01-13 21:32:34	▶	kadoban (~mud@unaffiliated/kadoban) has joined #haskell
2016-01-13 21:33:13	◀	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 260 seconds)
2016-01-13 21:33:21	▶	L8D (~L8D@216.201.168.18) has joined #haskell
2016-01-13 21:33:44	▶	fizbin (~Adium@hqp-p.bcls.lib.nj.us) has joined #haskell
2016-01-13 21:34:35	▶	baweaver (~baweaver@173.230.196.25) has joined #haskell
2016-01-13 21:35:41	◀	cir0x (~Adium@dslb-094-221-060-159.094.221.pools.vodafone-ip.de) has quit (Quit: Leaving.)
2016-01-13 21:36:21	▶	xnil (~xnil@69.43.66.12) has joined #haskell
2016-01-13 21:37:10	◀	fizbin1 (~Adium@hqp-p.bcls.lib.nj.us) has quit (Ping timeout: 272 seconds)
2016-01-13 21:38:17	◀	bennofs (~benno@2a02:810a:8200:2934:56ee:75ff:fe53:d108) has quit (Ping timeout: 250 seconds)
2016-01-13 21:38:42	◀	howdoi (uid224@gateway/web/irccloud.com/x-vbupucezsgczsprc) has quit (Quit: Connection closed for inactivity)
2016-01-13 21:38:57	◀	jophish (~jophish@dab-far1-h-1-5.dab.02.net) has quit (Quit: leaving)
2016-01-13 21:39:16	▶	jay6981 (~Adium@2601:646:8d01:7f7d:fcab:46b5:7170:d01d) has joined #haskell
2016-01-13 21:39:47	▶	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has joined #haskell
2016-01-13 21:40:07	◀	baweaver (~baweaver@173.230.196.25) has quit (Remote host closed the connection)
2016-01-13 21:40:27	tekkkz	dcoutts, i removed .cabal / .ghc and reinstalled ghc -> now it worked
2016-01-13 21:40:35	◀	RegEchse (~regechse@ipbcc3a5be.dynamic.kabel-deutschland.de) has quit (Quit: <3 WeeChat (v1.5-dev))
2016-01-13 21:40:52	▶	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2016-01-13 21:40:54	dcoutts	tekkkz: interesting, ok. Perhaps there was some corruption along the way that caused programs to segfault.
2016-01-13 21:40:58	◀	hamid (~nithp@unaffiliated/hamid) has quit (Client Quit)
2016-01-13 21:41:01	▶	dented42 (~dented42@155.99.108.59) has joined #haskell
2016-01-13 21:41:04	◀	eis (~eis@64.201.244.6) has quit (Disconnected by services)
2016-01-13 21:41:32	◀	MatthiasHu (~Thunderbi@ppp-188-174-104-183.dynamic.mnet-online.de) has quit (Ping timeout: 245 seconds)
2016-01-13 21:41:34	▶	eis_ (~eis@64.201.244.6) has joined #haskell
2016-01-13 21:41:46	tekkkz	ye. but strange
2016-01-13 21:41:52	tekkkz	whatever, now everything is fine, byebye
2016-01-13 21:42:16	◀	tekkkz (~tekkkz@p2003005F2A369B070A9E01FFFEA965AA.dip0.t-ipconnect.de) has quit (Quit: Leaving)
2016-01-13 21:42:47	▶	baweaver (~baweaver@173.230.196.25) has joined #haskell
2016-01-13 21:42:55	▶	Welkin (~Welkin@rrcs-97-78-71-195.se.biz.rr.com) has joined #haskell
2016-01-13 21:43:07	◀	hilquias (~user@unaffiliated/hilquias) has quit (Remote host closed the connection)
2016-01-13 21:43:47	◀	NoCreativity (~quassel@187.110.234.144) has quit (Quit: No Ping reply in 180 seconds.)
2016-01-13 21:43:56	▶	cads (~m@2601:c8:8004:5840:5516:ce53:f7c9:f0e5) has joined #haskell
2016-01-13 21:44:17	Welkin	whenever I start a new yesod project using stack, I always have to reinstall yesod-bin
2016-01-13 21:44:35	▶	hilquias (~user@unaffiliated/hilquias) has joined #haskell
2016-01-13 21:44:39	Welkin	what if there is a conflict between the different versions of yesod-bin?
2016-01-13 21:45:01	Welkin	it overwrites the old one, and it must be on my path
2016-01-13 21:45:03	▶	NoCreativity (~quassel@187.110.234.144) has joined #haskell
2016-01-13 21:45:20	Welkin	I haven't run into problems yet, but I can imagine it becoming a potential issue
2016-01-13 21:47:49	▶	Xzip (~Xzip@81-230-143-111-no169.tbcn.telia.com) has joined #haskell
2016-01-13 21:50:00	◀	binaryplease (~binaryple@xdsl-78-34-161-159.netcologne.de) has quit (Quit: WeeChat 1.3)
2016-01-13 21:50:02	Ankhers	Welkin: stack installs things into its own sandbox based on the lts haskell version you tell it to use. There should never be conflicts with various versions of the same package.
2016-01-13 21:50:03	▶	isu (~isu@host-78-157-66-217.spbmts.ru) has joined #haskell
2016-01-13 21:50:10	▶	binaryplease (~binaryple@xdsl-78-34-161-159.netcologne.de) has joined #haskell
2016-01-13 21:50:17	◀	binaryplease (~binaryple@xdsl-78-34-161-159.netcologne.de) has quit (Client Quit)
2016-01-13 21:51:14	▶	NeLsOnBiRkLaNd (~nelson_Bi@brain-and-cog-one-o-one.mit.edu) has joined #haskell
2016-01-13 21:51:18	▶	GLM (a1b5fd14@gateway/web/cgi-irc/kiwiirc.com/ip.161.181.253.20) has joined #haskell
2016-01-13 21:51:26	◀	lyuha (uid43824@gateway/web/irccloud.com/x-qxsizncasnqpktgv) has quit (Quit: Connection closed for inactivity)
2016-01-13 21:51:29	◀	fmauro (~fmauro@5.145.17.181) has quit (Ping timeout: 246 seconds)
2016-01-13 21:51:38	◀	sdothum (~sdothum@108.63.133.5) has quit (Quit: ZNC - 1.6.0 - http://znc.in)
2016-01-13 21:52:00	geekosaur	except executables, such as the one from yesod-bin, go to ~/.local/bin
2016-01-13 21:52:09	isu	Hi everyone! Is this the right place to ask about wai?
2016-01-13 21:52:10	Welkin	ыес
2016-01-13 21:52:15	Welkin	ыесодьбин ис ан ехецутбал
2016-01-13 21:52:18	Welkin	er
2016-01-13 21:52:19	Welkin	yes
2016-01-13 21:52:25	Welkin	yesod-bin is an executable, not a library
2016-01-13 21:52:50	geekosaur	isu,more or less, yes. ask and if someone knows they will answer, or point you elsewhere (possibly a mailing list)
2016-01-13 21:52:53	Ankhers	Oh, I thought the executables were somehow versioned there...
2016-01-13 21:53:08	▶	sdothum (~sdothum@108.63.133.5) has joined #haskell
2016-01-13 21:53:12	geekosaur	cabal sandboxes put executables int he sandbox. stack doesn't
2016-01-13 21:53:18	Ankhers	Indeed.
2016-01-13 21:53:34	◀	cyborglone (~cyborg-on@31.31.100.51) has quit (Ping timeout: 240 seconds)
2016-01-13 21:53:44	geekosaur	ironically this means stack does what ius expected for most packages with execcutables but cabal does what's right for yesod...
2016-01-13 21:54:27	Welkin	I am disappointed this morning because installing a new yesod project is taking forever
2016-01-13 21:54:34	Welkin	big changes in the new stack lts
2016-01-13 21:54:40	Ankhers	I think `stack exec yesod` would run the correct version, but that is a little cumbersome.
2016-01-13 21:54:44	Welkin	so most packages are new versions
2016-01-13 21:54:46	Welkin	oh well
2016-01-13 21:54:59	Welkin	no Ankhers it doesn't
2016-01-13 21:55:02	Welkin	that is the problem
2016-01-13 21:55:03	Ankhers	really?
2016-01-13 21:55:03	◀	takle_ (~takle@92.40.249.82.threembb.co.uk) has quit (Ping timeout: 240 seconds)
2016-01-13 21:55:05	Welkin	it just looks on the path for it
2016-01-13 21:55:11	Welkin	stack exec -- yesod devel
2016-01-13 21:55:11	Welkin	yeah
2016-01-13 21:55:35	▶	takle (~takle@92.40.249.27.threembb.co.uk) has joined #haskell
2016-01-13 21:56:00	Welkin	of course, there is also a solution using symlinks and bash scripts and weird shit
2016-01-13 21:56:05	Welkin	which I don't like
2016-01-13 21:56:12	Ankhers	yeah, that is too manual though.
2016-01-13 21:56:28	Ankhers	bug ticket?
2016-01-13 21:56:40	jewels	In this code: http://lpaste.net/148950, when I call the mu function in some cases Lattice.Bottom is called. How does the interpreter know that it should call bottom from ZadehMembership or PAMembership respectively?
2016-01-13 21:56:47	▶	cognominal (~cognomina@29.144.11.109.rev.sfr.net) has joined #haskell
2016-01-13 21:56:49	◀	drot (~user@unaffiliated/drot) has quit (Quit: rcirc on GNU Emacs 24.5.1)
2016-01-13 21:57:13	▶	Zekka (~zekka@wsip-70-184-90-138.ph.ph.cox.net) has joined #haskell
2016-01-13 21:57:14	isu	Just started learnig haskell. Out of curiosity, why responseFile :: Status -> ResponseHeaders -> FilePath -> Maybe FilePart -> Response, but not responseFile :: Status -> ResponseHeaders -> FilePath -> Maybe FilePart -> IO Response . Isn't the responseFile goes out in the real world and asks the OS to send some data?
2016-01-13 21:57:21	▶	`^_^v (~nycs@gw.hq.meetup.com) has joined #haskell
2016-01-13 21:57:31	isu	Or am i missing something&
2016-01-13 21:58:01	◀	firstdayonthejob (~firstdayo@cpc91184-cmbg18-2-0-cust232.5-4.cable.virginm.net) has quit (Quit: WeeChat 1.4-dev)
2016-01-13 21:58:18	▶	jbiesnecker (~textual@199.201.64.129) has joined #haskell
2016-01-13 21:58:24	◀	askalski (~akuda@abbf101.neoplus.adsl.tpnet.pl) has quit (Quit: Wychodzi)
2016-01-13 21:58:40	▶	Stellanatus (0cb1a9e3@gateway/web/freenode/ip.12.177.169.227) has joined #haskell
2016-01-13 21:58:41	cocreature	isu: that doesn’t actually perform the request, it just creates a Response object containing the data you passed in
2016-01-13 21:58:47	▶	Zekka|Sigfig (~zekka@wsip-70-184-90-138.ph.ph.cox.net) has joined #haskell
2016-01-13 21:58:55	◀	NoCreativity (~quassel@187.110.234.144) has quit (Ping timeout: 255 seconds)
2016-01-13 21:58:56	cocreature	take a look at the source here https://hackage.haskell.org/package/wai-3.0.5.0/docs/src/Network-Wai.html#responseFile and here https://hackage.haskell.org/package/wai-3.0.5.0/docs/src/Network-Wai-Internal.html#Response
2016-01-13 21:59:13	Gurkenglas	jewels, from the context - once it knows where the function is used (and thus what type is required), it does the same thing that, say, minBound does
2016-01-13 21:59:23	ReinH	isu: responseFile constructs a Response by simply passing its parameters to the ResponseFile constructor, which is not exported.
2016-01-13 21:59:27	Gurkenglas	> (minBound :: Int, minBound :: Bool)
2016-01-13 21:59:30	lambdabot	 (-9223372036854775808,False)
2016-01-13 21:59:37	ReinH	isu: It does not actually read any files, it just saves the filepath and other args for possible later use
2016-01-13 22:00:31	▶	NoCreativity (~quassel@187.110.234.144) has joined #haskell
2016-01-13 22:00:51	ReinH	isu: you can look at responseToStream to see how these arguments are used later to actually perform IO
2016-01-13 22:01:03	◀	zivoni (~zivoni@ip-94-112-185-98.net.upcbroadband.cz) has quit (Quit: leaving)
2016-01-13 22:01:21	▶	firstdayonthejob (~firstdayo@cpc91184-cmbg18-2-0-cust232.5-4.cable.virginm.net) has joined #haskell
2016-01-13 22:01:48	ReinH	Oh, cocreature said that.
2016-01-13 22:01:49	lyxia	jewels: when you call it you are expected to instantiate the type m with something, such as ZadehMembership or PAMembership
2016-01-13 22:02:14	◀	wanderleyguima (~wanderley@199.201.64.2) has quit (Ping timeout: 265 seconds)
2016-01-13 22:02:15	◀	creffett|irssi1 (~creffett|@209.95.50.133) has quit (Remote host closed the connection)
2016-01-13 22:02:16	▶	gws1 (~gws@84.39.117.57) has joined #haskell
2016-01-13 22:03:04	◀	vili (~nick@2605:a000:ffc0:44:1da3:8295:212f:ece1) has quit (Remote host closed the connection)
2016-01-13 22:03:25	jewels	lyxia: But I'm not able to do pattern matching on it in any way because the call to Lattice.bottom will be ambiguous?
2016-01-13 22:03:50	▶	djhoulihan (~djhouliha@pool-108-41-10-26.nycmny.fios.verizon.net) has joined #haskell
2016-01-13 22:04:08	◀	cads (~m@2601:c8:8004:5840:5516:ce53:f7c9:f0e5) has quit (Ping timeout: 260 seconds)
2016-01-13 22:05:15	lyxia	jewels: You can't pattern match on a value of type m because you don't have access to its constructors, as it is an abstract type<
2016-01-13 22:05:15	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-13 22:05:28	lyxia	s/</.
2016-01-13 22:05:29	isu	Oh, I see, silly me) Haven't looked in sources. Thank you all!
2016-01-13 22:05:31	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-13 22:05:44	cocreature	ReinH: repeating things is supposed to be a good way to do indoctrination so it might be important for achieving world domination
2016-01-13 22:06:03	◀	rcat (~us3r@host86-164-41-241.range86-164.btcentralplus.com) has quit (Ping timeout: 240 seconds)
2016-01-13 22:06:46	▶	Jules__ (~Jules@535283F7.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2016-01-13 22:06:48	▶	plucas (~plucas@8.18.218.175) has joined #haskell
2016-01-13 22:07:06	▶	spindas (uid139604@gateway/web/irccloud.com/x-awlhmahcsfbowvks) has joined #haskell
2016-01-13 22:07:16	▶	takuan (~takuan@d8d86bfc6.access.telenet.be) has joined #haskell
2016-01-13 22:07:28	t0by	Hi, I'm doing some exercises from Homework 3 of http://www.seas.upenn.edu/~cis194/, which was suggested on this chan. Can anyone please suggest how to improve cleanliness-wise and make more idiomatic the function localMaxima in http://lpaste.net/148958 ? 
2016-01-13 22:07:28	jewels	lyxia: So I'm not able to implement the add function? Have a look here: http://lpaste.net/148959
2016-01-13 22:08:11	▶	wanderleyguima (~wanderley@199.201.64.3) has joined #haskell
2016-01-13 22:08:21	ReinH	cocreature: :)
2016-01-13 22:08:25	▶	AfC (~andrew@120.19.163.115) has joined #haskell
2016-01-13 22:08:37	ReinH	cocreature: repeating things improves knowledge acquisition.
2016-01-13 22:08:43	ReinH	cocreature: so it is useful to repeat things
2016-01-13 22:08:48	ReinH	beacuse repeating things improves knowledge acquisition
2016-01-13 22:08:56	lyxia	jewels: where do you get BottomVal?
2016-01-13 22:09:04	cocreature	:)
2016-01-13 22:09:15	◀	NoCreativity (~quassel@187.110.234.144) has quit (Ping timeout: 260 seconds)
2016-01-13 22:09:16	▶	cads (~m@2601:c8:8004:5840:5516:ce53:f7c9:f0e5) has joined #haskell
2016-01-13 22:09:30	Ankhers	t0by: (a:b:c:xs) is the same as what you have.
2016-01-13 22:09:40	◀	Stellanatus (0cb1a9e3@gateway/web/freenode/ip.12.177.169.227) has left #haskell
2016-01-13 22:09:44	▶	NoCreativity (~quassel@187.110.234.144) has joined #haskell
2016-01-13 22:10:02	Ankhers	t0by: Also, you really onlt need that case, and a case that catches everything else to empty list.
2016-01-13 22:10:16	▶	sk8dev (~sk8dev@p5B2FE660.dip0.t-ipconnect.de) has joined #haskell
2016-01-13 22:10:30	jewels	lyxia: I haven't it. It should be equal to Lattice.bottom.
2016-01-13 22:10:33	◀	Jackneill (~Jackneill@gateway/vpn/privateinternetaccess/jackneill) has quit (Remote host closed the connection)
2016-01-13 22:10:49	jewels	lyxia: But for the reasons that you have explained I'm not able to use it in this context!
2016-01-13 22:10:52	jewels	Right?
2016-01-13 22:10:58	▶	somewone (~somewone@p4FF171EC.dip0.t-ipconnect.de) has joined #haskell
2016-01-13 22:11:02	jewels	lyxia: So what can I do?
2016-01-13 22:11:13	◀	Lord_of_Life (Elite12246@gateway/shell/elitebnc/x-ovnncsfhjdiyyvzg) has quit (Excess Flood)
2016-01-13 22:11:33	▶	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2016-01-13 22:11:35	lyxia	jewels: I'd add an Eq constraint on m, and use (==)
2016-01-13 22:11:47	▶	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-13 22:11:59	▶	mmachenry (~Adium@208.78.140.194) has joined #haskell
2016-01-13 22:12:14	◀	hiptobecubic (~john@unaffiliated/hiptobecubic) has quit (Client Quit)
2016-01-13 22:12:39	▶	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2016-01-13 22:13:31	sk8dev	clear
2016-01-13 22:13:36	sk8dev	ups, sry
2016-01-13 22:13:44	▶	Lord_of_Life (Elite12246@gateway/shell/elitebnc/x-cfqinittlijrqocg) has joined #haskell
2016-01-13 22:13:58	◀	shirt (~shirt@adsl-v01-3db14831dc15da1b.tau.ac.il) has quit (Read error: Connection reset by peer)
2016-01-13 22:14:07	ℹ	kipras`away is now known as kipras
2016-01-13 22:14:10	▶	afcondon (~afcondon@109.78.235.220) has joined #haskell
2016-01-13 22:14:17	◀	eis_ (~eis@64.201.244.6) has quit (Quit: This computer has gone to sleep)
2016-01-13 22:14:20	jewels	lyxia: Thank you so much. You've saved my life :)
2016-01-13 22:14:30	◀	neoncontrails (~neoncontr@wsip-70-166-89-11.sd.sd.cox.net) has quit (Write error: Connection reset by peer)
2016-01-13 22:14:32	▶	shirt (~shirt@adsl-v01-3db14831dc15da1b.tau.ac.il) has joined #haskell
2016-01-13 22:14:45	◀	insitu_ (~textual@105.196.201.77.rev.sfr.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-01-13 22:15:03	◀	djhoulihan (~djhouliha@pool-108-41-10-26.nycmny.fios.verizon.net) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-01-13 22:15:06	jewels	lyxia: Can you explain to me why it works?
2016-01-13 22:15:16	▶	neoncontrails (~neoncontr@wsip-70-166-89-11.sd.sd.cox.net) has joined #haskell
2016-01-13 22:15:18	jewels	lyxia: it seems magic :)
2016-01-13 22:16:46	koala_man	where in a cabal file do you specify the dependencies for your Setup.hs?
2016-01-13 22:17:18	dcoutts	koala_man: custom-setup, but this is a new feature in Cabal-1.24 which is going to be released RSN
2016-01-13 22:17:44	▶	fmauro (~fmauro@5.145.17.181) has joined #haskell
2016-01-13 22:17:49	lyxia	jewels: Eq m simply means that values of type m can be compared for equality
2016-01-13 22:18:04	◀	strburst (~allen@lawn-128-61-28-161.lawn.gatech.edu) has quit (Ping timeout: 246 seconds)
2016-01-13 22:18:09	dcoutts	koala_man: custom-setup section, field setup-depends:
2016-01-13 22:18:09	◀	AfC (~andrew@120.19.163.115) has quit (Read error: Connection reset by peer)
2016-01-13 22:18:11	◀	NeLsOnBiRkLaNd (~nelson_Bi@brain-and-cog-one-o-one.mit.edu) has quit (Quit: Leaving)
2016-01-13 22:18:22	koala_man	nice, too bad it's not out yet
2016-01-13 22:18:34	jewels	lyxia: This is clear. Why is it able to understand that it can call Lattice.bottom?
2016-01-13 22:18:36	◀	Arkooi (~Arkooij@095-096-221-109.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-13 22:18:45	jewels	lyxia: I really don't understand it. 
2016-01-13 22:18:49	mgsloan	Welkin: Ankhers: When you "stack build" a package, the executables get installed to the sandbox, such that it's available via "stack exec"
2016-01-13 22:19:00	◀	wanderleyguima (~wanderley@199.201.64.3) has quit (Ping timeout: 250 seconds)
2016-01-13 22:19:05	◀	somewone (~somewone@p4FF171EC.dip0.t-ipconnect.de) has quit (Remote host closed the connection)
2016-01-13 22:19:23	koala_man	dcoutts: is there a current workaround? can I just specify it as a build-dependency to have it automatically installed before my package is?
2016-01-13 22:19:43	mgsloan	So if you want sandbox-local executables, that's the way to do it.  "stack install" is just an alias for "stack build --copy-bins" - i.e. build and then copy the binaries from the sandbox into ~/.local/bin
2016-01-13 22:20:21	dcoutts	koala_man: that'll often work
2016-01-13 22:20:32	t0by	Ankhers, d'oh. Thank you.
2016-01-13 22:20:41	Ankhers	mgsloan: How do you go about calling the proper executable?
2016-01-13 22:20:44	koala_man	when will it not? how unlikely is it that ghc is installed but 'process' is not?
2016-01-13 22:20:45	lyxia	jewels: the variable m has type m, and then when you write m == bottom, the type of (==) :: Eq a => a -> a -> Bool tells the compiler that bottom must have the same type.
2016-01-13 22:20:57	◀	sk8dev (~sk8dev@p5B2FE660.dip0.t-ipconnect.de) has quit (Quit: Changing server)
2016-01-13 22:21:03	▶	sk8dev_ (~sk8dev@p5B2FE660.dip0.t-ipconnect.de) has joined #haskell
2016-01-13 22:21:07	▶	pilne (~pilne@75-132-212-62.dhcp.stls.mo.charter.com) has joined #haskell
2016-01-13 22:21:11	dcoutts	koala_man: oh if it's just process you're talking about then there's no problem at all
2016-01-13 22:21:25	koala_man	why is that? 
2016-01-13 22:21:26	mgsloan	Ankhers: "stack exec" modifies your PATH to include executables installed to the sandbox + snapshot
2016-01-13 22:21:28	◀	Helvekta (~enel@2601:4a:4202:d58c:10b0:6873:84dd:7754) has quit (Ping timeout: 250 seconds)
2016-01-13 22:21:45	mgsloan	Ankhers: "stack path --bin-path" will tell you the value it uses for PATH
2016-01-13 22:21:50	◀	refold (~gman@h-129-27.a258.priv.bahnhof.se) has quit (Quit: leaving)
2016-01-13 22:22:02	Ankhers	mgsloan: Interesting. Thanks!
2016-01-13 22:22:11	koala_man	currently I'm having a problem of depending on process-1.2.0.0+ which completely breaks on 7.6.3 (debian stable)
2016-01-13 22:22:14	◀	fmauro (~fmauro@5.145.17.181) has quit (Ping timeout: 245 seconds)
2016-01-13 22:22:19	▶	pbgc (~pbgc@bl21-152-17.dsl.telepac.pt) has joined #haskell
2016-01-13 22:22:21	lyxia	jewels: so bottom has type m, and using this requires that m be an element of a bounded join semi lattice, which it deduces from m being an instance of BoundedLattice.
2016-01-13 22:22:24	Welkin	mgsloan: really? if so, that is nice
2016-01-13 22:22:25	koala_man	so I want to rewrite it to work on 1.1.0.0+
2016-01-13 22:22:40	Welkin	mgsloan: although it also copies the latest ones to ~/.local/bin
2016-01-13 22:22:41	t0by	Ankhers, but "Non-exhaustive patterns in function localMaxima"
2016-01-13 22:22:52	◀	NoCreativity (~quassel@187.110.234.144) has quit (Ping timeout: 256 seconds)
2016-01-13 22:22:57	◀	mag__ (~mag@179.52.47.89) has quit
2016-01-13 22:22:57	t0by	Ankhers, I have localMaxima [] = []
2016-01-13 22:22:57	t0by	localMaxima (a:b:c:xs)
2016-01-13 22:22:57	t0by	    | (a <= b) && (c <= b) = b:(localMaxima(c:xs))
2016-01-13 22:22:57	t0by	    | otherwise               = localMaxima(b:(c:xs))
2016-01-13 22:23:06	▶	michaelneale (~textual@ppp121-44-138-228.lns20.syd7.internode.on.net) has joined #haskell
2016-01-13 22:23:37	kadoban	t0by: You're not handling lists that are 1 element or 2 elements long.
2016-01-13 22:23:37	Ankhers	mgsloan, Welkin: It appears to prepend the snapshot location to my path, which should mean using stack exec should use the sandboxed copy.
2016-01-13 22:23:49	mgsloan	Yep
2016-01-13 22:24:26	jewels	lyxia: Ok perfect. Thank you for your answer!
2016-01-13 22:24:27	Ankhers	t0by: You don't need the [] case, just use the catch call (_) after your 3 element case.
2016-01-13 22:24:53	ℹ	sk8dev_ is now known as sk8dev
2016-01-13 22:24:57	Ankhers	mgsloan: Thanks for the tips.
2016-01-13 22:25:00	t0by	Ankhers, you mean localMaxima (a:b:c:xs)
2016-01-13 22:25:01	t0by	    | (a <= b) && (c <= b) = b:(localMaxima(c:xs))
2016-01-13 22:25:01	t0by	    | _ = []
2016-01-13 22:25:13	Ankhers	t0by: That should work, yes.
2016-01-13 22:25:26	Ankhers	wait no
2016-01-13 22:25:30	t0by	Ankhers, output needs to be e.g. localMaxima [2,9,5,6,1] == [9,6]
2016-01-13 22:25:34	◀	raichoo (~raichoo@i59F6B03D.versanet.de) has quit (Ping timeout: 245 seconds)
2016-01-13 22:25:37	Ankhers	I misread that. One sec. Let me create a quick paste.
2016-01-13 22:25:58	ℹ	mrowe_away is now known as mrowe
2016-01-13 22:25:58	t0by	Ankhers, whatever element in list is greater than its left AND right neighbors
2016-01-13 22:25:59	t0by	Ankhers, thanks
2016-01-13 22:26:04	▶	hannelita (~hannelita@177.114.36.79) has joined #haskell
2016-01-13 22:26:22	◀	blckbit10 (~monkey@5070BF3F.static.ziggozakelijk.nl) has quit (Ping timeout: 260 seconds)
2016-01-13 22:26:38	▶	blckbit10 (~monkey@5070BF3F.static.ziggozakelijk.nl) has joined #haskell
2016-01-13 22:26:40	◀	Black-Wolf (~Black-Wol@114.139.61.94.rev.vodafone.pt) has quit (Ping timeout: 250 seconds)
2016-01-13 22:26:57	SavinaRoja	has anyone ever encountered a solid technique for mapping Unicode point -> (KeyEvent, Context)
2016-01-13 22:27:01	◀	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has quit (Quit: Fixing some logging stuff; BRB)
2016-01-13 22:27:01	▶	v_g (~vg@213.24.134.160) has joined #haskell
2016-01-13 22:27:15	SavinaRoja	in any OS... I have come to hate keyboards
2016-01-13 22:27:18	◀	baweaver (~baweaver@173.230.196.25) has quit (Remote host closed the connection)
2016-01-13 22:27:24	Ankhers	t0by: Something like this http://lpaste.net/148961 (assuming your logic is correct, I just copied it without checking)
2016-01-13 22:27:30	▶	Black-Wolf (~Black-Wol@114.139.61.94.rev.vodafone.pt) has joined #haskell
2016-01-13 22:27:42	◀	aarvar (~foewfoiew@172.76.136.233) has left #haskell
2016-01-13 22:27:44	▶	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has joined #haskell
2016-01-13 22:28:24	lyxia	line 3 is localMaxima (a : xs) = localMaxima xs
2016-01-13 22:28:31	▶	mthvedt (~mike@cpe-72-226-102-201.nyc.res.rr.com) has joined #haskell
2016-01-13 22:28:37	t0by	Ankhers, Non-exhaustive patterns in function localMaxima
2016-01-13 22:28:40	▶	ype (~ype@cpc45-slam6-2-0-cust434.2-4.cable.virginm.net) has joined #haskell
2016-01-13 22:28:55	t0by	As kadoban said, that's not handling 1- and 2- element long lists, is it?
2016-01-13 22:28:56	lyxia	ah mine's actually exhaustive
2016-01-13 22:28:56	Ankhers	Welkin: If you don't want them copied to ~/.local/bin, just use a stack build, not stack install.
2016-01-13 22:29:05	Ankhers	t0by: Sorry, localMaxima _ = [] for line 4.
2016-01-13 22:29:12	▶	NoCreativity (~quassel@187.110.234.144) has joined #haskell
2016-01-13 22:29:38	▶	baweaver (~baweaver@2601:644:8280:b3c:2943:e69b:3067:7fbf) has joined #haskell
2016-01-13 22:29:40	Ankhers	lyxia: is that in regard to my paste?
2016-01-13 22:29:52	t0by	D'oh-oh-oh-oh.
2016-01-13 22:29:53	▶	mmhat (~mmh@x4d004e24.dyn.telefonica.de) has joined #haskell
2016-01-13 22:30:00	lyxia	Ankhers: yes
2016-01-13 22:30:00	t0by	Ankhers, thank you. I should have tought of _
2016-01-13 22:30:03	t0by	*though
2016-01-13 22:30:05	t0by	*thought
2016-01-13 22:30:08	t0by	*grr
2016-01-13 22:30:14	Ankhers	lyxia: They mean different things though.
2016-01-13 22:30:35	Ankhers	lyxia: While yes, it is effectively that, your version did not do the logic check to see if b is larger than a and c.
2016-01-13 22:30:52	▶	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has joined #haskell
2016-01-13 22:30:53	lyxia	well it did because line 1 is before line 3
2016-01-13 22:31:03	◀	plucas (~plucas@8.18.218.175) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-13 22:31:14	◀	ype (~ype@cpc45-slam6-2-0-cust434.2-4.cable.virginm.net) has quit (Client Quit)
2016-01-13 22:31:20	◀	Jello_Raptor (~Jello_Rap@li641-12.members.linode.com) has quit (Quit: ZNC - http://znc.in)
2016-01-13 22:31:21	Ankhers	lyxia: Then what are you doing if b is not larger than a and c in your check?
2016-01-13 22:31:49	▶	aarvar (~foewfoiew@172.76.136.233) has joined #haskell
2016-01-13 22:31:59	Ankhers	lyxia: Can you paste your version?
2016-01-13 22:31:59	▶	Jello_Raptor (~Jello_Rap@li641-12.members.linode.com) has joined #haskell
2016-01-13 22:32:25	▶	Neseth (~neseth@unaffiliated/neseth) has joined #haskell
2016-01-13 22:32:27	◀	aarvar (~foewfoiew@172.76.136.233) has left #haskell
2016-01-13 22:32:33	◀	ackthet (~ackthet@unaffiliated/ackthet) has quit (Ping timeout: 265 seconds)
2016-01-13 22:32:35	◀	Jello_Raptor (~Jello_Rap@li641-12.members.linode.com) has quit (Max SendQ exceeded)
2016-01-13 22:32:38	▶	plucas (~plucas@8.18.218.175) has joined #haskell
2016-01-13 22:32:46	◀	mgsloan (~mgsloan@174-24-251-119.tukw.qwest.net) has quit (Ping timeout: 272 seconds)
2016-01-13 22:32:55	lyxia	> let f x | False = False ; f x = x in f False
2016-01-13 22:32:57	lambdabot	 False
2016-01-13 22:32:58	ReinH	SavinaRoja: Why do you want to map *from* unicode code points, what is KeyEvent, what is Context?
2016-01-13 22:32:59	▶	Jello_Raptor (~Jello_Rap@li641-12.members.linode.com) has joined #haskell
2016-01-13 22:33:02	◀	hellwolf (~hellwolf@85.253.102.223.cable.starman.ee) has quit (Ping timeout: 265 seconds)
2016-01-13 22:33:20	lyxia	Ankhers: if no guard match, the next rule is still applied
2016-01-13 22:33:20	◀	mthvedt (~mike@cpe-72-226-102-201.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-01-13 22:33:34	▶	steamboat (~sehrlich@pool-96-237-243-68.bstnma.fios.verizon.net) has joined #haskell
2016-01-13 22:33:40	▶	mthvedt (~mike@cpe-72-226-102-201.nyc.res.rr.com) has joined #haskell
2016-01-13 22:33:50	Ankhers	Oh, that I didn't know.
2016-01-13 22:34:02	◀	baweaver (~baweaver@2601:644:8280:b3c:2943:e69b:3067:7fbf) has quit (Ping timeout: 250 seconds)
2016-01-13 22:34:09	▶	bob_v_h (~bobvh@s55962b81.adsl.online.nl) has joined #haskell
2016-01-13 22:34:38	▶	cereal_killer_ (~ernesto@181.103.141.47) has joined #haskell
2016-01-13 22:34:51	◀	takle (~takle@92.40.249.27.threembb.co.uk) has quit (Remote host closed the connection)
2016-01-13 22:35:25	Cale	Yeah, it makes the translation of guards a little less trivial than it would otherwise be.
2016-01-13 22:35:36	Cale	(into case expressions)
2016-01-13 22:35:55	lyxia	> let   lmax (a : b : xs@(c : _)) | a <= b && b >= c = b : lmax xs   ;   lmax (_ : xs) = lmax xs   ;   lmax [] = []   in lmax [2,9,5,6,1]
2016-01-13 22:35:55	▶	takle (~takle@92.40.249.27.threembb.co.uk) has joined #haskell
2016-01-13 22:35:57	lambdabot	 [9,6]
2016-01-13 22:36:14	▶	mgsloan (~mgsloan@174-24-251-119.tukw.qwest.net) has joined #haskell
2016-01-13 22:36:35	SavinaRoja	ReinH: I used those terms broadly because it is not specific to any particular system. when keyevents occur, they are interpreted in a machine state context to map to something (like a character)
2016-01-13 22:36:38	◀	ernestob (~ernesto@179-8-245-190.fibertel.com.ar) has quit (Ping timeout: 260 seconds)
2016-01-13 22:36:44	▶	ype (~ype@cpc45-slam6-2-0-cust434.2-4.cable.virginm.net) has joined #haskell
2016-01-13 22:37:04	◀	bobvh (~bobvh@s55962b81.adsl.online.nl) has quit (Ping timeout: 250 seconds)
2016-01-13 22:37:10	Fuco	is it good idea to use MVar as a semaphore or are there better "primitives" for that?
2016-01-13 22:37:20	▶	baweaver (~baweaver@173.230.196.25) has joined #haskell
2016-01-13 22:37:31	ReinH	SavinaRoja: but you said the opposite.
2016-01-13 22:37:41	Fuco	what I do now is: takeMVar sem; action; putMVar sem ()
2016-01-13 22:37:41	SavinaRoja	SavinaRoja: I've been wrestling mentally for ages to figure out a reliable way to conduct the process in reverse
2016-01-13 22:37:57	ReinH	ah
2016-01-13 22:37:58	SavinaRoja	ReinH: ^
2016-01-13 22:37:58	▶	yfeldblum (~yfeldblum@2620:10d:c090:180::1:a0ba) has joined #haskell
2016-01-13 22:38:09	◀	icen (icen@codd.uwcs.co.uk) has quit (Quit: WeeChat 0.4.3)
2016-01-13 22:38:10	▶	tekul (~tekul@82-68-220-238.dsl.in-addr.zen.co.uk) has joined #haskell
2016-01-13 22:38:20	▶	dgpratt (~dpratt71@207.182.208.2) has joined #haskell
2016-01-13 22:38:26	⚡	hackagebot bini 0.1.0 - A manipulation library for b(inary)ini files used in windows programms like the game Freelancer.  https://hackage.haskell.org/package/bini-0.1.0 (TWeise)
2016-01-13 22:38:38	◀	bb010g (uid21050@gateway/web/irccloud.com/x-xxlqsvhcovzvmwaa) has quit (Quit: Connection closed for inactivity)
2016-01-13 22:38:51	◀	pbgc (~pbgc@bl21-152-17.dsl.telepac.pt) has quit (Quit: Computer has gone to sleep.)
2016-01-13 22:38:53	▶	ackthet (ackthet@unaffiliated/ackthet) has joined #haskell
2016-01-13 22:38:57	monochrom	MVar is a good semaphore. it can do more, if you can think up more.
2016-01-13 22:39:28	Fuco	monochrom: but I don't need more, I just need my text output to not cross each other right now :D
2016-01-13 22:39:29	geekosaur	SavinaRoja, in general you can't
2016-01-13 22:40:20	geekosaur	for example, in X11 you can only do it if the codepoint corresponds to something in the loaded Xkb configuration
2016-01-13 22:40:23	◀	chrisramsey (~chrisrams@192.171.117.210) has quit (Ping timeout: 264 seconds)
2016-01-13 22:40:24	◀	chaosmasttter (~chaosmast@p54B7F8CF.dip0.t-ipconnect.de) has quit (Quit: WeeChat 1.3)
2016-01-13 22:40:56	▶	chrisramsey (~chrisrams@192.171.117.210) has joined #haskell
2016-01-13 22:40:58	◀	moei (~moei@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2016-01-13 22:41:13	geekosaur	and even then things get tricky if you need to switch ISO level or use modifiers to get to it, because you can't reliably reconstruct those from a string to a keysym
2016-01-13 22:41:13	Enigmagic	Fuco: that pattern isn't exception safe though
2016-01-13 22:41:21	SavinaRoja	the only way I can see working is to exhaustively compose your own tables of codes, states, and layouts. then lookup
2016-01-13 22:41:46	◀	cereal_killer_ (~ernesto@181.103.141.47) has quit (Ping timeout: 240 seconds)
2016-01-13 22:42:07	▶	cereal_killer_ (~ernesto@179-8-245-190.fibertel.com.ar) has joined #haskell
2016-01-13 22:42:29	geekosaur	...and "exhaustively compose your own" tends to lose hard as soon as someone with a different international keyoard layout tries to use your program
2016-01-13 22:42:43	SavinaRoja	as best I can tell, nobody in x11/xkb or windows has addressed this nightmare before
2016-01-13 22:42:58	geekosaur	you're not *supposed* to do it
2016-01-13 22:43:01	SavinaRoja	geekosaur: indeed
2016-01-13 22:43:03	geekosaur	why do you think you need it?
2016-01-13 22:43:43	chrisdotcode	you know, "cannot construct the infinite type" would be a good band name
2016-01-13 22:44:05	◀	Jules__ (~Jules@535283F7.cm-6-3c.dynamic.ziggo.nl) has quit (Quit: Leaving)
2016-01-13 22:44:25	Enigmagic	Fuco: probably want to use something like `bracket (takeMVar sem) (putMVar sem) action`
2016-01-13 22:44:25	▶	pbgc (~pbgc@bl21-152-17.dsl.telepac.pt) has joined #haskell
2016-01-13 22:44:30	◀	keix (~kei@softbank126027221049.bbtec.net) has quit (Remote host closed the connection)
2016-01-13 22:44:37	◀	phyrex1an (~phyrex1an@2a02:fe0:c151:4d10:8056:e1ba:caf4:abda) has quit (Quit: Leaving.)
2016-01-13 22:44:37	SavinaRoja	geekosaur: a project I work on, virtualizing user input events cross-platform
2016-01-13 22:45:01	▶	eis_ (~eis@64.201.244.6) has joined #haskell
2016-01-13 22:45:07	◀	pbgc (~pbgc@bl21-152-17.dsl.telepac.pt) has quit (Client Quit)
2016-01-13 22:45:11	Fuco	Enigmagic: right, bracket ensures I restore the mvar
2016-01-13 22:45:32	geekosaur	um. good luck with that, then. I think the closest thing to cross-platform there cheats by only controlling web browsers
2016-01-13 22:45:34	SavinaRoja	unifying the interface to just feed it unicode seems like the dream
2016-01-13 22:45:39	▶	aaronlevin (~aaronlevi@37.120.66.21) has joined #haskell
2016-01-13 22:45:53	◀	jay6981 (~Adium@2601:646:8d01:7f7d:fcab:46b5:7170:d01d) has quit (Quit: Leaving.)
2016-01-13 22:45:59	▶	wanderleyguima (~wanderley@199.201.64.2) has joined #haskell
2016-01-13 22:46:31	Enigmagic	Fuco: exactly... saves you a lot of trouble tracking down BlockedOnMVar exceptions later down the road ;-)
2016-01-13 22:46:38	t0by	Ankhers, thank you so much.
2016-01-13 22:46:43	SavinaRoja	yeah, I'm going to have to settle
2016-01-13 22:46:47	jaaket	idris
2016-01-13 22:46:59	jaaket	whoops, sorry
2016-01-13 22:47:55	◀	takle (~takle@92.40.249.27.threembb.co.uk) has quit (Read error: Connection reset by peer)
2016-01-13 22:48:08	geekosaur	SavinaRoja, it's support for international keyboards etc. that makes this impossible to support in the general case; any mapping you come up with *will* be incompatible with someone's keyboard layout and therefore won't map properly
2016-01-13 22:48:16	◀	pantsman_ (~pantsman@cpc85034-haye22-2-0-cust50.17-4.cable.virginm.net) has quit (Quit: Leaving)
2016-01-13 22:48:17	◀	wanderleyguima (~wanderley@199.201.64.2) has quit (Client Quit)
2016-01-13 22:48:20	▶	takle (~takle@92.40.249.27.threembb.co.uk) has joined #haskell
2016-01-13 22:48:46	◀	griotspeak (~textual@c-73-237-161-156.hsd1.ga.comcast.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-13 22:48:53	▶	wanderleyguima (~wanderley@199.201.64.2) has joined #haskell
2016-01-13 22:49:12	▶	jgt (~jgt@eiu109.neoplus.adsl.tpnet.pl) has joined #haskell
2016-01-13 22:49:26	Welkin	you can either map to physical layout
2016-01-13 22:49:34	Welkin	or you can map to particular characters
2016-01-13 22:49:40	Welkin	keycode vs scancode
2016-01-13 22:50:42	▶	Amnez777 (~Amnez777@unaffiliated/amnez777) has joined #haskell
2016-01-13 22:50:47	▶	keix (~kei@softbank126027221049.bbtec.net) has joined #haskell
2016-01-13 22:50:56	◀	vmeson (~rmacleod@128.224.252.2) has quit (Ping timeout: 250 seconds)
2016-01-13 22:51:29	▶	twanvl (~twanvl@dhcp-077-250-086-217.chello.nl) has joined #haskell
2016-01-13 22:51:29	◀	henrique (~henrique_@177.131.178.39) has quit (Read error: Connection reset by peer)
2016-01-13 22:51:56	▶	henrique (~henrique_@177.131.178.39) has joined #haskell
2016-01-13 22:52:06	◀	techy (~u0_a121@107.0.84.54) has quit (Ping timeout: 240 seconds)
2016-01-13 22:52:10	◀	SavinaRoja (~pablo@208.89.33.100) has quit (Remote host closed the connection)
2016-01-13 22:52:41	▶	gabbiel (~gabbiel@97-100-73-213.res.bhn.net) has joined #haskell
2016-01-13 22:52:43	▶	eb_ (~eb@138.90-149-139.nextgentel.com) has joined #haskell
2016-01-13 22:52:57	◀	MarceColl (~MarceColl@2.Red-79-155-140.dynamicIP.rima-tde.net) has quit (Remote host closed the connection)
2016-01-13 22:53:44	gabbiel	"main :: IO"
2016-01-13 22:53:45	◀	kurt11 (~Adium@207.191.34.198) has quit (Quit: Leaving.)
2016-01-13 22:53:49	▶	shanemikel (~spearlman@c-73-162-96-145.hsd1.ca.comcast.net) has joined #haskell
2016-01-13 22:53:59	◀	clynamen (~clynamen@93-50-191-217.ip153.fastwebnet.it) has quit (Read error: Connection reset by peer)
2016-01-13 22:54:20	◀	eb (~eb@90.149.139.138) has quit (Ping timeout: 246 seconds)
2016-01-13 22:54:27	shanemikel	do y'all know any tricks for locating the distro package names of pkgconfig deps?
2016-01-13 22:54:28	◀	meoblast001 (~meoblast@5.28.88.190) has quit (Quit: Leaving)
2016-01-13 22:54:48	◀	sk8dev (~sk8dev@p5B2FE660.dip0.t-ipconnect.de) has quit (Quit: leaving)
2016-01-13 22:55:02	◀	GLM (a1b5fd14@gateway/web/cgi-irc/kiwiirc.com/ip.161.181.253.20) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2016-01-13 22:55:15	▶	kurt11 (~Adium@207.191.34.198) has joined #haskell
2016-01-13 22:55:37	Pamelloes	Is there a reason why %Z in parseTimeM doesn't accept a positive timezone e.g. 10:22:30+01:00 doesn't match %H:%M:%S%Z
2016-01-13 22:55:57	▶	MitchellSalad (uid40617@gateway/web/irccloud.com/x-odhukfkfnuimzkhw) has joined #haskell
2016-01-13 22:56:01	Pamelloes	But a negative timezone (10:22:30-01:00) matches without any issues
2016-01-13 22:56:13	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-13 22:56:38	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-13 22:56:41	geekosaur	Welkin, at least on X11 you need to do something "expected" for both, or your program will work with some things or not others (notably vmplayer and vncviewers will handle quick and dirty mappings *badly*)
2016-01-13 22:56:57	geekosaur	probably also rdesktop
2016-01-13 22:57:06	◀	mizu_no_oto (~textual@c-73-219-2-228.hsd1.ma.comcast.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-13 22:57:46	▶	Helvekta (~enel@2601:4a:4202:d58c:f99a:d8c5:458f:ad5c) has joined #haskell
2016-01-13 22:57:54	geekosaur	and vbox for that matter
2016-01-13 22:58:24	▶	stewtj3 (~user@159.182.183.6) has joined #haskell
2016-01-13 22:58:44	⚡	hackagebot clash-prelude 0.10.5 - CAES Language for Synchronous Hardware - Prelude library  https://hackage.haskell.org/package/clash-prelude-0.10.5 (ChristiaanBaaij)
2016-01-13 22:58:46	⚡	hackagebot clash-lib 0.6.8 - CAES Language for Synchronous Hardware - As a Library  https://hackage.haskell.org/package/clash-lib-0.6.8 (ChristiaanBaaij)
2016-01-13 22:58:48	◀	Helvekta (~enel@2601:4a:4202:d58c:f99a:d8c5:458f:ad5c) has quit (Max SendQ exceeded)
2016-01-13 22:58:48	⚡	hackagebot clash-systemverilog 0.6.4 - CAES Language for Synchronous Hardware - SystemVerilog backend  https://hackage.haskell.org/package/clash-systemverilog-0.6.4 (ChristiaanBaaij)
2016-01-13 22:58:50	⚡	hackagebot clash-verilog 0.6.4 - CAES Language for Synchronous Hardware - Verilog backend  https://hackage.haskell.org/package/clash-verilog-0.6.4 (ChristiaanBaaij)
2016-01-13 22:58:53	⚡	hackagebot clash-vhdl 0.6.5 - CAES Language for Synchronous Hardware - VHDL backend  https://hackage.haskell.org/package/clash-vhdl-0.6.5 (ChristiaanBaaij)
2016-01-13 22:59:02	▶	clynamen (~clynamen@93-50-191-217.ip153.fastwebnet.it) has joined #haskell
2016-01-13 22:59:03	geekosaur	also most programs look at the keysym but a few (like vmplayer/vbox) only use the keycode
2016-01-13 22:59:10	◀	dwins (~dwins@c-73-200-135-248.hsd1.va.comcast.net) has quit
2016-01-13 22:59:24	hpc	is there an alternate version of the clash prelude for the doors?
2016-01-13 22:59:24	▶	Helvekta (~enel@2601:4a:4202:d58c:f99a:d8c5:458f:ad5c) has joined #haskell
2016-01-13 22:59:25	Welkin	oh cool
2016-01-13 22:59:29	◀	stewtj3 (~user@159.182.183.6) has quit (Remote host closed the connection)
2016-01-13 22:59:30	◀	pilne (~pilne@75-132-212-62.dhcp.stls.mo.charter.com) has quit (Quit: Quitting!)
2016-01-13 22:59:36	Welkin	the new yesod scaffolding comes with an ajax comment system example
2016-01-13 22:59:36	Welkin	haha
2016-01-13 22:59:50	◀	wanderleyguima (~wanderley@199.201.64.2) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-13 22:59:52	◀	rphillips (~rphillips@unaffiliated/rphillips) has quit (Quit: ZNC - http://znc.in)
2016-01-13 23:00:11	◀	OrangeShark (~OrangeSha@2602:306:c5c9:a3e0:74a3:86b9:c411:33a7) has quit (Quit: Leaving)
2016-01-13 23:00:24	▶	wanderleyguima (~wanderley@199.201.64.3) has joined #haskell
2016-01-13 23:00:45	◀	henrique (~henrique_@177.131.178.39) has quit (Read error: Connection reset by peer)
2016-01-13 23:00:46	◀	plucas (~plucas@8.18.218.175) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-13 23:01:11	▶	henrique (~henrique_@177.131.178.39) has joined #haskell
2016-01-13 23:02:04	◀	baweaver (~baweaver@173.230.196.25) has quit (Remote host closed the connection)
2016-01-13 23:02:06	▶	jedws (~jedws@c58-109-75-176.randw4.nsw.optusnet.com.au) has joined #haskell
2016-01-13 23:02:13	▶	rphillips (~rphillips@unaffiliated/rphillips) has joined #haskell
2016-01-13 23:02:14	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-13 23:02:33	◀	umib0zu (~umib0zu@c-50-177-152-117.hsd1.ma.comcast.net) has quit (Quit: umib0zu)
2016-01-13 23:02:37	▶	mpereira (~mpereira@191.205.160.79) has joined #haskell
2016-01-13 23:02:43	glguy	Pamelloes: Prelude Data.Time> parseTimeM False defaultTimeLocale "%H:%m%Z" "10:20+0200" :: Maybe ZonedTime
2016-01-13 23:02:43	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-13 23:02:43	glguy	Just 1970-12-01 10:00:00 +0200
2016-01-13 23:02:45	▶	plucas (~plucas@8.18.218.175) has joined #haskell
2016-01-13 23:02:55	glguy	Pamelloes: Seems like it works
2016-01-13 23:03:06	Pamelloes	huh
2016-01-13 23:03:26	glguy	(should have used %M, but same effect)
2016-01-13 23:03:45	⚡	hackagebot clash-ghc 0.6.8 - CAES Language for Synchronous Hardware  https://hackage.haskell.org/package/clash-ghc-0.6.8 (ChristiaanBaaij)
2016-01-13 23:04:09	▶	Rizy (~Rizy@36.77.231.174) has joined #haskell
2016-01-13 23:04:19	◀	rikonor (~rikonor@128.177.123.162) has quit (Remote host closed the connection)
2016-01-13 23:04:39	▶	bvad (~bvad@50a1b03c.flatrate.dk) has joined #haskell
2016-01-13 23:04:42	◀	dsh (~daishi@ool-18bd7436.dyn.optonline.net) has quit (Read error: Connection reset by peer)
2016-01-13 23:04:51	Pamelloes	Oh. I'm an idiot. "+" needs to be escaped in a url while - doesn't
2016-01-13 23:04:54	◀	ramky (~ramky@114.143.65.123) has quit (Quit: Leaving)
2016-01-13 23:05:06	Pamelloes	So the time parsing works fine :)
2016-01-13 23:05:14	◀	erochester (~Adium@d-128-167-72.bootp.Virginia.EDU) has quit (Ping timeout: 250 seconds)
2016-01-13 23:06:05	◀	altphi (~altphi@host-74-221-189-208.WISOLT1.epbfi.com) has quit (Quit: somno opus est.)
2016-01-13 23:06:06	◀	jedws (~jedws@c58-109-75-176.randw4.nsw.optusnet.com.au) has quit (Ping timeout: 240 seconds)
2016-01-13 23:06:29	◀	dgpratt (~dpratt71@207.182.208.2) has quit (Ping timeout: 276 seconds)
2016-01-13 23:06:35	◀	tag (~tag@72.5.114.17) has quit (Ping timeout: 246 seconds)
2016-01-13 23:06:44	◀	mgsloan (~mgsloan@174-24-251-119.tukw.qwest.net) has quit (Ping timeout: 255 seconds)
2016-01-13 23:06:53	▶	osa1 (~omer@2601:801:1:4a07:2ab2:bdff:fedf:fa66) has joined #haskell
2016-01-13 23:06:53	◀	osa1 (~omer@2601:801:1:4a07:2ab2:bdff:fedf:fa66) has quit (Changing host)
2016-01-13 23:06:53	▶	osa1 (~omer@haskell/developer/osa1) has joined #haskell
2016-01-13 23:06:54	◀	Elish (~x@unaffiliated/elish) has quit (Quit: Elish)
2016-01-13 23:06:56	▶	strburst (~allen@res388d-128-61-88-50.res.gatech.edu) has joined #haskell
2016-01-13 23:07:08	◀	josdeha_rt (~josdehart@535299F3.cm-6-3c.dynamic.ziggo.nl) has quit (Quit: josdeha_rt)
2016-01-13 23:07:35	▶	pgens (~eugen@p4FD6E4DB.dip0.t-ipconnect.de) has joined #haskell
2016-01-13 23:07:36	◀	mmhat (~mmh@x4d004e24.dyn.telefonica.de) has quit (Ping timeout: 272 seconds)
2016-01-13 23:08:48	▶	mclong (~mclong@unaffiliated/mclong) has joined #haskell
2016-01-13 23:08:59	◀	bvad (~bvad@50a1b03c.flatrate.dk) has quit (Ping timeout: 255 seconds)
2016-01-13 23:09:16	◀	gabbiel (~gabbiel@97-100-73-213.res.bhn.net) has quit (Quit: leaving)
2016-01-13 23:09:32	▶	Guest38 (~textual@38.88.246.202) has joined #haskell
2016-01-13 23:10:15	◀	visof (~visof@156.198.6.58) has quit (Ping timeout: 265 seconds)
2016-01-13 23:10:25	▶	glitters1ark (~griffin@ool-43553952.dyn.optonline.net) has joined #haskell
2016-01-13 23:10:27	▶	tehgeekmeister (~tehgeekme@ool-4574c7b7.dyn.optonline.net) has joined #haskell
2016-01-13 23:10:50	▶	umib0zu (~umib0zu@c-50-177-152-117.hsd1.ma.comcast.net) has joined #haskell
2016-01-13 23:11:13	◀	O7 (~d@185.57.82.25) has quit (Remote host closed the connection)
2016-01-13 23:11:54	◀	adu (~ajr@108.48.76.162) has quit (Quit: adu)
2016-01-13 23:12:54	◀	doomlord (~textual@host86-149-133-173.range86-149.btcentralplus.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-13 23:13:02	◀	csd_ (~chris@pool-108-30-122-128.nycmny.fios.verizon.net) has quit (Ping timeout: 250 seconds)
2016-01-13 23:13:04	◀	fizbin (~Adium@hqp-p.bcls.lib.nj.us) has quit (Quit: Leaving.)
2016-01-13 23:13:23	◀	`^_^v (~nycs@gw.hq.meetup.com) has quit (Ping timeout: 264 seconds)
2016-01-13 23:13:51	▶	AfC (~andrew@120.19.98.93) has joined #haskell
2016-01-13 23:14:23	◀	bjz (~bjz@104.222.140.40) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-13 23:15:12	◀	glitters1ark (~griffin@ool-43553952.dyn.optonline.net) has quit (Ping timeout: 272 seconds)
2016-01-13 23:15:24	◀	jewels (~asuglia@host131-77-dynamic.22-79-r.retail.telecomitalia.it) has quit (Quit: Konversation terminated!)
2016-01-13 23:16:14	◀	BillyIII (~quassel@185.112.157.31) has quit (Read error: Connection reset by peer)
2016-01-13 23:16:23	◀	ziman (~ziman@functor.sk) has quit (Ping timeout: 264 seconds)
2016-01-13 23:16:37	◀	t0by (~t0by@host199-51-dynamic.14-87-r.retail.telecomitalia.it) has quit (Quit: Bye!)
2016-01-13 23:16:49	▶	ziman (~ziman@functor.sk) has joined #haskell
2016-01-13 23:17:14	◀	xnil (~xnil@69.43.66.12) has quit (Ping timeout: 260 seconds)
2016-01-13 23:17:21	▶	BillyIII (~quassel@185.112.157.31) has joined #haskell
2016-01-13 23:17:54	▶	eb (~eb@90.149.139.138) has joined #haskell
2016-01-13 23:18:10	spindas	object light level
2016-01-13 23:18:13	◀	jbiesnecker (~textual@199.201.64.129) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-13 23:18:29	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-13 23:18:45	⚡	hackagebot bini 0.1.1 - A manipulation library for b(inary)ini files used in windows programms like the game Freelancer.  https://hackage.haskell.org/package/bini-0.1.1 (TWeise)
2016-01-13 23:19:01	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-13 23:19:06	◀	eb_ (~eb@138.90-149-139.nextgentel.com) has quit (Ping timeout: 250 seconds)
2016-01-13 23:19:09	◀	takle (~takle@92.40.249.27.threembb.co.uk) has quit (Remote host closed the connection)
2016-01-13 23:19:12	▶	FreeFull (~freefull@defocus/sausage-lover) has joined #haskell
2016-01-13 23:20:21	▶	mmhat (~mmh@wvpn051.vpn.uni-wuerzburg.de) has joined #haskell
2016-01-13 23:21:33	◀	mmhat (~mmh@wvpn051.vpn.uni-wuerzburg.de) has quit (Read error: Connection reset by peer)
2016-01-13 23:21:35	◀	micmus (~micmus@088156129087.dynamic-ww-1.vectranet.pl) has quit (Ping timeout: 260 seconds)
2016-01-13 23:22:09	▶	dgpratt (~dpratt71@pool-72-65-100-56.ptldme.east.myfairpoint.net) has joined #haskell
2016-01-13 23:22:30	▶	AfC1 (~andrew@120.17.126.37) has joined #haskell
2016-01-13 23:22:35	◀	xylen_ (~codywelsh@c-73-189-204-160.hsd1.ca.comcast.net) has quit (Quit: xylen_)
2016-01-13 23:22:45	◀	AfC (~andrew@120.19.98.93) has quit (Ping timeout: 260 seconds)
2016-01-13 23:23:32	▶	takle (~takle@92.40.249.27.threembb.co.uk) has joined #haskell
2016-01-13 23:23:36	▶	mac10688 (~mac10688@c-69-180-251-120.hsd1.tn.comcast.net) has joined #haskell
2016-01-13 23:23:38	◀	suppi (~suppi@unaffiliated/suppi) has quit (Quit: Leaving)
2016-01-13 23:23:43	◀	mmachenry (~Adium@208.78.140.194) has quit (Quit: Leaving.)
2016-01-13 23:23:52	◀	kgadek (~kgadek@atp197.neoplus.adsl.tpnet.pl) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-01-13 23:23:58	◀	takle (~takle@92.40.249.27.threembb.co.uk) has quit (Read error: Connection reset by peer)
2016-01-13 23:24:04	▶	griotspeak (~textual@c-73-237-161-156.hsd1.ga.comcast.net) has joined #haskell
2016-01-13 23:25:13	▶	takle (~takle@92.40.249.27.threembb.co.uk) has joined #haskell
2016-01-13 23:25:27	◀	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-13 23:25:33	◀	takle (~takle@92.40.249.27.threembb.co.uk) has quit (Read error: Connection reset by peer)
2016-01-13 23:25:40	▶	Itkovian (~Itkovian@vpnk064.ugent.be) has joined #haskell
2016-01-13 23:26:01	▶	takle (~takle@92.40.249.27.threembb.co.uk) has joined #haskell
2016-01-13 23:26:32	◀	quchen (~quchen@ipb21a1330.dynamic.kabel-deutschland.de) has quit (Ping timeout: 255 seconds)
2016-01-13 23:26:34	◀	takle (~takle@92.40.249.27.threembb.co.uk) has quit (Read error: Connection reset by peer)
2016-01-13 23:27:09	argoneus	anyone had luck making a binding to a C++ library with classes and using it?
2016-01-13 23:27:19	▶	testtest (6c061478@gateway/web/freenode/ip.108.6.20.120) has joined #haskell
2016-01-13 23:27:21	argoneus	I found something called fficxx which seems like it does what I want it to but it doesn't really have a tutorial
2016-01-13 23:27:37	▶	takle (~takle@92.40.249.27.threembb.co.uk) has joined #haskell
2016-01-13 23:27:58	◀	Luke (~Luke@unaffiliated/luke) has quit (Quit: sleep)
2016-01-13 23:28:04	◀	takle (~takle@92.40.249.27.threembb.co.uk) has quit (Read error: Connection reset by peer)
2016-01-13 23:28:05	◀	chrisramsey (~chrisrams@192.171.117.210) has quit (Remote host closed the connection)
2016-01-13 23:28:26	▶	takle (~takle@92.40.249.27.threembb.co.uk) has joined #haskell
2016-01-13 23:28:36	◀	dpn` (dpn_freeno@2600:3c00::f03c:91ff:feae:acd1) has quit (Excess Flood)
2016-01-13 23:28:45	⚡	hackagebot bini 0.1.2 - A manipulation library for b(inary)ini files used in windows programms like the game Freelancer.  https://hackage.haskell.org/package/bini-0.1.2 (TWeise)
2016-01-13 23:28:56	▶	dpn` (dpn_freeno@2600:3c00::f03c:91ff:feae:acd1) has joined #haskell
2016-01-13 23:29:03	▶	tag (~tag@72.5.114.17) has joined #haskell
2016-01-13 23:29:16	▶	takle_ (~takle@188.29.164.101.threembb.co.uk) has joined #haskell
2016-01-13 23:30:08	◀	JagaJaga (~JagaJaga@178.62.202.50) has quit (Ping timeout: 255 seconds)
2016-01-13 23:30:27	testtest	Hello, sorry, but I've got a question: What the hell are monads? I mean it sounds kinda like different classes in Java or like functions, but at the same time, they sound really, really confusing. What is the actual definition for what one is? So far I've had a hard time finding a source that actually said, as bluntly as possible for unintelligent people such as myself, what a monad is. Can anyone help?
2016-01-13 23:30:35	◀	donwilliam (~donwillia@188.228.46.39) has quit (Ping timeout: 255 seconds)
2016-01-13 23:30:39	◀	takle_ (~takle@188.29.164.101.threembb.co.uk) has quit (Read error: Connection reset by peer)
2016-01-13 23:30:41	▶	baweaver (~baweaver@c-24-4-24-160.hsd1.ca.comcast.net) has joined #haskell
2016-01-13 23:30:43	Phyx-	lol, that bini package sure iterated fast
2016-01-13 23:30:54	◀	L8D (~L8D@216.201.168.18) has quit (Read error: Connection reset by peer)
2016-01-13 23:30:58	Fuco	testtest: what you ask is impossible
2016-01-13 23:31:02	▶	L8D (~L8D@216.201.168.18) has joined #haskell
2016-01-13 23:31:18	argoneus	testtest: I went through the same thing a few weeks ago
2016-01-13 23:31:23	argoneus	listen here
2016-01-13 23:31:26	testtest	Fuco: Oh, sorry then
2016-01-13 23:31:29	argoneus	start writing some haskell code, write things
2016-01-13 23:31:33	◀	neoncontrails (~neoncontr@wsip-70-166-89-11.sd.sd.cox.net) has quit (Remote host closed the connection)
2016-01-13 23:31:40	◀	plucas (~plucas@8.18.218.175) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-13 23:31:42	argoneus	eventually you will realize you are duplicating code or that you would like if you could represent a piece of code generally
2016-01-13 23:31:43	▶	takle_ (~takle@188.29.164.101.threembb.co.uk) has joined #haskell
2016-01-13 23:31:46	◀	zos (~zos@95.148.14.38) has quit (Ping timeout: 240 seconds)
2016-01-13 23:31:48	argoneus	then you realize what you need is monads
2016-01-13 23:31:57	argoneus	...and that's what monads are
2016-01-13 23:32:01	testtest	argoneus: Isn't that just what functions are?
2016-01-13 23:32:15	argoneus	not really
2016-01-13 23:32:17	argoneus	just write stuff, trust me
2016-01-13 23:32:19	Fuco	well monads are functions
2016-01-13 23:32:23	Fuco	everything is a function in haskell
2016-01-13 23:32:29	◀	takle (~takle@92.40.249.27.threembb.co.uk) has quit (Ping timeout: 246 seconds)
2016-01-13 23:32:31	frerich	Err
2016-01-13 23:32:32	▶	takle__ (~takle@188.29.164.101.threembb.co.uk) has joined #haskell
2016-01-13 23:32:33	glguy	Fuco: No, that's not the case
2016-01-13 23:32:39	frerich	x = 5 -- not a function
2016-01-13 23:32:47	Enigmagic	x = 5 could be a function
2016-01-13 23:32:48	Fuco	why not
2016-01-13 23:32:52	◀	takle__ (~takle@188.29.164.101.threembb.co.uk) has quit (Read error: Connection reset by peer)
2016-01-13 23:33:07	dzdncnfzd	This is your daily reminder to despise python.
2016-01-13 23:33:07	Fuco	5 is a constant function returning 5
2016-01-13 23:33:08	Enigmagic	x = (5 :: Int) -- not a function
2016-01-13 23:33:09	frerich	A function is something you can apply to other values. In particular, to exactly one value.
2016-01-13 23:33:11	notdan	But it's not
2016-01-13 23:33:13	testtest	Sorry to have created a debate
2016-01-13 23:33:16	notdan	Fuco: not really
2016-01-13 23:33:16	◀	takle_ (~takle@188.29.164.101.threembb.co.uk) has quit (Read error: Connection reset by peer)
2016-01-13 23:33:17	argoneus	testtest: anyway, it's pointless to learn monads for the sake of learning monads
2016-01-13 23:33:18	glguy	Fuco: Conal wrote a nice starting point for this question http://conal.net/blog/posts/everything-is-a-function-in-haskell
2016-01-13 23:33:21	Gurkenglas	It's worse than that. Monads have kind *->*. All functions have kind *.
2016-01-13 23:33:22	frerich	Fuco: No, what you mean is 'x _ = 5'.
2016-01-13 23:33:23	▶	takle (~takle@188.29.164.101.threembb.co.uk) has joined #haskell
2016-01-13 23:33:25	argoneus	just write haskell stuff and eventually you will realize why you'd want them
2016-01-13 23:33:36	testtest	glguy: Thanks, I'll read that
2016-01-13 23:33:37	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-13 23:33:43	◀	takle (~takle@188.29.164.101.threembb.co.uk) has quit (Read error: Connection reset by peer)
2016-01-13 23:33:47	isu	Is there any function that checks FilePath for presence ["..","~","posibly others i don't know"]? I need to serve files from: "document_root/" ++ path. But for security reasons, path needs to be validated first. Also what about UTF8? I guess I could use some regex for it, but maybe there is a function exists for this kind of job:
2016-01-13 23:33:48	kadoban	testtest: That link was more for Fuco.
2016-01-13 23:34:03	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-13 23:34:12	argoneus	testtest: make sure to avoid burritos and boxes
2016-01-13 23:34:14	frerich	Fuco: A constant function is something which no matter what value it's applied to, always yields the same value. You cannot apply '5' to anything though. So that's not a constant function.
2016-01-13 23:34:18	◀	kurt11 (~Adium@207.191.34.198) has quit (Quit: Leaving.)
2016-01-13 23:34:20	testtest	kadoban: Woops, sorry
2016-01-13 23:34:21	◀	aranea (~aranea@wikimedia/FalconL) has quit (Quit: leaving)
2016-01-13 23:34:28	kadoban	testtest: In terms of Monads … all there is to learn in depth is the methods in the Monad typeclass. Then use them. Don't spend forever reading tutorial after tutorial trying to explain the things, it's a waste of time.
2016-01-13 23:34:44	◀	hannelita (~hannelita@177.114.36.79) has quit (Remote host closed the connection)
2016-01-13 23:34:56	Enigmagic	unless you like burritos
2016-01-13 23:34:59	▶	takle (~takle@188.29.164.101.threembb.co.uk) has joined #haskell
2016-01-13 23:35:06	argoneus	testtest: if you really want to read something
2016-01-13 23:35:09	argoneus	read this https://wiki.haskell.org/Monads_as_computation
2016-01-13 23:35:18	◀	tomku (~tomku@unaffiliated/tomku) has quit (Read error: Connection reset by peer)
2016-01-13 23:35:19	argoneus	it doesn't try to force burritos down your throat and gives you the main points
2016-01-13 23:35:20	▶	zos (~zos@95.148.14.38) has joined #haskell
2016-01-13 23:35:28	conal	Gurkenglas: worse than that. functions don't have any kind at all. they have types instead.
2016-01-13 23:35:29	argoneus	if you don't get it just ignore it and write haskell
2016-01-13 23:35:32	▶	tomku (~tomku@unaffiliated/tomku) has joined #haskell
2016-01-13 23:35:34	▶	PatrickRobotham (uid18270@gateway/web/irccloud.com/x-dxelqikbmurfnxwi) has joined #haskell
2016-01-13 23:35:35	testtest	kadoban: Quite honestly, I am having a hard time just understanding what a monad even is. Like, in one sense it sounds like functions, but in another, I don't understand that at all
2016-01-13 23:35:38	◀	takle (~takle@188.29.164.101.threembb.co.uk) has quit (Read error: Connection reset by peer)
2016-01-13 23:35:43	argoneus	testtest: did you read my link yet
2016-01-13 23:35:43	testtest	*them
2016-01-13 23:35:50	▶	takle (~takle@188.29.164.101.threembb.co.uk) has joined #haskell
2016-01-13 23:36:00	◀	Itkovian (~Itkovian@vpnk064.ugent.be) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-13 23:36:02	testtest	argoneus: Woops, no, sorry, I thought it was for someone else. I will now.
2016-01-13 23:36:03	▶	mgsloan (~mgsloan@157.130.186.54) has joined #haskell
2016-01-13 23:36:15	◀	takle (~takle@188.29.164.101.threembb.co.uk) has quit (Read error: Connection reset by peer)
2016-01-13 23:36:22	◀	baweaver (~baweaver@c-24-4-24-160.hsd1.ca.comcast.net) has quit (Ping timeout: 260 seconds)
2016-01-13 23:36:31	conal	Gurkenglas: (though their types do have kind *)
2016-01-13 23:36:38	argoneus	testtest: and as I said, if you don't understand what the page is trying to tell you, just give it up
2016-01-13 23:36:39	◀	dud (~rk@2a02:1205:5069:9210:c9d4:edfa:54e9:3ba) has quit (Remote host closed the connection)
2016-01-13 23:36:40	▶	takle (~takle@188.29.164.101.threembb.co.uk) has joined #haskell
2016-01-13 23:36:46	argoneus	write haskell code and you will see why you want monads
2016-01-13 23:37:00	◀	takle (~takle@188.29.164.101.threembb.co.uk) has quit (Read error: Connection reset by peer)
2016-01-13 23:37:03	argoneus	that's what helped me anyway
2016-01-13 23:37:07	argoneus	maybe it's a stupid approach
2016-01-13 23:37:18	kadoban	testtest: Don't even worry about it. There's *far* less there than most people think. It's a useful pattern that's abstracted as a typeclass, that's it. You'll eventually see the pattern in many ways and it'll suddenly make sense why it's there.
2016-01-13 23:37:22	◀	cereal_killer_ (~ernesto@179-8-245-190.fibertel.com.ar) has quit (Read error: Connection reset by peer)
2016-01-13 23:37:28	▶	takle (~takle@188.29.164.101.threembb.co.uk) has joined #haskell
2016-01-13 23:37:42	testtest	argoneus: Thank you for your suggestion, I'm just a little hesitant about writing code that I don't understand.
2016-01-13 23:37:45	koala_man	I support the approach of just filing it away as "the theoretical underpinnings of 'do'" for now, until you're familiar with practical Haskell
2016-01-13 23:37:48	▶	xnil (~xnil@69.43.66.12) has joined #haskell
2016-01-13 23:37:51	◀	wanderleyguima (~wanderley@199.201.64.3) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-13 23:37:52	testtest	kadoban: Yay, sounds good.
2016-01-13 23:37:52	◀	takle (~takle@188.29.164.101.threembb.co.uk) has quit (Read error: Connection reset by peer)
2016-01-13 23:38:06	Denommus	@pl (foo bar) <$> (baz bar)
2016-01-13 23:38:06	lambdabot	foo bar <$> baz bar
2016-01-13 23:38:15	▶	wanderleyguima (~wanderley@199.201.64.2) has joined #haskell
2016-01-13 23:38:16	Denommus	@pl \bar -> (foo bar) <$> (baz bar)
2016-01-13 23:38:17	lambdabot	liftM2 (<$>) foo baz
2016-01-13 23:38:17	testtest	The problem is just that it seems like in order to use any sort of library you need to use monads
2016-01-13 23:38:19	▶	takle (~takle@188.29.164.101.threembb.co.uk) has joined #haskell
2016-01-13 23:38:34	Denommus	hm, not very readable
2016-01-13 23:38:42	◀	takle (~takle@188.29.164.101.threembb.co.uk) has quit (Read error: Connection reset by peer)
2016-01-13 23:38:57	Gurkenglas	:t \x -> any (`isInfixOf` x) ["..", "~"] -- isu
2016-01-13 23:38:58	lambdabot	[Char] -> Bool
2016-01-13 23:38:59	argoneus	testtest: if you want a really rough way of thinking about them think of them as a bunch of computations under a specific domain, and a convenient way to store state inbetween the function calls
2016-01-13 23:39:04	argoneus	inb4 I get jumped by the people here for being wrong
2016-01-13 23:39:07	▶	takle (~takle@188.29.164.101.threembb.co.uk) has joined #haskell
2016-01-13 23:39:11	◀	pgens (~eugen@p4FD6E4DB.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2016-01-13 23:39:13	▶	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has joined #haskell
2016-01-13 23:39:34	▶	BlueRavenGT (~BlueRaven@8-22-13-219.utopiafiber.net) has joined #haskell
2016-01-13 23:39:39	testtest	argoneus: So then is the goal to access that inbetween state, or what is even the purpose of having the inbetween state? Sorry.
2016-01-13 23:39:42	▶	Itkovian (~Itkovian@vpnk064.ugent.be) has joined #haskell
2016-01-13 23:39:44	◀	Helvekta (~enel@2601:4a:4202:d58c:f99a:d8c5:458f:ad5c) has quit (Read error: Connection reset by peer)
2016-01-13 23:39:50	◀	takle (~takle@188.29.164.101.threembb.co.uk) has quit (Read error: Connection reset by peer)
2016-01-13 23:40:07	kadoban	argoneus: If you'd have left off the "and" part I'd mostly agree I think.
2016-01-13 23:40:08	Gurkenglas	What's the difference between isInfixOf and isSubsequenceOf?
2016-01-13 23:40:21	argoneus	testtest: with monads you can kinda write code procedurally
2016-01-13 23:40:24	koala_man	Gurkenglas: infixes are contiguous, subsequences are not
2016-01-13 23:40:29	argoneus	or at least it looks like it
2016-01-13 23:40:31	▶	GLM (a1b5fd14@gateway/web/cgi-irc/kiwiirc.com/ip.161.181.253.20) has joined #haskell
2016-01-13 23:40:38	argoneus	which is something you generally don't do in haskell
2016-01-13 23:40:46	▶	takle_ (~takle@188.29.164.101.threembb.co.uk) has joined #haskell
2016-01-13 23:40:48	kadoban	Gurkenglas: [1,2,3] is a subsequence of [1, 5, 20, 2, 999, 3]
2016-01-13 23:40:49	▶	mmhat (~mmh@wvpn090.vpn.uni-wuerzburg.de) has joined #haskell
2016-01-13 23:40:53	Gurkenglas	kthx
2016-01-13 23:41:10	◀	takle_ (~takle@188.29.164.101.threembb.co.uk) has quit (Read error: Connection reset by peer)
2016-01-13 23:41:22	▶	emilypi (~emilypi@2604:2000:8006:ef00:89a:f4c:1da1:a6e5) has joined #haskell
2016-01-13 23:41:22	◀	mmhat (~mmh@wvpn090.vpn.uni-wuerzburg.de) has quit (Read error: Connection reset by peer)
2016-01-13 23:41:32	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-13 23:41:32	argoneus	I still don't entirely get them myself, but it's clear they aren't some black magic
2016-01-13 23:41:33	▶	takle (~takle@188.29.164.101.threembb.co.uk) has joined #haskell
2016-01-13 23:41:42	argoneus	it's just a typeclass with some functions
2016-01-13 23:41:45	dzdncnfzd	Can I ask what the import of this conversation is? It's clearly a question of definition -- isn't it more useful to ask, "Is it consistent with established usagee to call constant values functions?" and "Is it useful..?"
2016-01-13 23:41:50	▶	OrangeShark (~OrangeSha@2602:306:c5c9:a3e0:ccda:8fdc:896b:b1ac) has joined #haskell
2016-01-13 23:41:58	◀	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has quit (Remote host closed the connection)
2016-01-13 23:42:01	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-13 23:42:13	◀	takle (~takle@188.29.164.101.threembb.co.uk) has quit (Read error: Connection reset by peer)
2016-01-13 23:42:21	testtest	argoneus: Oh, so they're just ways of accessing/doing things outside of the normal stream of Haskell time-logic, which is why stuff like file input and GUI's require them?
2016-01-13 23:42:25	▶	plucas (~plucas@8.18.218.175) has joined #haskell
2016-01-13 23:42:33	argoneus	testtest: no
2016-01-13 23:42:43	argoneus	what you're describing is side effects
2016-01-13 23:42:53	shachaf	@check \xs ys -> ((xs :: [Bool]) `isInfixOf` ys) == (xs `isSubsequenceOf` ys)
2016-01-13 23:42:55	lambdabot	 *** Failed! Falsifiable (after 7 tests and 1 shrink):
2016-01-13 23:42:55	lambdabot	 [True,True] [True,False,True,False]
2016-01-13 23:42:58	◀	Itkovian (~Itkovian@vpnk064.ugent.be) has quit (Client Quit)
2016-01-13 23:43:04	dzdncnfzd	testtest: monads are a type class which define two functions
2016-01-13 23:43:14	▶	takle_ (~takle@188.29.164.101.threembb.co.uk) has joined #haskell
2016-01-13 23:43:17	▶	Itkovian (~Itkovian@vpnk064.ugent.be) has joined #haskell
2016-01-13 23:43:21	argoneus	testtest: the IO monad is a topic by itself
2016-01-13 23:43:27	dzdncnfzd	testtest: do you know what a type class is?
2016-01-13 23:43:38	◀	takle_ (~takle@188.29.164.101.threembb.co.uk) has quit (Read error: Connection reset by peer)
2016-01-13 23:43:42	▶	ernestob (~ernesto@179-8-245-190.fibertel.com.ar) has joined #haskell
2016-01-13 23:44:00	▶	zxq9 (~ceverett@FL1-119-244-160-115.okn.mesh.ad.jp) has joined #haskell
2016-01-13 23:44:02	▶	takle (~takle@188.29.164.101.threembb.co.uk) has joined #haskell
2016-01-13 23:44:19	▶	TOB1 (~ObitO@41.101.161.171) has joined #haskell
2016-01-13 23:44:20	◀	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has quit (Quit: More bugfixes)
2016-01-13 23:44:31	◀	takle (~takle@188.29.164.101.threembb.co.uk) has quit (Read error: Connection reset by peer)
2016-01-13 23:44:38	kadoban	Since you're still asking questions, some examples: Maybe is a Monad. It models computations that can fail. [] is a Monad. It models nondeterministic computations (computations with multiple answers). Either e is a Monad, it models computations that can fail with an error. IO is a Monad, it models computations with arbitrary side-effects in the computer when executed. State is a Monad, it models computations with implicit shared state.
2016-01-13 23:44:38	testtest	dzdncnfzd: I'm pretty sure that they're like generic types in Java
2016-01-13 23:44:50	▶	takle (~takle@188.29.164.101.threembb.co.uk) has joined #haskell
2016-01-13 23:44:53	▶	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has joined #haskell
2016-01-13 23:45:06	◀	T0BI (~ObitO@41.101.185.236) has quit (Ping timeout: 250 seconds)
2016-01-13 23:45:11	◀	takle (~takle@188.29.164.101.threembb.co.uk) has quit (Read error: Connection reset by peer)
2016-01-13 23:45:11	◀	wanderleyguima (~wanderley@199.201.64.2) has quit (Ping timeout: 264 seconds)
2016-01-13 23:45:16	Zekka|Sigfig	testtest: They’re more like abstract classes, but I don’t think that intuition will help you very much
2016-01-13 23:45:30	kadoban	Monads as computational models, I'm not sure that captures everything though. Like Parsers can be Monads, and I'm not sure how to word that as a computational model …
2016-01-13 23:45:33	dzdncnfzd	testtest: I don't program in Java... I think it might be kind of akin to an interface? It's a set of functions which more than one datatype implements
2016-01-13 23:45:35	argoneus	testtest: do you know what a functor or applicative is
2016-01-13 23:46:17	cheater	testtest: monads are a way of saying "this thing should happen first and that thing should happen second". that's all. there are lots of things where order matters, like say: IO, transactions, writing to logs, etc.
2016-01-13 23:46:51	zoku	haha, there are so many monad analogies
2016-01-13 23:46:52	◀	rgr (~user@p20030086AB291D677EDD90FFFE49493A.dip0.t-ipconnect.de) has quit (Quit: ERC (IRC client for Emacs 24.5.50.5))
2016-01-13 23:46:55	▶	sylus (~sylus@174-25-54-234.ptld.qwest.net) has joined #haskell
2016-01-13 23:46:58	▶	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined #haskell
2016-01-13 23:47:00	dzdncnfzd	testtest: Like, I can have an Int or a Float, but I can convert both of them to strings because they're members of the Show typeclass
2016-01-13 23:47:09	zoku	it helped me yesterday to think of a monad as a context for computation
2016-01-13 23:47:24	Zekka|Sigfig	Of course, *monoids* are also about composition where order can matter!
2016-01-13 23:47:27	isu	Gurkenglas: thank you!
2016-01-13 23:47:32	testtest	cheater: Thanks, that sounds reasonable.
2016-01-13 23:47:35	Zekka|Sigfig	And applicatives are *also* about composition where order can matter!
2016-01-13 23:47:43	Zekka|Sigfig	But that is certainly the case for monads too.
2016-01-13 23:47:43	◀	slomo (~slomo@unaffiliated/slomo) has quit (Quit: Ex-Chat)
2016-01-13 23:47:47	dzdncnfzd	which means that if I have `x :: Int` and `y :: Float`, I can write both `show x` and `show y`
2016-01-13 23:47:50	testtest	dzdncnfzd: Mhm
2016-01-13 23:47:51	▶	jedws (~jedws@eth59-167-133-100.static.internode.on.net) has joined #haskell
2016-01-13 23:47:51	Zekka|Sigfig	(I think monads say a little more than that)
2016-01-13 23:48:02	dzdncnfzd	testtest: which means that if I have `x :: Int` and `y :: Float`, I can write both `show x` and `show y`
2016-01-13 23:48:05	◀	lritter (~lritter@x5ce5244c.dyn.telefonica.de) has quit (Quit: Leaving)
2016-01-13 23:49:01	▶	codafi (~textual@128.237.219.108) has joined #haskell
2016-01-13 23:49:22	dzdncnfzd	testtest: Okay. So typeclasses are just lists of functions that various datatypes (Int, Float, String, whatever) implement. A monad is a typeclass with two specific functions in it, one called "bind" and the other called "return."
2016-01-13 23:49:29	cheater	testtest: in most common categorizations, the immediate superclass of Monad is Applicative. That means, there are some things that are Applicatives but not Monads. If a thing is Applicative, but you don't know whether it's a Monad or not, that thing does not ensure order of evaluation.
2016-01-13 23:49:34	◀	sylus (~sylus@174-25-54-234.ptld.qwest.net) has left #haskell
2016-01-13 23:50:12	argoneus	man
2016-01-13 23:50:13	dzdncnfzd	testtest: "bind" and "return" both have to satisfy a few equalities for them to make a monad (GHC doesn't make sure this is true -- you have to verify them as a programmer)
2016-01-13 23:50:21	argoneus	why are there barely any examples on calling C code with haskell :(
2016-01-13 23:50:23	cheater	testtest: a type of Applicative is Alternative. For example, foo = bar <|> baz. foo will be either bar or baz, depending on which one succeeds. But you don't know which one it'll be.
2016-01-13 23:50:25	testtest	dzdncnfzd: Shit man, that's crazy. I didn't realize how extendable Haskell really was until I thought about that.
2016-01-13 23:50:26	◀	SageEx (~SageEx@14.139.194.12) has quit (Quit: WeeChat 1.3)
2016-01-13 23:50:52	▶	chrisramsey (~chrisrams@192.171.117.210) has joined #haskell
2016-01-13 23:50:54	testtest	cheater: Oh, that's kind of weird. Interesting though.
2016-01-13 23:51:02	◀	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has quit (Ping timeout: 246 seconds)
2016-01-13 23:51:04	cheater	argoneus: there are 10 pages of results here. https://www.google.com/search?q=haskell+c+ffi
2016-01-13 23:51:05	dzdncnfzd	testtest: the rest of the explanations are all noise and won't get you anywhere. You'll get it as you program with them
2016-01-13 23:51:27	argoneus	cheater: sorry, c++**
2016-01-13 23:51:34	dzdncnfzd	testtest: trying to explain this is like trying to explain what it means for a negative times a negative to be positive
2016-01-13 23:51:40	cheater	argoneus: you can't, you have to wrap your stuff in C.
2016-01-13 23:51:48	dzdncnfzd	testtest: the explanations come way after your having learned it
2016-01-13 23:52:08	testtest	dzdncnfzd: Okay, thanks. I'm really sorry about having to ask these questions.
2016-01-13 23:52:22	argoneus	cheater: so I wrap the class in a struct and make functions use this struct and call the c++ functions somehow?
2016-01-13 23:52:24	◀	takuan (~takuan@d8d86bfc6.access.telenet.be) has quit (Remote host closed the connection)
2016-01-13 23:52:27	argoneus	that's what I got when I searched
2016-01-13 23:52:29	geekosaur	binding directly to c++ is an utter nightmare
2016-01-13 23:52:31	ℹ	irc: disconnected from server
2016-01-13 23:54:01	▶	psyq (~Psyq@unaffiliated/psyq) has joined #haskell
2016-01-13 23:54:01	ℹ	Topic for #haskell is "http://www.haskell.org/ | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | http://reddit.com/r/haskell | Administrative issues: #haskell-ops | Hackage status? http://status.haskell.org | http://downloads.haskell.org"
2016-01-13 23:54:01	ℹ	Topic set by quicksilver on Wed, 07 Oct 2015 16:39:51
2016-01-13 23:54:02	ℹ	Channel #haskell: 1519 nicks (1 op, 0 voices, 1518 normals)
2016-01-13 23:54:02	ℹ	URL for #haskell: http://www.haskell.org/
2016-01-13 23:54:02	testtest	dzdncnfzd: Yeah I've got a friend who's interested in Elm. Sounds interesting though, how someone somehow thought that a functional language could work on the rediculously dynamic frontend
2016-01-13 23:54:04	cheater	argoneus: yes.
2016-01-13 23:54:26	ℹ	Channel created on Sun, 26 Nov 2006 07:42:48
2016-01-13 23:54:35	◀	lkba (~AndChat43@aess82.neoplus.adsl.tpnet.pl) has quit (Remote host closed the connection)
2016-01-13 23:54:49	dzdncnfzd	testtest: I've not done a lot with it, but it actually seemed like a much more maintainable idea than traditional OOP stuff
2016-01-13 23:54:54	◀	schlicht (~fl@f055219108.adsl.alicedsl.de) has quit (Client Quit)
2016-01-13 23:55:00	▶	Heasummn (~Heasummn@c-73-51-87-243.hsd1.il.comcast.net) has joined #haskell
2016-01-13 23:55:07	Cale	argoneus: What in particular are you interested in binding to?
2016-01-13 23:55:25	◀	umib0zu (~umib0zu@c-50-177-152-117.hsd1.ma.comcast.net) has quit (Quit: umib0zu)
2016-01-13 23:55:35	argoneus	Cale: a C++ library
2016-01-13 23:55:41	◀	chrisramsey (~chrisrams@192.171.117.210) has quit (Remote host closed the connection)
2016-01-13 23:55:42	argoneus	I can give you the specifics in overflow if you want to help
2016-01-13 23:55:44	Cale	... I knew that much
2016-01-13 23:55:45	Cale	heh
2016-01-13 23:55:51	▶	jbiesnecker (~textual@199.201.64.129) has joined #haskell
2016-01-13 23:55:53	argoneus	don't want to spam irrelevant stuff here
2016-01-13 23:55:58	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-13 23:56:14	Cale	I don't think the name of the C++ library is too irrelevant
2016-01-13 23:56:19	argoneus	ah, right
2016-01-13 23:56:20	argoneus	BWAPI
2016-01-13 23:56:26	▶	techy (~u0_a121@c-71-233-10-81.hsd1.ma.comcast.net) has joined #haskell
2016-01-13 23:56:27	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-13 23:56:36	testtest	dzdncnfzd: Honestly, coming from an entirely OOP/Python/JS standpoint I can't understand that. Maybe a little, because of Node's event-based stuff but it just sounds alien to me.
2016-01-13 23:56:43	argoneus	it's basically a module class with a bunch of event handlers
2016-01-13 23:56:44	Cale	ah, cool
2016-01-13 23:56:53	▶	umib0zu (~umib0zu@c-50-177-152-117.hsd1.ma.comcast.net) has joined #haskell
2016-01-13 23:57:00	argoneus	and then utility classes and functions for map and unit manipulation
2016-01-13 23:57:07	argoneus	but it's all in C++
2016-01-13 23:57:19	Cale	I know a guy who has won a lot of the BW AI competitions :)
2016-01-13 23:57:28	argoneus	name?
2016-01-13 23:57:37	Cale	Dave Churchill
2016-01-13 23:57:54	argoneus	oh, UOA
2016-01-13 23:58:07	testtest	Well, bye guys! Thanks a ton for your help, I'm going to go now!
2016-01-13 23:58:16	testtest	Sorry about asking in the first place
2016-01-13 23:58:18	argoneus	Cale: yeah I wanted to get into the development myself
2016-01-13 23:58:25	◀	testtest (6c061478@gateway/web/freenode/ip.108.6.20.120) has quit (Quit: Page closed)
2016-01-13 23:58:31	argoneus	but I don't fancy the idea of writing an AI in C++ and I don't want to use java either, so I thought of using Haskell
2016-01-13 23:58:35	argoneus	but there are no bindings
2016-01-13 23:58:41	◀	jeltsch (~wolfgang@85.253.142.189.cable.starman.ee) has quit (Quit: jeltsch)
2016-01-13 23:58:48	argoneus	and I'm too dum to make my own
2016-01-13 23:58:49	argoneus	apparently
2016-01-13 23:58:51	Cale	Yeah, it's going to be an up-hill battle
2016-01-13 23:58:58	◀	Lord_of_Life (Elite12246@gateway/shell/elitebnc/x-cfqinittlijrqocg) has quit (Excess Flood)
2016-01-13 23:59:02	dzdncnfzd	testtest: enjoy yourself!
2016-01-13 23:59:06	▶	Lord_of_Life (Elite12246@gateway/shell/elitebnc/x-xkjfhotqpuqemwew) has joined #haskell
2016-01-13 23:59:08	dzdncnfzd	testtest: and good luck!
2016-01-13 23:59:15	argoneus	especially since this topic seems to be... rather unfriendly
2016-01-13 23:59:16	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-13 23:59:29	▶	Ygg (~Ygg@ppp-seco21th2-46-193-173-113.wb.wifirst.net) has joined #haskell
2016-01-13 23:59:34	argoneus	basically when I look up sources on how to translate C++ to Haskell the general gist of it is "good luck"
2016-01-13 23:59:43	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-13 23:59:50	▶	Ch0c0late (uid49959@gateway/web/irccloud.com/x-cjtkancrjswyqcuv) has joined #haskell
2016-01-14 00:00:04	argoneus	there are many tools but they are bad for one reason or another
2016-01-14 00:00:05	▶	jeltsch (~wolfgang@85.253.142.189.cable.starman.ee) has joined #haskell
2016-01-14 00:00:05	ℹ	kipras is now known as kipras`away
2016-01-14 00:00:10	▶	mmhat (~mmh@wvpn044.vpn.uni-wuerzburg.de) has joined #haskell
2016-01-14 00:00:21	◀	jeltsch (~wolfgang@85.253.142.189.cable.starman.ee) has quit (Client Quit)
2016-01-14 00:00:22	geekosaur	argoneus, you would need to write in C++ something which wraps the various APIs as "foreign "C"" exports. C++ iss too nightmrish to bind to diectly, especially when namespaces and templates are involved
2016-01-14 00:00:25	▶	Talryn (~Talryn@unaffiliated/talryn) has joined #haskell
2016-01-14 00:00:38	geekosaur	(and std::string, for one very common example, uses both)
2016-01-14 00:00:40	◀	pacak (~pacak@2401:7400:e800:82d5:7552:c8c1:ed00:eb54) has quit (Ping timeout: 260 seconds)
2016-01-14 00:00:46	Enigmagic	argoneus: eventually someone will add c++ support to language-c-inline and that'll make a lot of stuff easier
2016-01-14 00:00:48	kadoban	So you basically need to write a C API, and then wrap that?
2016-01-14 00:01:07	Cale	kadoban: Yeah, pretty much
2016-01-14 00:01:07	◀	mmhat (~mmh@wvpn044.vpn.uni-wuerzburg.de) has quit (Read error: Connection reset by peer)
2016-01-14 00:01:11	◀	cbm80 (bk@thur.ellian.org) has quit (Ping timeout: 246 seconds)
2016-01-14 00:01:12	ℹ	AfC1 is now known as AfC
2016-01-14 00:01:32	◀	mach (~mach@162.248.141.245) has quit (Ping timeout: 246 seconds)
2016-01-14 00:01:37	kadoban	Seems fair enough I guess. It would be kind of terrible trying to write N separate FFIs
2016-01-14 00:01:44	Cale	This is a pretty similar story in essentially every other language where people want to interface with C++ code, not just Haskell.
2016-01-14 00:01:54	geekosaur	yes :(
2016-01-14 00:02:12	kadoban	Right :-/
2016-01-14 00:02:12	◀	afcondon (~afcondon@109.78.235.220) has quit (Remote host closed the connection)
2016-01-14 00:02:17	geekosaur	until C++11 you couldn't even do that much because there wasn't any kind of standard for little things like name mangling
2016-01-14 00:02:25	◀	_jzl (~jzl@2604:180:2:3c5::94b6) has quit (Ping timeout: 260 seconds)
2016-01-14 00:02:36	geekosaur	so your code would work with some g++ versions but not others, if you did it by hand
2016-01-14 00:02:39	Enigmagic	Cale: SWIG makes it easier for a lot of other languages
2016-01-14 00:02:42	shachaf	What, there's a standard in C++11?
2016-01-14 00:02:45	Enigmagic	just not Haskell :P
2016-01-14 00:02:47	▶	baweaver (~baweaver@173.230.196.25) has joined #haskell
2016-01-14 00:02:52	▶	Luke (~Luke@unaffiliated/luke) has joined #haskell
2016-01-14 00:03:15	geekosaur	shachaf, C++11 says "compilers for a platform must interoperate, every platform must define its own addendum documenting its interface"
2016-01-14 00:03:17	◀	jstolarek (~killy@hydra.ics.p.lodz.pl) has quit (Ping timeout: 246 seconds)
2016-01-14 00:03:22	▶	mach (~mach@162.248.141.245) has joined #haskell
2016-01-14 00:03:24	argoneus	so basically, I'm SOL?
2016-01-14 00:03:35	◀	tag (~tag@72.5.114.17) has quit (Ping timeout: 260 seconds)
2016-01-14 00:03:36	▶	cbm80 (bk@thur.ellian.org) has joined #haskell
2016-01-14 00:03:45	▶	yqt (~yqt@81.88.230.28) has joined #haskell
2016-01-14 00:03:52	kadoban	argoneus: Well, not really … you just have an extra step to do. Write a C API first.
2016-01-14 00:04:05	▶	jstolarek (~killy@hydra.ics.p.lodz.pl) has joined #haskell
2016-01-14 00:04:10	argoneus	I thought of integrating a javascript engine like V8 inside the library and using SWIG or such to translate the classes to javascript objects, and then I could use clojurescript or purescript or something
2016-01-14 00:04:14	argoneus	but that seems like a lot of work too
2016-01-14 00:04:18	◀	amharc (kp347208@students.mimuw.edu.pl) has quit (Ping timeout: 256 seconds)
2016-01-14 00:04:22	argoneus	kadoban: isn't that like, difficult, though >_>
2016-01-14 00:04:23	▶	afcondon (~afcondon@109.78.235.220) has joined #haskell
2016-01-14 00:04:35	▶	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined #haskell
2016-01-14 00:04:38	◀	fizruk (~anonymous@128-68-140-96.broadband.corbina.ru) has quit (Quit: fizruk)
2016-01-14 00:04:39	▶	glitters1ark (~griffin@ool-43553952.dyn.optonline.net) has joined #haskell
2016-01-14 00:04:45	◀	glittershark (~griffin@38.108.221.50) has quit (Ping timeout: 260 seconds)
2016-01-14 00:04:53	◀	ahihi (~ahihi@89-27-27-84.bb.dnainternet.fi) has quit (Read error: Connection reset by peer)
2016-01-14 00:04:58	▶	jeltsch (~wolfgang@85.253.142.189.cable.starman.ee) has joined #haskell
2016-01-14 00:05:01	▶	ahihi (~ahihi@89-27-27-84.bb.dnainternet.fi) has joined #haskell
2016-01-14 00:05:03	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-14 00:05:09	argoneus	I need to basically duplicate the headers and cpp files, and then compile it twice
2016-01-14 00:05:10	Cale	Enigmagic: actually, that's an amusing suggestion -- can SWIG just generate an interface for C?
2016-01-14 00:05:16	kadoban	argoneus: Kinda, yeah. Writing good wrappers tends to be pretty hard. Especially if the semantics you want to expose don't match the semantics of what you're wrapping.
2016-01-14 00:05:17	▶	jzl (~jzl@2604:180:2:3c5::94b6) has joined #haskell
2016-01-14 00:05:35	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-14 00:05:36	Enigmagic	Cale: i don't know how it works for C++ but i'd imagine it does that
2016-01-14 00:05:47	argoneus	like if a function takes a std::list<someclass>, that's really tricky in C, isn't it
2016-01-14 00:05:50	▶	amharc (kp347208@students.mimuw.edu.pl) has joined #haskell
2016-01-14 00:06:02	▶	lynnard (~lingnan@cpc1-walt13-2-0-cust402.13-2.cable.virginm.net) has joined #haskell
2016-01-14 00:06:06	Enigmagic	no
2016-01-14 00:06:07	Cale	You might at least be able to get it to do that much, and then write a Haskell binding to the C interface that it generated.
2016-01-14 00:06:27	argoneus	swig doesn't support C as output
2016-01-14 00:06:28	◀	uncle-j_j (~unclechu@95.153.133.236) has quit (Remote host closed the connection)
2016-01-14 00:06:28	argoneus	only input
2016-01-14 00:07:06	◀	baweaver (~baweaver@173.230.196.25) has quit (Ping timeout: 240 seconds)
2016-01-14 00:07:46	◀	hrehf (~s@x4db28c81.dyn.telefonica.de) has quit (Quit: bfg)
2016-01-14 00:07:48	Enigmagic	argoneus: i think the idea would be to find a swig target that generates nice-ish C apis and use those instead
2016-01-14 00:07:51	Cale	argoneus: Well, it has to do something when it generates interfaces to C++ libraries for, e.g. Python
2016-01-14 00:08:10	argoneus	Enigmagic: Cale I already looked into this, there's no official C binding generator
2016-01-14 00:08:11	Cale	Or any of the other languages it supports.
2016-01-14 00:08:19	◀	Moyst (~moyst@212-149-208-8.bb.dnainternet.fi) has quit (Remote host closed the connection)
2016-01-14 00:08:20	◀	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has quit (Remote host closed the connection)
2016-01-14 00:08:33	Cale	So maybe you could basically trick it into going half-way for you
2016-01-14 00:08:35	▶	deam (uid99417@gateway/web/irccloud.com/x-mfpnkifjgmsoeaff) has joined #haskell
2016-01-14 00:08:47	▶	Moyst (~moyst@212-149-208-8.bb.dnainternet.fi) has joined #haskell
2016-01-14 00:08:50	◀	skrio (~skrio@80-244-74-5.customer.t3.se) has quit (Ping timeout: 260 seconds)
2016-01-14 00:08:50	◀	linduxed (~linduxed@h77-53-188-24.dynamic.se.alltele.net) has quit (Ping timeout: 260 seconds)
2016-01-14 00:08:55	◀	glitters1ark (~griffin@ool-43553952.dyn.optonline.net) has quit (Ping timeout: 240 seconds)
2016-01-14 00:09:20	Cale	You use it to generate a Python binding, then take the C interface that it would have generated as part of that, and write the Haskell FFI stuff to bind to *that*
2016-01-14 00:09:35	▶	baweaver (~baweaver@173.230.196.25) has joined #haskell
2016-01-14 00:10:03	argoneus	actually
2016-01-14 00:10:04	argoneus	there's this
2016-01-14 00:10:11	argoneus	https://github.com/swig/swig/tree/gsoc2012-c
2016-01-14 00:10:14	▶	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined #haskell
2016-01-14 00:10:14	argoneus	a branch
2016-01-14 00:10:17	argoneus	I wonder if this would work
2016-01-14 00:10:35	argoneus	this branch is apparently from google summer of code and it supports C as a target language
2016-01-14 00:10:58	argoneus	it's a bot old tho
2016-01-14 00:11:00	argoneus	bit*
2016-01-14 00:11:14	Enigmagic	C hasn't changed that much since 2012 ;-)
2016-01-14 00:11:20	kadoban	^
2016-01-14 00:11:39	argoneus	I'll try using this then
2016-01-14 00:11:41	Cale	argoneus: Yeah, there's not much of an excuse for SWIG not to have C as a target, because surely it's generating halfway-decent C bindings as part of most of the other bindings to other languages that it's giving you.
2016-01-14 00:11:57	◀	twanvl (~twanvl@dhcp-077-250-086-217.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-14 00:11:57	▶	dobq (~tulcod@unaffiliated/tulcod) has joined #haskell
2016-01-14 00:11:59	kadoban	Cale: That does seem kinda weird, now that you mention it.
2016-01-14 00:12:14	◀	strburst (~allen@res388d-128-61-88-50.res.gatech.edu) has quit (Ping timeout: 256 seconds)
2016-01-14 00:12:19	Cale	argoneus: Even if you can't get the GSOC thing to work well, try just using one of the other targets, and poke around for generated C code.
2016-01-14 00:12:28	Cale	Maybe it'll be reasonable
2016-01-14 00:12:34	argoneus	ugh, makefiles
2016-01-14 00:12:44	argoneus	C is like the only reason why I'd switch away from windows
2016-01-14 00:13:08	▶	pacak (~pacak@175.156.145.194) has joined #haskell
2016-01-14 00:13:29	argoneus	Cale: I'll try the GSOC thing first, and then I should be able to just make a bunch of ccalls in haskell, right
2016-01-14 00:13:42	Gurkenglas	"<Cale>	If there's supposed to be an isomorphism between [a] -> r and some mystery type people were calling a -> a -> ... -> r, well, I don't know what the latter type is, but it sure looks like it's meant to be a -> X for some type X." <- If it is meant to be a -> X for some type X, then [a] -> r must instead be NonEmpty a -> r, since there's at least one argument.
2016-01-14 00:14:12	◀	jeltsch (~wolfgang@85.253.142.189.cable.starman.ee) has quit (Quit: jeltsch)
2016-01-14 00:14:14	Cale	argoneus: Yeah, I recommend reading the FFI documentation here: http://www.cse.unsw.edu.au/~chak/haskell/ffi/ffi/ffi.html -- relative to the rest of the report, it's much more tutorial-like.
2016-01-14 00:14:14	◀	SCHAAP137 (SCHAPiE@unaffiliated/schaap137) has quit (Remote host closed the connection)
2016-01-14 00:14:31	Cale	Gurkenglas: right.
2016-01-14 00:14:39	argoneus	noice, thanks :)
2016-01-14 00:14:42	Phyx-	why would C make you switch away from Windows?
2016-01-14 00:14:49	argoneus	Phyx-: because GNU tools are aids on windows
2016-01-14 00:14:52	Cale	Gurkenglas: I was mostly pointing out that people were speaking nonsense :)
2016-01-14 00:14:55	argoneus	there's cygwin but blah
2016-01-14 00:15:11	argoneus	(then again gnu itself is aids)
2016-01-14 00:15:32	Cale	Gurkenglas: That was a long time ago though...
2016-01-14 00:15:32	dobq	does haskell have anything that can call arbitrary C functions (type known at runtime) except for libffi?
2016-01-14 00:15:35	◀	python476 (~user@2a02-8420-6f5c-4200-021f-3bff-fe7d-f603.rev.sfr.net) has quit (Ping timeout: 255 seconds)
2016-01-14 00:15:39	Gurkenglas	The argument you used doesnt work tho because NonEmpty Void -> Void is inhabited, unlike [Void] -> Void
2016-01-14 00:15:56	Gurkenglas	Ya I was looking through ircbrowse for mentions of uncurryN. And now I'm adding to them.
2016-01-14 00:15:57	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-14 00:16:13	Phyx-	argoneus: I have generally found them quite ok, msys2 is particularly good
2016-01-14 00:16:18	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-14 00:16:30	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-14 00:16:31	▶	NeverDie (~NeverDie@pool-98-113-171-151.nycmny.fios.verizon.net) has joined #haskell
2016-01-14 00:16:51	▶	homovitruvius (~user@pool-108-17-70-127.pitbpa.fios.verizon.net) has joined #haskell
2016-01-14 00:16:59	◀	yqt (~yqt@81.88.230.28) has quit (Quit: KVIrc 4.0.4 Insomnia http://www.kvirc.net/)
2016-01-14 00:17:09	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-14 00:17:22	Cale	Gurkenglas: Yeah, fair enough. I still don't really know what people were trying to get at with the ellipsis.
2016-01-14 00:17:28	argoneus	Phyx-: do you prefer it to cygwin? never used msys
2016-01-14 00:17:36	argoneus	also I'll stop the offtopic after this, enough about BWAPI
2016-01-14 00:17:48	Phyx-	argoneus: very much so, I find cygwin to be horrible
2016-01-14 00:17:54	argoneus	alright cheers
2016-01-14 00:17:59	Phyx-	also msys2 can produce native windows binaries
2016-01-14 00:18:07	argoneus	back to studying, I'll read all the stuff you guys suggested later
2016-01-14 00:18:09	Phyx-	GHC is nowadays built using msys2
2016-01-14 00:18:10	argoneus	thanks! :)
2016-01-14 00:18:37	◀	croyd (~croyd@129.10.9.92) has quit (Remote host closed the connection)
2016-01-14 00:18:38	▶	dmj` (~user@75-150-214-2-Illinois.hfc.comcastbusiness.net) has joined #haskell
2016-01-14 00:19:03	◀	algae (~algae@blk-11-46-131.eastlink.ca) has quit (Quit: leaving)
2016-01-14 00:19:34	▶	broma0 (~broma0@ool-182e23f2.dyn.optonline.net) has joined #haskell
2016-01-14 00:19:36	Gurkenglas	Is there a way to view ircbrowse without all the join/part stuff?
2016-01-14 00:19:53	broma0	is there currently any way to try out the full OverloadedRecordFields extension yet? 
2016-01-14 00:20:07	▶	jmcarthur (~jmcarthur@pool-72-89-137-39.nycmny.fios.verizon.net) has joined #haskell
2016-01-14 00:20:10	▶	mmhat (~mmh@wvpn047.vpn.uni-wuerzburg.de) has joined #haskell
2016-01-14 00:20:11	▶	mizu_no_oto (~textual@c-73-219-2-228.hsd1.ma.comcast.net) has joined #haskell
2016-01-14 00:20:43	▶	skrio (~skrio@80-244-74-5.customer.t3.se) has joined #haskell
2016-01-14 00:20:43	◀	mmhat (~mmh@wvpn047.vpn.uni-wuerzburg.de) has quit (Read error: Connection reset by peer)
2016-01-14 00:21:44	◀	ixti (~ixti@36.9.165.83.dynamic.reverse-mundo-r.com) has quit (Quit: WeeChat 1.3)
2016-01-14 00:21:55	◀	crobbins (~crobbins@2602:30a:c08e:19e0:8929:cd1e:745c:b052) has quit (Ping timeout: 240 seconds)
2016-01-14 00:22:12	▶	linduxed (~linduxed@h77-53-188-24.dynamic.se.alltele.net) has joined #haskell
2016-01-14 00:22:22	augur	is it possible to sort of.. quantify .. in constraints?
2016-01-14 00:22:39	◀	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has quit (Remote host closed the connection)
2016-01-14 00:22:55	augur	like, suppose f :: * -> * -> * and i want to say f is functorial in its second position, can i make a constraint equivalent to the invalid   forall a. Functor (f a)   ?
2016-01-14 00:23:14	◀	frerich (~frerich@kde/raabe) has quit (Remote host closed the connection)
2016-01-14 00:23:20	Gurkenglas	Cale, pretty sure they meant a function that they can apply any number of arguments to, not that there is a unique but unknown number of arguments that can be passed to the function as you seemed to think. Sounds like PrintfType from https://hackage.haskell.org/package/base-4.8.1.0/docs/Text-Printf.html
2016-01-14 00:23:21	jle`	augur: i don't know a way to do it directly, but i seen/i have worked with using Dict and Entailment to simulate things like this
2016-01-14 00:23:30	augur	jle`: gross :(
2016-01-14 00:23:33	▶	neoncontrails (~neoncontr@wsip-70-166-89-11.sd.sd.cox.net) has joined #haskell
2016-01-14 00:23:35	jle`	ikr
2016-01-14 00:23:44	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-14 00:24:12	jle`	i'm not sure if it's a fundamental limit of how typeclasses work, or if it's just an unimplemented feature
2016-01-14 00:24:14	Cale	Gurkenglas: Yeah, it's a bit hard to know what is meant by such a thing in the context of Haskell's type system.
2016-01-14 00:24:15	augur	jle`: i know there are a bunch of convenient wrappers in Bifunctor but that forces me to use the nasty wrapped types in places where that's highly undesirable
2016-01-14 00:24:16	▶	jeltsch (~wolfgang@85.253.142.189.cable.starman.ee) has joined #haskell
2016-01-14 00:24:18	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-14 00:24:34	jle`	i know your pain
2016-01-14 00:24:46	Gurkenglas	(Which is of course also a cheat since printf is one "function from String to an n-argument function" for each n, not a function from String to the type of any-number-of-argument functions.)
2016-01-14 00:24:51	Cale	Gurkenglas: Yes, you can do PrintfType-style trickery, but... that didn't seem too helpful in context
2016-01-14 00:24:53	◀	Itkovian (~Itkovian@vpnk064.ugent.be) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-14 00:25:01	jle`	but i haven't put too much effort into figuring out if there is a solution or not
2016-01-14 00:25:04	jle`	that doesn't involve those wrappers
2016-01-14 00:25:06	Cale	right
2016-01-14 00:25:08	▶	Itkovian (~Itkovian@vpnk064.ugent.be) has joined #haskell
2016-01-14 00:25:15	jle`	so don't give up hope just because i said so :)
2016-01-14 00:25:30	◀	jeltsch (~wolfgang@85.253.142.189.cable.starman.ee) has quit (Client Quit)
2016-01-14 00:26:46	◀	broma0 (~broma0@ool-182e23f2.dyn.optonline.net) has quit (Ping timeout: 240 seconds)
2016-01-14 00:26:54	◀	umib0zu (~umib0zu@c-50-177-152-117.hsd1.ma.comcast.net) has quit (Quit: umib0zu)
2016-01-14 00:27:08	augur	jle`: i'd be tempted to write something like   instance Bifunctor f => Functor (f a)   but im certain that would fuck stuff up
2016-01-14 00:27:22	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Remote host closed the connection)
2016-01-14 00:27:24	◀	athan (~athan_@2601:283:4401:6090:7169:6b33:1d31:d878) has quit (Remote host closed the connection)
2016-01-14 00:27:26	◀	techy (~u0_a121@c-71-233-10-81.hsd1.ma.comcast.net) has quit (Ping timeout: 240 seconds)
2016-01-14 00:27:34	jle`	and some kittens will die somewhere, too
2016-01-14 00:27:50	augur	i guess maybe the right answer here is to abstract over the map function
2016-01-14 00:28:03	augur	or, well, not the map function
2016-01-14 00:28:04	scshunt	Hey all, is there anyway to get stackage to locally generate & install documentation for all the packages it installs?
2016-01-14 00:28:18	Clint	do you mean stack
2016-01-14 00:28:18	◀	plucas (~plucas@8.18.218.175) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-14 00:28:25	jle`	well, i'm not sure if (forall a. Functor (f a)) is even a meaningful thing to say
2016-01-14 00:28:26	augur	oh, wait right, that wont work because i specifically need Functor's. d'oh
2016-01-14 00:28:38	jle`	like, it might be a fundamental issue
2016-01-14 00:28:43	▶	yqt (~yqt@81.88.230.28) has joined #haskell
2016-01-14 00:28:44	augur	jle`: sure it's meaningful!
2016-01-14 00:28:54	augur	it means that for any choice of a, i can give you a functor instance for `f a`
2016-01-14 00:29:04	jle`	yes, but how would that be implemented?
2016-01-14 00:29:06	◀	L8D (~L8D@216.201.168.18) has quit (Ping timeout: 240 seconds)
2016-01-14 00:29:10	jle`	meaningful might be the wrong word, heh, sorry
2016-01-14 00:29:23	augur	same way you'd implement anything else :)
2016-01-14 00:29:31	augur	remember, Functor is just a fancy hidden record type
2016-01-14 00:29:54	◀	afcondon (~afcondon@109.78.235.220) has quit (Remote host closed the connection)
2016-01-14 00:30:03	jle`	yes, but that would require that an instance Functor (Bar a) where ... is written, and exactly that, i guess
2016-01-14 00:30:05	augur	data FunctorMethods f = FunctorMethods { fmap :: forall a b. (a -> b) -> f a -> f b }
2016-01-14 00:30:37	jle`	you'd ahve to preserve the forallness of the defined instance
2016-01-14 00:30:49	augur	so, if you can implement    foo :: FunctorMethods (F a)    for your particular F, you're fine
2016-01-14 00:30:56	▶	plucas (~plucas@8.18.218.175) has joined #haskell
2016-01-14 00:30:56	◀	hiroakip (~hiroaki@ip4d150c8e.dynamic.kabel-deutschland.de) has quit (Quit: Ex-Chat)
2016-01-14 00:31:26	jle`	yes, but; i feel like distinguisihing foo :: FunctorMethods (F a) and foo :: FunctorMethods (F Int) might be weird
2016-01-14 00:31:27	augur	eg:   rightPairFunc :: FunctorMethods ((,) a)
2016-01-14 00:31:55	augur	rightPairFunc = FunctorMethods { fmap = \f (x,y) -> (x, f y) }
2016-01-14 00:32:03	◀	cody` (uid125493@gateway/web/irccloud.com/x-smevevojuzznquuw) has quit (Quit: Connection closed for inactivity)
2016-01-14 00:32:23	jle`	yeah; but that normally works because rightPairFunc can unify with any desired a
2016-01-14 00:32:29	jle`	so it'll work when you want (,) Int
2016-01-14 00:32:31	◀	GLM (a1b5fd14@gateway/web/cgi-irc/kiwiirc.com/ip.161.181.253.20) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2016-01-14 00:32:33	jle`	i'll work when you want (,) Bool, etc.
2016-01-14 00:32:54	augur	right, but rightPairFunc is polymorphic in a, so it's fine :)
2016-01-14 00:33:55	jle`	so if GHC picks the instance it wants there, it *has* to pick the one quantified for all a
2016-01-14 00:33:55	augur	at least, it works in principle, and is perfectly meaningful. but it doesnt work in haskell
2016-01-14 00:34:04	augur	im not sure what you mean
2016-01-14 00:34:20	▶	Wizek (~Wizek@catv-89-132-132-110.catv.broadband.hu) has joined #haskell
2016-01-14 00:34:23	▶	jeltsch (~wolfgang@85.253.142.189.cable.starman.ee) has joined #haskell
2016-01-14 00:34:42	◀	kaictl_work (~kaictl@unaffiliated/kaisforza) has quit (Quit: WeeChat 1.3)
2016-01-14 00:34:46	▶	croyd (~croyd@146-115-81-34.c3-0.sbo-ubr1.sbo.ma.cable.rcn.com) has joined #haskell
2016-01-14 00:35:02	◀	codafi (~textual@128.237.219.108) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-14 00:35:26	jle`	i guess the algorithm that GHC uses to pick which instance to use is already sort of mystical to me so I can't say too many things with certainty, heh
2016-01-14 00:35:37	◀	jeltsch (~wolfgang@85.253.142.189.cable.starman.ee) has quit (Client Quit)
2016-01-14 00:35:44	▶	adu (~ajr@c-73-133-129-229.hsd1.md.comcast.net) has joined #haskell
2016-01-14 00:36:08	augur	"which instance to use" is a none-thing, or should be. instances should be unique
2016-01-14 00:36:15	▶	rardiol (~ricardo@177.52.229.102) has joined #haskell
2016-01-14 00:36:28	▶	broma0 (~broma0@ool-182e23f2.dyn.optonline.net) has joined #haskell
2016-01-14 00:36:33	◀	m1dnight_ (~m1dnight@80.200.226.205) has quit (Quit: WeeChat 1.4-dev)
2016-01-14 00:36:52	◀	coot_ (~marcin@bl5-234-92.dsl.telepac.pt) has quit (Quit: coot_)
2016-01-14 00:37:03	augur	tho, possibly having such a universally quantified instance in scope could cause problems for that, since you're basically requiring that there's not simply an instance, but a way of *generating* instances
2016-01-14 00:37:17	◀	griotspeak (~textual@c-73-237-161-156.hsd1.ga.comcast.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-14 00:37:24	▶	coot_ (~marcin@bl5-234-92.dsl.telepac.pt) has joined #haskell
2016-01-14 00:37:28	◀	silver (~silver@93.85.53.248) has quit (Read error: Connection reset by peer)
2016-01-14 00:37:32	ℹ	irc: disconnected from server
2016-01-14 20:00:09	▶	psyq (~Psyq@unaffiliated/psyq) has joined #haskell
2016-01-14 20:00:09	ℹ	Topic for #haskell is "http://www.haskell.org/ | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | http://reddit.com/r/haskell | Administrative issues: #haskell-ops | Hackage status? http://status.haskell.org | http://downloads.haskell.org"
2016-01-14 20:00:09	ℹ	Topic set by quicksilver on Wed, 07 Oct 2015 16:39:51
2016-01-14 20:00:09	ℹ	Channel #haskell: 1549 nicks (1 op, 0 voices, 1548 normals)
2016-01-14 20:00:10	ℹ	URL for #haskell: http://www.haskell.org/
2016-01-14 20:00:30	▶	prkc (~prkc@gateway/vpn/privateinternetaccess/prkc) has joined #haskell
2016-01-14 20:00:39	ℹ	Channel created on Sun, 26 Nov 2006 07:42:48
2016-01-14 20:01:10	◀	Ygg (~Ygg@ppp-seco21th2-46-193-173-113.wb.wifirst.net) has quit (Ping timeout: 260 seconds)
2016-01-14 20:01:21	▶	homovitruvius (~user@pool-108-17-70-127.pitbpa.fios.verizon.net) has joined #haskell
2016-01-14 20:01:59	◀	conal (~textual@104.255.240.10) has quit (Quit: Computer has gone to sleep.)
2016-01-14 20:02:15	dobq	cocreature: so probably it's not your STM :)
2016-01-14 20:03:13	◀	Vyn (~Vyn@122.179.30.49) has quit (Quit: ~)
2016-01-14 20:03:15	◀	baweaver (~baweaver@173.230.196.25) has quit (Remote host closed the connection)
2016-01-14 20:03:21	◀	mjs2600 (~mjs2600@rrcs-98-101-134-254.midsouth.biz.rr.com) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-14 20:04:40	◀	cargill (~ondra@host86-182-2-170.range86-182.btcentralplus.com) has quit (Ping timeout: 260 seconds)
2016-01-14 20:04:41	◀	shirt (~shirt@adsl-v01-3db14831dc15da1b.tau.ac.il) has quit (Read error: Connection reset by peer)
2016-01-14 20:04:43	▶	RevBayes (~revbayes@168.215.217.226) has joined #haskell
2016-01-14 20:04:47	◀	RevBayes (~revbayes@168.215.217.226) has quit (Remote host closed the connection)
2016-01-14 20:04:48	▶	jeltsch (~wolfgang@85.253.142.189.cable.starman.ee) has joined #haskell
2016-01-14 20:04:49	cocreature	dobq: wait why not? if I’m waiting in stm and exceptions are masked won’t they be blocked until it’s unmasked again?
2016-01-14 20:05:01	▶	RevBayes (~revbayes@168.215.217.226) has joined #haskell
2016-01-14 20:05:09	▶	dgpratt (~dpratt71@207.182.208.2) has joined #haskell
2016-01-14 20:05:10	dobq	cocreature: yeah so if they're blocked, they can't be eating them, right?
2016-01-14 20:05:12	▶	shirt (~shirt@adsl-v01-3db14831dc15da1b.tau.ac.il) has joined #haskell
2016-01-14 20:05:23	◀	python476 (~user@2a02-8420-6f5c-4200-021f-3bff-fe7d-f603.rev.sfr.net) has quit (Ping timeout: 255 seconds)
2016-01-14 20:05:39	▶	petersr (~PeterSR@0x5e91e330.adsl.cybercity.dk) has joined #haskell
2016-01-14 20:05:41	◀	RevBayes (~revbayes@168.215.217.226) has quit (Remote host closed the connection)
2016-01-14 20:05:53	cocreature	dobq: I suppose eating wasn’t the right word, my program just doesn’t exit, that’s what I meant by "something eats them"
2016-01-14 20:06:04	◀	petersr (~PeterSR@0x5e91e330.adsl.cybercity.dk) has quit (Max SendQ exceeded)
2016-01-14 20:06:08	◀	erkin (~erkin@unaffiliated/erkin) has quit (Read error: Connection reset by peer)
2016-01-14 20:06:11	▶	RevBayes (~revbayes@168.215.217.226) has joined #haskell
2016-01-14 20:06:14	dobq	cocreature: do you have any threads alive that can accept them?
2016-01-14 20:06:31	▶	erkin (~erkin@unaffiliated/erkin) has joined #haskell
2016-01-14 20:06:39	▶	petersr (~PeterSR@0x5e91e330.adsl.cybercity.dk) has joined #haskell
2016-01-14 20:06:43	cocreature	afaik UserInterrupt always goes to the main thread and that one is blocked on an stm in this case
2016-01-14 20:06:48	▶	jay6981 (~Adium@2601:646:8d01:7f7d:fcab:46b5:7170:d01d) has joined #haskell
2016-01-14 20:07:31	▶	ManiacTwister (~Twister@2a01:4f8:192:4ad::32c3) has joined #haskell
2016-01-14 20:08:00	◀	plucas (~plucas@8.18.218.175) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-14 20:08:23	▶	fizruk_ (~anonymous@128-68-140-96.broadband.corbina.ru) has joined #haskell
2016-01-14 20:08:23	dobq	cocreature: hm, but STM actions should usually be quick
2016-01-14 20:08:30	▶	plucas (~plucas@8.18.218.175) has joined #haskell
2016-01-14 20:08:44	cocreature	dobq: well a readTChan can block quite some time no?
2016-01-14 20:08:47	◀	dgpratt_ (~dpratt71@207.182.208.2) has quit (Ping timeout: 276 seconds)
2016-01-14 20:09:01	dobq	cocreature: yeah true :)
2016-01-14 20:09:13	dobq	cocreature: is it reasonable to move your STM stuff to a different thread then?
2016-01-14 20:09:29	cocreature	yeah that’s what I’m planning to do
2016-01-14 20:09:40	ReinH	cocreature: this is one reason it's good to make your stm actions as short as possible :)
2016-01-14 20:09:58	cocreature	ReinH: yeah I suppose we really shouldn’t be using TChans in this case
2016-01-14 20:10:25	▶	dmwit_ (~dmwit@75-164-135-192.ptld.qwest.net) has joined #haskell
2016-01-14 20:11:18	◀	lyuha (uid43824@gateway/web/irccloud.com/x-bfmqrxkbxkhmumqb) has quit (Quit: Connection closed for inactivity)
2016-01-14 20:11:25	◀	|node (uid125132@gateway/web/irccloud.com/x-jonreqqhritlyawc) has quit (Quit: Connection closed for inactivity)
2016-01-14 20:12:54	ℹ	n0p3 is now known as Xack
2016-01-14 20:13:21	◀	petersr (~PeterSR@0x5e91e330.adsl.cybercity.dk) has quit (Quit: Leaving)
2016-01-14 20:13:22	Cale	readTChan doesn't block though iirc
2016-01-14 20:13:27	▶	uncle-j_j (~unclechu@95.153.133.247) has joined #haskell
2016-01-14 20:13:29	▶	baweaver (~baweaver@173.230.196.25) has joined #haskell
2016-01-14 20:13:34	◀	dmwit (~dmwit@75-164-132-187.ptld.qwest.net) has quit (Ping timeout: 256 seconds)
2016-01-14 20:13:41	◀	kadoban (~mud@unaffiliated/kadoban) has quit (Ping timeout: 265 seconds)
2016-01-14 20:13:43	▶	Quashie_ (~boingredd@ool-18bccfe5.dyn.optonline.net) has joined #haskell
2016-01-14 20:13:58	▶	shirt_ (~shirt@adsl-v01-3db14831dc15da1b.tau.ac.il) has joined #haskell
2016-01-14 20:14:00	Cale	yeah, no, it just retries if the TChan is empty
2016-01-14 20:14:15	◀	shirt (~shirt@adsl-v01-3db14831dc15da1b.tau.ac.il) has quit (Read error: Connection reset by peer)
2016-01-14 20:14:48	◀	pbgc (~pbgc@202.92.166.178.rev.vodafone.pt) has quit (Quit: Computer has gone to sleep.)
2016-01-14 20:14:48	▶	mjs2600 (~mjs2600@rrcs-98-101-134-254.midsouth.biz.rr.com) has joined #haskell
2016-01-14 20:14:56	▶	libracious_ (uid95058@gateway/web/irccloud.com/x-hxmfypeftdzmcnup) has joined #haskell
2016-01-14 20:15:05	Cale	The entire transaction is then run again from the beginning if the TChan gets written to by another thread.
2016-01-14 20:15:09	▶	pbgc (~pbgc@202.92.166.178.rev.vodafone.pt) has joined #haskell
2016-01-14 20:15:11	▶	sbinq (5d55b532@gateway/web/freenode/ip.93.85.181.50) has joined #haskell
2016-01-14 20:15:27	◀	learns (~learns@ec2-54-167-59-193.compute-1.amazonaws.com) has quit (Quit: Bye!)
2016-01-14 20:15:33	Cale	(or if anything else that was read on the way to the retry is written to)
2016-01-14 20:15:35	◀	pbgc (~pbgc@202.92.166.178.rev.vodafone.pt) has quit (Client Quit)
2016-01-14 20:16:12	◀	Quashie (~boingredd@ool-18bccfe5.dyn.optonline.net) has quit (Ping timeout: 250 seconds)
2016-01-14 20:17:07	◀	wanderleyguima (~wanderley@189.100.254.233) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-14 20:17:28	▶	hannelita (~hannelita@191.22.203.41) has joined #haskell
2016-01-14 20:17:50	▶	cargill (~ondra@host86-182-2-170.range86-182.btcentralplus.com) has joined #haskell
2016-01-14 20:17:55	◀	timmy_tofu (~tofu@static-72-69-161-2.nycmny.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2016-01-14 20:18:02	▶	danthemyth (~danthemyt@50.246.66.201) has joined #haskell
2016-01-14 20:18:14	▶	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-14 20:18:48	▶	SaidinWoT (~sfrazier@192.99.65.49) has joined #haskell
2016-01-14 20:20:06	◀	dobq (~tulcod@unaffiliated/tulcod) has quit (Ping timeout: 240 seconds)
2016-01-14 20:20:06	▶	thimoteus (~thimoteus@c-71-198-115-131.hsd1.ca.comcast.net) has joined #haskell
2016-01-14 20:20:17	cocreature	it seems to be something else
2016-01-14 20:20:38	◀	joel-dice (~dicej@184-96-51-14.hlrn.qwest.net) has quit (Quit: Leaving.)
2016-01-14 20:20:56	◀	pothepanda (~thgs@static062038021111.access.hol.gr) has quit (Read error: Connection reset by peer)
2016-01-14 20:21:37	▶	python476 (~user@2a02-8420-6f5c-4200-021f-3bff-fe7d-f603.rev.sfr.net) has joined #haskell
2016-01-14 20:23:04	▶	julmac (~kamak@s247.ip5.netikka.fi) has joined #haskell
2016-01-14 20:23:08	◀	vmeson (~rmacleod@128.224.252.2) has quit (Ping timeout: 250 seconds)
2016-01-14 20:23:44	▶	Zekka (~zekka@uawifi-nat-210-69.arizona.edu) has joined #haskell
2016-01-14 20:24:06	▶	bvad (~bvad@50a1b03c.flatrate.dk) has joined #haskell
2016-01-14 20:24:26	◀	homovitruvius (~user@pool-108-17-70-127.pitbpa.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2016-01-14 20:24:41	⚡	hackagebot luminance 0.9.1.1 - Type-safe, type-level and stateless graphics framework  https://hackage.haskell.org/package/luminance-0.9.1.1 (DimitriSabadie)
2016-01-14 20:24:48	◀	julmae (~kamak@s247.ip5.netikka.fi) has quit (Ping timeout: 265 seconds)
2016-01-14 20:25:01	◀	apriori (~apriori@2a02:908:2111:5880:beae:c5ff:fe75:3056) has quit (Remote host closed the connection)
2016-01-14 20:25:05	◀	srajendra (~srajendra@2403:0:506:102::5b) has quit (Ping timeout: 260 seconds)
2016-01-14 20:25:11	◀	jgt (~jgt@46.175.231.179.maxnet.net.pl) has quit (Ping timeout: 255 seconds)
2016-01-14 20:25:38	◀	shubhaml (~shubham@27.4.115.126) has quit (Ping timeout: 260 seconds)
2016-01-14 20:26:59	cocreature	ah it might be the ghc api installing it’s own singal handlers
2016-01-14 20:27:03	◀	baweaver (~baweaver@173.230.196.25) has quit (Remote host closed the connection)
2016-01-14 20:28:15	◀	bvad (~bvad@50a1b03c.flatrate.dk) has quit (Ping timeout: 240 seconds)
2016-01-14 20:28:15	cocreature	yep https://ghc.haskell.org/trac/ghc/ticket/4162
2016-01-14 20:28:34	◀	howdoi (uid224@gateway/web/irccloud.com/x-xpspxwhzvooxqhtg) has quit (Quit: Connection closed for inactivity)
2016-01-14 20:29:07	◀	jutaro__ (~jutaro@p4FC97427.dip0.t-ipconnect.de) has quit (Read error: Connection reset by peer)
2016-01-14 20:29:25	▶	jutaro__ (~jutaro@p200300455C4A72B59EEBE8FFFE341FBD.dip0.t-ipconnect.de) has joined #haskell
2016-01-14 20:29:45	◀	Zekka (~zekka@uawifi-nat-210-69.arizona.edu) has quit (Ping timeout: 260 seconds)
2016-01-14 20:29:59	lf94	When is Haskell getting better performance
2016-01-14 20:30:50	▶	BlueRavenGT (~BlueRaven@8-22-13-219.utopiafiber.net) has joined #haskell
2016-01-14 20:31:01	▶	Zekka (~zekka@uawifi-nat-210-69.arizona.edu) has joined #haskell
2016-01-14 20:31:10	capisce	all the time
2016-01-14 20:31:53	▶	julmae (~kamak@s247.ip5.netikka.fi) has joined #haskell
2016-01-14 20:32:02	▶	neoncontrails (~neoncontr@76-196-233-65.lightspeed.sndgca.sbcglobal.net) has joined #haskell
2016-01-14 20:32:22	▶	demilux (~demilux@70.99.232.36) has joined #haskell
2016-01-14 20:32:45	◀	nilg (~user@77.70.2.229) has quit (Remote host closed the connection)
2016-01-14 20:32:48	◀	cdg (~cdg@157.166.175.129) has quit (Remote host closed the connection)
2016-01-14 20:32:49	▶	wanderleyguima (~wanderley@189.100.254.233) has joined #haskell
2016-01-14 20:32:56	◀	acro (~acro@188.166.47.182) has quit (Quit: GoodBye.)
2016-01-14 20:33:03	◀	fizbin1 (~Adium@hqp-p.bcls.lib.nj.us) has quit (Quit: Leaving.)
2016-01-14 20:33:07	▶	kurt11 (~Adium@207.191.34.198) has joined #haskell
2016-01-14 20:33:20	▶	cdg (~cdg@157.166.175.130) has joined #haskell
2016-01-14 20:33:33	▶	baweaver (~baweaver@2601:644:8280:b3c:d8b3:3901:6a0c:c43) has joined #haskell
2016-01-14 20:33:40	▶	srajendra (~srajendra@2403:0:506:102::5b) has joined #haskell
2016-01-14 20:33:44	Cale	lf94: Did you mean to ask something like "when are GHC-compiled Haskell programs getting better performance"? Or perhaps "when is GHC itself getting better performance"?
2016-01-14 20:33:59	lf94	Former
2016-01-14 20:34:06	lf94	But why not both? :)
2016-01-14 20:34:14	▶	Itkovian_ (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-14 20:34:18	▶	dadar (~androidde@78.173.237.110) has joined #haskell
2016-01-14 20:34:22	Amnez777	hello all, i am haskell enthusiast, any bulletproof debug free apps written in haskell?
2016-01-14 20:34:30	Cale	Well, certainly as the former happens, the latter happens as well because GHC is written in GHC Haskell.
2016-01-14 20:34:32	◀	julmac (~kamak@s247.ip5.netikka.fi) has quit (Ping timeout: 256 seconds)
2016-01-14 20:34:43	⚡	hackagebot git-annex 6.20160114 - manage files with git, without checking their contents into git  https://hackage.haskell.org/package/git-annex-6.20160114 (JoeyHess)
2016-01-14 20:34:45	⚡	hackagebot hashable 1.2.4.0 - A class for types that can be converted to a hash value  https://hackage.haskell.org/package/hashable-1.2.4.0 (JohanTibell)
2016-01-14 20:34:58	▶	acro (~acro@188.166.47.182) has joined #haskell
2016-01-14 20:35:17	Cale	lf94: But yeah, almost every release of GHC makes some improvements to simplification and code generation.
2016-01-14 20:35:24	lf94	Cale: I was just reading a OCaml vs Haskell Quora thread last night and everyone was complaining about performance
2016-01-14 20:35:44	lf94	(I myself have been using Haskell for about a year and a half)
2016-01-14 20:35:45	Jello_Raptor	are haskell datatypes that correspond to "positive integers + 0" and "positive reals/Floats + 0" 
2016-01-14 20:35:47	Jello_Raptor	? 
2016-01-14 20:36:11	▶	conal (~textual@104.255.240.10) has joined #haskell
2016-01-14 20:36:41	▶	wolfcub (~henrique_@177.55.195.209) has joined #haskell
2016-01-14 20:36:52	◀	m1dnight_ (~m1dnight@205.226-200-80.adsl-dyn.isp.belgacom.be) has quit (Quit: WeeChat 1.4-dev)
2016-01-14 20:37:06	◀	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has quit (Ping timeout: 240 seconds)
2016-01-14 20:37:10	▶	m1dnight_ (~m1dnight@205.226-200-80.adsl-dyn.isp.belgacom.be) has joined #haskell
2016-01-14 20:37:22	◀	dadaro (~androidde@78.173.237.110) has quit (Ping timeout: 265 seconds)
2016-01-14 20:37:27	◀	m1dnight_ (~m1dnight@205.226-200-80.adsl-dyn.isp.belgacom.be) has quit (Client Quit)
2016-01-14 20:37:31	sm	Amnez777: how do you mean ? many haskell apps are pretty solid
2016-01-14 20:37:46	Cale	Jello_Raptor: There are various libraries which provide natural number types, but I don't know about the latter.
2016-01-14 20:37:47	Amnez777	sm, examples of those apps please
2016-01-14 20:37:47	Jello_Raptor	it would be nice if I could just use the literals without extra cruft to boot. Such that "1.03 :: PositiveFloat" would typecheck and "-3.4 :: PositiveFloat" would not, but I can't see a nice way to do that without a language extension at some sort. 
2016-01-14 20:37:52	▶	tey (~tey___@90.163.35.82) has joined #haskell
2016-01-14 20:38:02	▶	m1dnight_ (~m1dnight@205.226-200-80.adsl-dyn.isp.belgacom.be) has joined #haskell
2016-01-14 20:38:03	▶	chrisram_ (~chrisrams@192.171.117.210) has joined #haskell
2016-01-14 20:38:09	◀	m1dnight_ (~m1dnight@205.226-200-80.adsl-dyn.isp.belgacom.be) has quit (Client Quit)
2016-01-14 20:38:17	◀	chrisram_ (~chrisrams@192.171.117.210) has quit (Remote host closed the connection)
2016-01-14 20:38:20	◀	wolfcub (~henrique_@177.55.195.209) has quit (Client Quit)
2016-01-14 20:38:28	sm	ghc, darcs, pandoc, hledger, git-annex..
2016-01-14 20:38:30	◀	baweaver (~baweaver@2601:644:8280:b3c:d8b3:3901:6a0c:c43) has quit (Ping timeout: 260 seconds)
2016-01-14 20:38:41	◀	cdg (~cdg@157.166.175.130) has quit (Ping timeout: 276 seconds)
2016-01-14 20:38:41	Amnez777	sm, i dont know what are those, never used them 
2016-01-14 20:38:42	▶	wolfcub (~henrique_@177.55.195.209) has joined #haskell
2016-01-14 20:38:55	Cale	Jello_Raptor: Well, negation is defined by Num, so if you want a Num instance, you need to define it somehow.
2016-01-14 20:38:57	▶	m1dnight_ (~m1dnight@205.226-200-80.adsl-dyn.isp.belgacom.be) has joined #haskell
2016-01-14 20:39:03	Cale	:t negate
2016-01-14 20:39:05	lambdabot	Num a => a -> a
2016-01-14 20:39:24	Cale	This function is applied whenever you use unary negation like that.
2016-01-14 20:39:28	Cale	:t fromRational
2016-01-14 20:39:29	lambdabot	Fractional a => Rational -> a
2016-01-14 20:39:33	▶	rschnck (~rschnckfr@cce02cs4035-fa12-z.ams.hpecore.net) has joined #haskell
2016-01-14 20:39:36	◀	chrisramsey (~chrisrams@192.171.117.210) has quit (Ping timeout: 272 seconds)
2016-01-14 20:39:44	◀	Black-Wolf (~Black-Wol@114.139.61.94.rev.vodafone.pt) has quit (Quit: \m/)
2016-01-14 20:39:53	Cale	is what gets used to translate from the expression 3.4 to whatever type of numbers you have
2016-01-14 20:40:09	◀	jophish (~jophish@dab-ntm1-h-65-9.dab.02.net) has quit (Remote host closed the connection)
2016-01-14 20:40:22	Hijiri	Amnez777: not even ghc?
2016-01-14 20:40:23	Cale	(i.e. it will apply fromRational to the Rational number 34/10)
2016-01-14 20:40:28	Amnez777	nope
2016-01-14 20:40:49	sm	Amnez777: you can find more by searching for "program" at http://hackage.haskell.org/packages
2016-01-14 20:40:53	Hijiri	so haskell enthusiast doesn't necessarily mean you've run haskell code?
2016-01-14 20:41:03	Hijiri	or maybe you used a different compiler
2016-01-14 20:41:17	▶	suppi (~suppi@unaffiliated/suppi) has joined #haskell
2016-01-14 20:41:22	dmj	Amnez777: xmonad I hear is pretty solid
2016-01-14 20:41:23	Amnez777	Hijiri, i am inspired by one of my friends from irc, he keep sending me math stuff, so i decided to get familiar with haskell 
2016-01-14 20:41:28	lf94	Are there any small Haskell compilers someone could study?
2016-01-14 20:41:47	dmj	Amnez777: it's moreso the libraries that are rock solid
2016-01-14 20:42:01	◀	m1dnight_ (~m1dnight@205.226-200-80.adsl-dyn.isp.belgacom.be) has quit (Client Quit)
2016-01-14 20:42:10	Amnez777	dmj, what do you code on haskell mostly? what kind of applications/servers?
2016-01-14 20:42:14	wlad	Does anybody know a reason why Functors are not Monads?
2016-01-14 20:42:16	▶	Black-Wolf (~Black-Wol@114.139.61.94.rev.vodafone.pt) has joined #haskell
2016-01-14 20:42:29	Ankhers	wlad: They can be.
2016-01-14 20:42:41	Ankhers	wlad: but not always.
2016-01-14 20:42:45	▶	slomo (~slomo@unaffiliated/slomo) has joined #haskell
2016-01-14 20:42:46	Cale	wlad: Every monad is a functor
2016-01-14 20:42:54	dmj	Amnez777: web servers right now and background workers for one-off things, my code base is ~10k lines. It's pretty solid
2016-01-14 20:43:37	rschnck	I feel super stupid, but I can't wrap my head around how to do this functionally: http://codepad.org/FCl3SlW2. I put pseudocode of what I'm trying to accompilsh along with the start of my coding attempt
2016-01-14 20:43:38	▶	aerialB (~Aerial_Bo@host81-158-56-115.range81-158.btcentralplus.com) has joined #haskell
2016-01-14 20:43:39	◀	Wizek (~Wizek@catv-89-132-132-110.catv.broadband.hu) has quit (Read error: Connection reset by peer)
2016-01-14 20:43:48	Amnez777	webservers? hmmmm first time i hear someome writing webservers
2016-01-14 20:44:02	▶	gabbiel (~gabbiel@97-100-73-213.res.bhn.net) has joined #haskell
2016-01-14 20:44:04	▶	m1dnight_ (~m1dnight@205.226-200-80.adsl-dyn.isp.belgacom.be) has joined #haskell
2016-01-14 20:44:42	dmj	Amnez777: well, sorry, I don't write the web server. The application I write uses a haskell web server (warp)
2016-01-14 20:44:44	wlad	Cale: I just feel that >>= and fmap are very similar and that liftM and fmap are essentially the same thing. I read somewhere that sometimes it *can* be that monad is not a functor
2016-01-14 20:44:48	⚡	hackagebot unordered-containers 0.2.6.0 - Efficient hashing-based container types  https://hackage.haskell.org/package/unordered-containers-0.2.6.0 (JohanTibell)
2016-01-14 20:44:52	capisce	webservers don't write themselves
2016-01-14 20:44:53	◀	m1dnight_ (~m1dnight@205.226-200-80.adsl-dyn.isp.belgacom.be) has quit (Client Quit)
2016-01-14 20:44:54	Cale	Amnez777: Yeah, there are a few big and well-supported Haskell web frameworks. Where I work, we use Snap to write our backends, and reflex-dom along with ghcjs to write our frontends.
2016-01-14 20:44:55	wlad	I mean in terms of typeclasses
2016-01-14 20:45:19	Cale	wlad: (>>=) can do things which fmap can't
2016-01-14 20:45:21	▶	ushfnuk (~vetal@185.19.20.106) has joined #haskell
2016-01-14 20:45:46	◀	darkf (~darkf___@unaffiliated/darkf) has quit (Quit: Leaving)
2016-01-14 20:45:47	Amnez777	wow so many new terms for me lol
2016-01-14 20:45:48	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-14 20:45:50	wlad	:t (>>=)
2016-01-14 20:45:52	lambdabot	Monad m => m a -> (a -> m b) -> m b
2016-01-14 20:45:54	Cale	wlad: If you have some structure of type f (f a), there's no way to get from that to a structure of type f a using fmap alone -- it doesn't change the number of occurrences of f
2016-01-14 20:45:56	▶	m1dnight_ (~m1dnight@205.226-200-80.adsl-dyn.isp.belgacom.be) has joined #haskell
2016-01-14 20:45:57	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-14 20:46:18	Ankhers	wlad: That cannot happen anymore. Functor is a superclass of Applicative, which is a superclass of Monad. Which means every Monad has to have an Applicative and Functor instance now.
2016-01-14 20:46:19	Cale	wlad: however if x :: m (m a), then x >>= id :: m a
2016-01-14 20:46:42	▶	aartamonau (~shaleny@206.169.106.2) has joined #haskell
2016-01-14 20:46:59	◀	wanderleyguima (~wanderley@189.100.254.233) has quit (Ping timeout: 264 seconds)
2016-01-14 20:47:13	wlad	Cale: I think I understood that
2016-01-14 20:47:14	◀	animated (~mike@207.35.29.137) has quit (Ping timeout: 255 seconds)
2016-01-14 20:47:16	Cale	wlad: this also goes by the name of join
2016-01-14 20:47:18	Cale	:t join
2016-01-14 20:47:20	lambdabot	Monad m => m (m a) -> m a
2016-01-14 20:47:21	wlad	Ankhers: got it
2016-01-14 20:47:21	▶	insitu (~textual@105.196.201.77.rev.sfr.net) has joined #haskell
2016-01-14 20:47:47	◀	insitu (~textual@105.196.201.77.rev.sfr.net) has quit (Client Quit)
2016-01-14 20:48:12	◀	m1dnight_ (~m1dnight@205.226-200-80.adsl-dyn.isp.belgacom.be) has quit (Client Quit)
2016-01-14 20:48:19	Cale	wlad: Similarly, if you have a functor f, there might not be a function of type a -> f a, as fmap certainly won't help you pull something of type f a from thin air
2016-01-14 20:48:43	▶	m1dnight_ (~m1dnight@205.226-200-80.adsl-dyn.isp.belgacom.be) has joined #haskell
2016-01-14 20:49:32	Cale	wlad: If you have fmap, join and return, and those satisfy some corresponding laws, it turns out to be the same thing as defining (>>=) and return (and having those satisfy the appropriate laws)
2016-01-14 20:49:39	◀	Itkovian_ (~Itkovian@178-117-76-63.access.telenet.be) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-14 20:50:06	▶	wanderleyguima (~wanderley@199.201.64.3) has joined #haskell
2016-01-14 20:50:26	wlad	:t return
2016-01-14 20:50:28	lambdabot	Monad m => a -> m a
2016-01-14 20:50:39	◀	petermw (~pw410@global-185-15.nat-2.net.cam.ac.uk) has quit (Remote host closed the connection)
2016-01-14 20:50:44	Ankhers	> return 1 :: Maybe Int
2016-01-14 20:50:46	lambdabot	 Just 1
2016-01-14 20:50:53	▶	Wizek (~Wizek@catv-89-132-132-110.catv.broadband.hu) has joined #haskell
2016-01-14 20:51:11	◀	t0by (~t0by@host140-244-dynamic.244-95-r.retail.telecomitalia.it) has quit (Read error: Connection reset by peer)
2016-01-14 20:51:22	◀	Denommus (~user@unaffiliated/denommus) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2016-01-14 20:51:32	gabbiel	is yesod installation also not working for you guys?
2016-01-14 20:51:37	shachaf	i,i or defining retract :: Monad m => Free m a -> m a
2016-01-14 20:51:51	▶	mizu_no_oto (~textual@c-67-189-145-156.hsd1.ma.comcast.net) has joined #haskell
2016-01-14 20:51:58	Ankhers	gabbiel: What are you doing to install what error(s) are you getting?
2016-01-14 20:52:06	◀	doomlord (~textual@host86-149-133-173.range86-149.btcentralplus.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-14 20:52:09	Cale	gabbiel: I suspect it's working for many people. How are you trying to install it? The by far most recommended way is to use stack
2016-01-14 20:52:19	gabbiel	I used stack
2016-01-14 20:52:35	▶	dmag_ (~damian@81.141.157.0) has joined #haskell
2016-01-14 20:52:41	Ankhers	gabbiel: What is the exact command you used, and what error(s) did you get?
2016-01-14 20:53:01	▶	fizbin (~Adium@39.sub-70-215-74.myvzw.com) has joined #haskell
2016-01-14 20:53:07	gabbiel	at first, it was giving me ghc version error so I used the flag for not checking it, but then during the 70 package, it just failed
2016-01-14 20:53:21	gabbiel	give me a sec
2016-01-14 20:53:38	▶	oisdk_ (~oisdk_@95.45.70.25) has joined #haskell
2016-01-14 20:53:47	gabbiel	exactly "stack install yesod-bin cabal-install  --skip-ghc-check"
2016-01-14 20:54:14	▶	insitu (~textual@105.196.201.77.rev.sfr.net) has joined #haskell
2016-01-14 20:54:16	◀	aleator (~aleator@85-76-98-55-nat.elisa-mobile.fi) has quit (Ping timeout: 276 seconds)
2016-01-14 20:54:28	Cale	Why did you have to skip ghc check? What did it tell you before that?
2016-01-14 20:55:04	▶	MorTal1ty (sid137136@gateway/web/irccloud.com/x-jdkgkyltiuifwldw) has joined #haskell
2016-01-14 20:55:18	ushfnuk	Could anyone tell me which meaning of a word "warp" is used in a "package warp"? (I'm not native English speaker).
2016-01-14 20:55:48	gabbiel	just ran the command without --skip-ghc-check and it gave me this 
2016-01-14 20:55:49	gabbiel	Compiler version mismatched, found ghc-7.8.4 (x86_64), but expected minor version match with ghc-7.10.3 (x86_64) (based on resolver setting in /home/gabbiel/.stack/global-project/stack.yaml).
2016-01-14 20:55:53	sm	ushfnuk: it's the name of the package - http://hackage.haskell.org/package/warp
2016-01-14 20:55:53	gabbiel	Try running "stack setup" to install the correct GHC into /home/gabbiel/.stack/programs/x86_64-linux/
2016-01-14 20:55:54	Cale	ushfnuk: There is a package named "warp". Maybe that's what's being referred to?
2016-01-14 20:56:12	Cale	ushfnuk: that is, http://hackage.haskell.org/package/warp
2016-01-14 20:56:30	◀	julmae (~kamak@s247.ip5.netikka.fi) has quit (Ping timeout: 250 seconds)
2016-01-14 20:56:39	◀	Elish (~x@unaffiliated/elish) has quit (Quit: Elish)
2016-01-14 20:56:42	sm	gabbiel: do stack setup
2016-01-14 20:56:48	ushfnuk	I mean what does this name mean :)?
2016-01-14 20:56:48	gabbiel	doing it right now
2016-01-14 20:56:52	▶	julmae (~kamak@s247.ip5.netikka.fi) has joined #haskell
2016-01-14 20:57:23	▶	redxaxder (~redxaxder@c-73-232-94-188.hsd1.tx.comcast.net) has joined #haskell
2016-01-14 20:57:37	sm	ushfnuk: oh.. it means "bend", in science fiction it's used for "bending spacetime" to travel fast, so it also means "fast" :)
2016-01-14 20:58:24	gabbiel	now this
2016-01-14 20:58:30	gabbiel	ghc.mk:918: recipe for target 'install_packages' failed
2016-01-14 20:58:30	gabbiel	Makefile:24: recipe for target 'install' failed
2016-01-14 20:58:30	gabbiel	/home/gabbiel/.stack/programs/x86_64-linux/ghc-7.10.3/lib/ghc-7.10.3/bin/ghc-pkg: error while loading shared libraries: libtinfo.so.5: cannot open shared object file: No such file or directory
2016-01-14 20:58:34	gabbiel	gmake[1]: *** [install_packages] Error 127
2016-01-14 20:58:37	gabbiel	gmake: *** [install] Error 2
2016-01-14 20:58:49	▶	lingxiao (~lingxiao@158.130.111.100) has joined #haskell
2016-01-14 20:58:59	Cale	gabbiel: What linux distribution?
2016-01-14 20:59:02	gabbiel	gentoo
2016-01-14 20:59:44	gabbiel	ill actually try on my arch one, and see how it goes
2016-01-14 20:59:51	Ankhers	I think libtinfo is from ncurses.
2016-01-14 20:59:55	sm	gabbiel: interesting, it sounds like you need some terminfo lib first and should maybe report it on #haskell-stack
2016-01-14 21:00:00	raichoo	usr/local/lib/libtinfo.so.5 -> /usr/lib/libncursesw.so.6*
2016-01-14 21:00:09	raichoo	That should work
2016-01-14 21:00:19	◀	usershell (~usershell@41.136.93.208) has quit (Remote host closed the connection)
2016-01-14 21:00:33	raichoo	also set LD_LIBRARY_PATH to /usr/local
2016-01-14 21:00:43	raichoo	/usr/local/lib 
2016-01-14 21:00:45	raichoo	sorry ^^
2016-01-14 21:00:52	▶	timmy_tofu (~tofu@static-72-69-161-2.nycmny.fios.verizon.net) has joined #haskell
2016-01-14 21:01:02	▶	SCHAAP137 (SCHAPiE@unaffiliated/schaap137) has joined #haskell
2016-01-14 21:01:20	gabbiel	there's nothing in my local lib
2016-01-14 21:01:39	▶	vmeson (~rmacleod@24-212-184-107.cable.teksavvy.com) has joined #haskell
2016-01-14 21:01:57	◀	erikd (~erikd@hendrix.mega-nerd.net) has quit (Quit: disappearing into the sunset)
2016-01-14 21:02:18	Cale	gabbiel: If you do   ls -l /usr/lib | grep libtinfo   what does it say?
2016-01-14 21:02:26	raichoo	create a link e.g. /usr/local/lib/libtinfo.so.5 to /usr/lib/libncursesw.so.6
2016-01-14 21:02:52	◀	T0BI (~ObitO@41.101.173.133) has quit (Ping timeout: 256 seconds)
2016-01-14 21:02:55	Cale	Yeah, it might say nothing, if the library is named something else for some reason
2016-01-14 21:03:12	gabbiel	cale: nothing
2016-01-14 21:03:20	ushfnuk	sm: Thanks a lot! There' re so many meanings of that word. I pazzled my brains to find the right answer. :)
2016-01-14 21:03:23	raichoo	If libtinfo is not there it's backed into libncursesw
2016-01-14 21:03:42	raichoo	That's what the link is for
2016-01-14 21:04:05	▶	firstdayonthejob (~firstdayo@cpc91184-cmbg18-2-0-cust232.5-4.cable.virginm.net) has joined #haskell
2016-01-14 21:04:09	raichoo	also if you do sth like export LD_LIBRARY_PATH=/usr/local/lib ld.so will search for libtinfo in /usr/local/lib
2016-01-14 21:04:58	raichoo	well, additionally search. To be precise.
2016-01-14 21:05:18	sm	the internet says: "..the cleaner solution is probably to enable ncurses' "tinfo" USE flag, either globally or with "echo sys-libs/ncurses tinfo >> /etc/portage/package.use".."
2016-01-14 21:05:33	gabbiel	only libcurses I see is in url/local and its not libcursesw.so
2016-01-14 21:05:43	◀	richardiii (~richardii@ip98-165-17-109.ph.ph.cox.net) has quit (Remote host closed the connection)
2016-01-14 21:05:45	raichoo	I assume gabbiel is using ghc binaries from stack?
2016-01-14 21:05:54	shapr	Is there a Haskell library/binary that will me edit a wireshark packet capture (pcap) and fix up all the CRCs after editing?
2016-01-14 21:06:06	lingxiao	hey all
2016-01-14 21:06:12	lingxiao	has anyone used coq with sublime?
2016-01-14 21:06:12	▶	Ziltrum (~Destol@public-249-238.nat.utoronto.ca) has joined #haskell
2016-01-14 21:06:15	ReinH	gabbiel: do you have sys-libs/ncurses with the tinfo USE flag?
2016-01-14 21:06:21	◀	ixti (~ixti@36.9.165.83.dynamic.reverse-mundo-r.com) has quit (Quit: WeeChat 1.3)
2016-01-14 21:06:33	lingxiao	i see this:
2016-01-14 21:06:34	lingxiao	https://github.com/mkolosick/Sublime-Coq
2016-01-14 21:06:43	gabbiel	let me check
2016-01-14 21:06:45	lingxiao	i'm wondering if anyone has any experience with it
2016-01-14 21:06:51	◀	wanderleyguima (~wanderley@199.201.64.3) has quit (Ping timeout: 265 seconds)
2016-01-14 21:06:53	◀	insitu (~textual@105.196.201.77.rev.sfr.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-01-14 21:06:59	Cale	lingxiao: I wouldn't bother trying.
2016-01-14 21:07:07	lingxiao	Cale so you think it won't work?
2016-01-14 21:07:10	raichoo	Ah, ok. I'm using Arch didn't know that gentoo had a useflag for that. That's handy.
2016-01-14 21:07:24	lingxiao	i'm not too good with emacs i'm afraid :(
2016-01-14 21:07:30	gabbiel	i didn't set any use flags for it, let me check the defaults
2016-01-14 21:07:34	Cale	lingxiao: I mean, it might work to some extent, but you *really* want the interactive stuff that coqide/proofgeneral provide
2016-01-14 21:07:44	lingxiao	oh boy haha
2016-01-14 21:07:45	Cale	lingxiao: Use coqide :)
2016-01-14 21:07:50	lingxiao	tried installing coqide and it was a mess
2016-01-14 21:07:56	Cale	oh, hmm
2016-01-14 21:08:07	▶	doomlord (~textual@host86-149-133-173.range86-149.btcentralplus.com) has joined #haskell
2016-01-14 21:08:08	rschnck	I want to use sortBy, but instead of (a -> a -> Ordering) -> [a] -> [a] I need (a -> a -> a -> Ordering) -> [a] -> [a], since the way I sort the list is by comparing each element to a "base" element and sorting on that.
2016-01-14 21:08:08	lingxiao	on mac os X 
2016-01-14 21:08:21	rschnck	Is there any other function I should consider? Or should I write my own sorting function?
2016-01-14 21:08:33	lingxiao	i folowed this: https://coq.inria.fr/cocorico/Installation%20of%20Coq%20on%20Mac
2016-01-14 21:08:40	lingxiao	Cale you have coqide i take it?
2016-01-14 21:08:46	Cale	yeah
2016-01-14 21:09:00	Cale	lingxiao: It's pretty much impossible to read coq proofs without having an interactive display of the context and goal
2016-01-14 21:09:16	Cale	(and watching how these change as you step through)
2016-01-14 21:09:26	Cale	and it's even harder to imagine trying to write them
2016-01-14 21:09:30	◀	SuperTux88 (benjamin@i.have.ipv6.on.coding4.coffee) has quit (Quit: WeeChat / ZNC)
2016-01-14 21:09:30	◀	raid (macbookpro@irc.coding4coffee.org) has quit (Quit: I was eaten by zombies)
2016-01-14 21:09:30	◀	codehero (codehero@i.have.ipv6.on.coding4coffee.org) has quit (Quit: ZNC / WeeChat)
2016-01-14 21:09:45	lingxiao	Cale uh ok i'll try againg with coqide then
2016-01-14 21:09:52	lingxiao	do you havea  mac X?
2016-01-14 21:09:56	Cale	no
2016-01-14 21:10:12	geekosaur	rschnck, where does this "base" element come from?
2016-01-14 21:10:23	▶	ghorn (~ghorn@66.201.63.226) has joined #haskell
2016-01-14 21:10:29	▶	PizzaPortal (~PizzaPort@ip503c32de.speed.planet.nl) has joined #haskell
2016-01-14 21:10:30	Cale	https://coq.inria.fr/distrib/V8.4pl5/files/coqide-8.4pl5.dmg -- did you try this package?
2016-01-14 21:10:42	Cale	It's apparently for 10.9
2016-01-14 21:11:09	▶	rkazak (~rkazak@c-24-6-104-170.hsd1.ca.comcast.net) has joined #haskell
2016-01-14 21:11:22	▶	ixti (~ixti@36.9.165.83.dynamic.reverse-mundo-r.com) has joined #haskell
2016-01-14 21:11:36	Cale	(but also, this discussion is probably better off in #coq -- there are likely people there who know more about this than me)
2016-01-14 21:11:41	▶	codehero (codehero@i.have.ipv6.on.coding4coffee.org) has joined #haskell
2016-01-14 21:11:49	▶	kaictl_work (~kaictl@unaffiliated/kaisforza) has joined #haskell
2016-01-14 21:11:57	lingxiao	ahh thanks for that channel
2016-01-14 21:12:08	◀	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has quit (Quit: brb reboot and a prayer)
2016-01-14 21:12:08	rschnck	geekosaur: I'm trying to sort a list of points based on the angle they make with the first point in the list.
2016-01-14 21:12:13	lingxiao	didnt know there was one
2016-01-14 21:12:30	▶	chrisbarrett (~chrisb@121.98.103.14) has joined #haskell
2016-01-14 21:12:55	◀	kungp (~kp@2a04:1980:3100:1aab:e61d:2dff:fe29:fc20) has quit (Ping timeout: 260 seconds)
2016-01-14 21:12:56	▶	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has joined #haskell
2016-01-14 21:13:28	rschnck	geekosaur: So I imagined my sorting function as first computing the angle that a given point makes with the first point, and then comparing that to another such computation.
2016-01-14 21:13:30	rschnck	If that makes sense.
2016-01-14 21:13:35	◀	lingxiao (~lingxiao@158.130.111.100) has quit (Remote host closed the connection)
2016-01-14 21:13:39	◀	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has quit (Read error: Connection reset by peer)
2016-01-14 21:14:00	◀	deam (uid99417@gateway/web/irccloud.com/x-hdndhzfbvqjdajye) has quit (Quit: Connection closed for inactivity)
2016-01-14 21:14:26	◀	usr (~usr@unaffiliated/usr) has quit (Ping timeout: 240 seconds)
2016-01-14 21:15:22	▶	T0BI (~ObitO@41.101.160.59) has joined #haskell
2016-01-14 21:15:34	◀	hannelita (~hannelita@191.22.203.41) has quit (Ping timeout: 245 seconds)
2016-01-14 21:16:06	◀	timmy_tofu (~tofu@static-72-69-161-2.nycmny.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2016-01-14 21:16:35	▶	yqt (~yqt@81.88.230.28) has joined #haskell
2016-01-14 21:16:40	▶	yfeldblum (~yfeldblum@2620:10d:c090:180::1:915f) has joined #haskell
2016-01-14 21:17:13	▶	kungp (~kp@185.21.217.80) has joined #haskell
2016-01-14 21:17:21	◀	jutaro__ (~jutaro@p200300455C4A72B59EEBE8FFFE341FBD.dip0.t-ipconnect.de) has quit (Quit: Konversation terminated!)
2016-01-14 21:17:23	◀	Gurkenglas (~Gurkengla@dslb-188-103-077-131.188.103.pools.vodafone-ip.de) has quit (Ping timeout: 255 seconds)
2016-01-14 21:17:36	◀	chaosmasttter (~chaosmast@p54B7F8CF.dip0.t-ipconnect.de) has quit (Ping timeout: 256 seconds)
2016-01-14 21:17:39	ReinH	luite: ping
2016-01-14 21:17:57	shapr	I can't find any pcap editing tools in Haskell :-(
2016-01-14 21:18:40	▶	jutaro__ (~jutaro@p200300455C4A72B59EEBE8FFFE341FBD.dip0.t-ipconnect.de) has joined #haskell
2016-01-14 21:19:40	▶	insitu (~textual@105.196.201.77.rev.sfr.net) has joined #haskell
2016-01-14 21:19:49	▶	strburst (~allen@lawn-128-61-22-119.lawn.gatech.edu) has joined #haskell
2016-01-14 21:20:15	▶	spuz_ (~spuzz@host-78-149-193-7.as13285.net) has joined #haskell
2016-01-14 21:20:25	johnw	shapr: http://hackage.haskell.org/packages/search?terms=pcap
2016-01-14 21:20:49	◀	govg_ (~govg@unaffiliated/govg) has quit (Quit: leaving)
2016-01-14 21:21:23	▶	julmac (~kamak@s247.ip5.netikka.fi) has joined #haskell
2016-01-14 21:21:25	▶	govg (~govg@unaffiliated/govg) has joined #haskell
2016-01-14 21:21:33	gabbiel	is the ncurses package from hackage working for any of you?
2016-01-14 21:21:54	◀	Tesseraction (~Tesseract@unaffiliated/tesseraction) has quit (Remote host closed the connection)
2016-01-14 21:22:14	◀	jutaro__ (~jutaro@p200300455C4A72B59EEBE8FFFE341FBD.dip0.t-ipconnect.de) has quit (Client Quit)
2016-01-14 21:22:30	◀	trism (~jconti@unaffiliated/trism) has quit (Quit: leaving)
2016-01-14 21:22:36	▶	jutaro__ (~jutaro@p200300455C4A72B59EEBE8FFFE341FBD.dip0.t-ipconnect.de) has joined #haskell
2016-01-14 21:22:38	▶	Quashie (~boingredd@ool-18bccfe5.dyn.optonline.net) has joined #haskell
2016-01-14 21:23:17	ReinH	rschnck: write a helper that does: sortByAngle [] = []; sortByAngle [x] = [x]; sortByAngle (x:xs) = sortBy (compareAngle x) xs
2016-01-14 21:23:40	ReinH	oh, I mean x : sortBy (compareAngle x) xs
2016-01-14 21:24:11	◀	cpup (~cpup@32.218.113.12) has quit (Ping timeout: 264 seconds)
2016-01-14 21:24:24	◀	julmae (~kamak@s247.ip5.netikka.fi) has quit (Ping timeout: 256 seconds)
2016-01-14 21:24:46	▶	t0by (~t0by@host140-244-dynamic.244-95-r.retail.telecomitalia.it) has joined #haskell
2016-01-14 21:24:50	⚡	hackagebot esqueleto 2.4.2 - Type-safe EDSL for SQL queries on persistent backends.  https://hackage.haskell.org/package/esqueleto-2.4.2 (FelipeLessa)
2016-01-14 21:24:50	▶	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has joined #haskell
2016-01-14 21:25:02	◀	Quashie_ (~boingredd@ool-18bccfe5.dyn.optonline.net) has quit (Ping timeout: 255 seconds)
2016-01-14 21:25:05	ReinH	where compareAngle x is your a -> a -> a -> Ordering
2016-01-14 21:25:07	▶	sk8dev (~sk8dev@p5B2FEC5D.dip0.t-ipconnect.de) has joined #haskell
2016-01-14 21:25:07	▶	bvad (~bvad@50a1b03c.flatrate.dk) has joined #haskell
2016-01-14 21:25:17	◀	zcourts (~zcourts@cpc5-croy18-2-0-cust555.croy.cable.virginm.net) has quit (Remote host closed the connection)
2016-01-14 21:25:24	ReinH	er, compareAngle is that, and compareAngle x is then the a -> a -> Ordering that sortBy needs.
2016-01-14 21:25:34	t0by	hi, is there a more haskell like way to write the following? fun1' xs = foldr (\x -> if (even x) then (*(x-2)) else id) 1 xs
2016-01-14 21:25:43	◀	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has quit (Read error: Connection reset by peer)
2016-01-14 21:26:00	▶	Bor0 (~boro@unaffiliated/boro/x-000000001) has joined #haskell
2016-01-14 21:26:09	▶	aleator (~aleator@85-76-98-55-nat.elisa-mobile.fi) has joined #haskell
2016-01-14 21:26:18	▶	chrisramsey (~chrisrams@2602:306:3762:700:340f:5790:242d:920b) has joined #haskell
2016-01-14 21:26:25	▶	ril (~ril@c-98-210-195-123.hsd1.ca.comcast.net) has joined #haskell
2016-01-14 21:26:54	t0by	pardon
2016-01-14 21:26:58	t0by	let me rephrase that
2016-01-14 21:27:00	Ankhers	t0by: You could "eta reduce". Which means you can remove the two instances of `xs' from your function. You can do this because `xs' is the very last thing in your function definition.
2016-01-14 21:27:06	t0by	is there a more haskell-like way to write fun1' xs = foldr (\x->(*(x-2))) 1 (filter even xs)
2016-01-14 21:27:21	dolio	ReinH: Second case is redundant. :)
2016-01-14 21:27:22	Ankhers	Not anymore.
2016-01-14 21:27:24	t0by	Ankhers, let me google eta reduce.
2016-01-14 21:27:35	t0by	(well, it's good to know)
2016-01-14 21:27:36	ReinH	dolio: ?
2016-01-14 21:27:42	ReinH	oh, it sure it
2016-01-14 21:27:45	ReinH	*is
2016-01-14 21:27:45	▶	Uakh (~Uakh@122-58-239-201.jetstream.xtra.co.nz) has joined #haskell
2016-01-14 21:27:55	t0by	thing is, I bet there is a better way to write  (\x->(*(x-2))), isn't there?
2016-01-14 21:28:08	◀	chrisramsey (~chrisrams@2602:306:3762:700:340f:5790:242d:920b) has quit (Remote host closed the connection)
2016-01-14 21:28:08	▶	baweaver (~baweaver@173.230.196.25) has joined #haskell
2016-01-14 21:28:10	ReinH	@pl \x -> * (x - 2)
2016-01-14 21:28:11	lambdabot	(line 1, column 7):
2016-01-14 21:28:11	lambdabot	unexpected "*"
2016-01-14 21:28:11	lambdabot	expecting lambda abstraction or expression
2016-01-14 21:28:16	ReinH	@pl \x -> (* (x - 2))
2016-01-14 21:28:17	lambdabot	(*) . subtract 2
2016-01-14 21:28:22	t0by	what is this sorcery
2016-01-14 21:28:29	ReinH	but you still need to check for even
2016-01-14 21:28:36	t0by	whoah
2016-01-14 21:28:39	ReinH	What you have seems fine.
2016-01-14 21:28:50	▶	jedws (~jedws@c58-109-75-176.randw4.nsw.optusnet.com.au) has joined #haskell
2016-01-14 21:28:55	t0by	this is awesome.
2016-01-14 21:29:00	t0by	thanks ReinH
2016-01-14 21:29:28	t0by	hate to be *that* guy, but is there an offline version of this script? could turn out useful when I'm on a plane and/or don't feel like spamming all of #haskell
2016-01-14 21:29:30	◀	bvad (~bvad@50a1b03c.flatrate.dk) has quit (Ping timeout: 256 seconds)
2016-01-14 21:29:34	◀	alpha123 (~peter@70.57.18.134) has quit (Ping timeout: 260 seconds)
2016-01-14 21:29:35	ReinH	or maybe just: \x y -> if even x then y * (x - 2) else y
2016-01-14 21:29:50	ReinH	Yes, stack install pointfree (or cabal)
2016-01-14 21:30:02	ReinH	and you can always /msg lambdabot to spam it in private
2016-01-14 21:30:05	◀	insitu (~textual@105.196.201.77.rev.sfr.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-01-14 21:30:18	▶	ugugaga (2ef631b2@gateway/web/freenode/ip.46.246.49.178) has joined #haskell
2016-01-14 21:30:51	t0by	thanks ReinH 
2016-01-14 21:31:17	ReinH	Or perhaps \x y -> y * if even x then x - 2 else 1
2016-01-14 21:31:31	◀	baweaver (~baweaver@173.230.196.25) has quit (Remote host closed the connection)
2016-01-14 21:31:32	ReinH	plenty of colors look good on this bikeshed
2016-01-14 21:31:47	▶	baweaver (~baweaver@173.230.196.25) has joined #haskell
2016-01-14 21:32:53	▶	usr (~usr@unaffiliated/usr) has joined #haskell
2016-01-14 21:33:07	▶	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-14 21:33:53	▶	Anon7k_ (29b6a359@gateway/web/freenode/ip.41.182.163.89) has joined #haskell
2016-01-14 21:34:04	◀	drot (~user@unaffiliated/drot) has quit (Quit: rcirc on GNU Emacs 24.5.1)
2016-01-14 21:34:10	Anon7k_	hey al
2016-01-14 21:34:16	Anon7k_	*all
2016-01-14 21:34:39	◀	sinkensabe (~sinkensab@213.115.244.180) has quit (Remote host closed the connection)
2016-01-14 21:34:40	▶	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has joined #haskell
2016-01-14 21:34:42	Anon7k_	Need help
2016-01-14 21:34:45	t0by	ReinH, after all aren't all programming languages since algol 60 attempts to build a better bikeshed? :)
2016-01-14 21:34:49	dmj	Anon7k_: yes
2016-01-14 21:35:03	Anon7k_	its in python
2016-01-14 21:35:11	▶	sinkensabe (~sinkensab@213.115.244.180) has joined #haskell
2016-01-14 21:35:13	t0by	Anon7k_, ##python? :)
2016-01-14 21:35:17	dmj	^
2016-01-14 21:35:19	▶	chaosmasttter (~chaosmast@p54B7F8CF.dip0.t-ipconnect.de) has joined #haskell
2016-01-14 21:35:39	Anon7k_	was getting this error
2016-01-14 21:35:43	Anon7k_	twait
2016-01-14 21:35:53	◀	slomo (~slomo@unaffiliated/slomo) has quit (Quit: Ex-Chat)
2016-01-14 21:36:10	◀	jutaro__ (~jutaro@p200300455C4A72B59EEBE8FFFE341FBD.dip0.t-ipconnect.de) has quit (Quit: Konversation terminated!)
2016-01-14 21:36:49	◀	aleator (~aleator@85-76-98-55-nat.elisa-mobile.fi) has quit (Ping timeout: 265 seconds)
2016-01-14 21:36:50	Anon7k_	sorry cant find it but;
2016-01-14 21:36:55	◀	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has quit (Ping timeout: 240 seconds)
2016-01-14 21:37:01	ReinH	Anon7k_: this is not a python channel
2016-01-14 21:37:07	Anon7k_	it had something like traceback
2016-01-14 21:37:09	▶	insitu (~textual@105.196.201.77.rev.sfr.net) has joined #haskell
2016-01-14 21:37:13	t0by	rly
2016-01-14 21:37:22	t0by	Anon7k_, you may want to join ##python
2016-01-14 21:37:29	t0by	Like this: /join ##python
2016-01-14 21:37:40	t0by	They actually know something about python over there
2016-01-14 21:37:43	▶	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined #haskell
2016-01-14 21:37:48	Anon7k_	need to register...how...new to irc
2016-01-14 21:37:59	t0by	Anon7k_, just type /join ##python in your client
2016-01-14 21:38:18	Anon7k_	thanks
2016-01-14 21:38:35	t0by	I mean, you do it just like you got here, except you use ##python instead of #haskell. Notice the two "#"
2016-01-14 21:38:38	◀	bb010g (uid21050@gateway/web/irccloud.com/x-jrdjnzrjcswzopde) has quit (Quit: Connection closed for inactivity)
2016-01-14 21:38:40	◀	insitu (~textual@105.196.201.77.rev.sfr.net) has quit (Client Quit)
2016-01-14 21:38:51	Anon7k_	btw is haskell a programming language
2016-01-14 21:38:53	Ankhers	That doesn't register you though. /msg nickserv help should give instructions on how to register.
2016-01-14 21:38:59	Ankhers	Anon7k_: yes.
2016-01-14 21:39:04	▶	cocreature_ (~moritz@2a02:8071:2b81:c00:8cc9:1cbf:fef7:f8a0) has joined #haskell
2016-01-14 21:39:05	Anon7k_	yeah noticed:)
2016-01-14 21:39:14	◀	cocreature_ (~moritz@2a02:8071:2b81:c00:8cc9:1cbf:fef7:f8a0) has quit (Client Quit)
2016-01-14 21:39:18	Anon7k_	is it high level
2016-01-14 21:39:19	◀	sinkensabe (~sinkensab@213.115.244.180) has quit (Ping timeout: 245 seconds)
2016-01-14 21:39:21	t0by	Anon7k_, actually just #python. I just learned that ##python (with two ##) is inactive these days
2016-01-14 21:39:22	◀	ugugaga (2ef631b2@gateway/web/freenode/ip.46.246.49.178) has quit (Quit: Page closed)
2016-01-14 21:39:31	▶	alpha123 (~peter@70.57.18.134) has joined #haskell
2016-01-14 21:39:35	Anon7k_	oh
2016-01-14 21:39:38	▶	t7_ (~chatzilla@5-179-100-38.glidedsl.com) has joined #haskell
2016-01-14 21:39:40	◀	Swizec (~swizec@199.21.86.210) has quit (Read error: Connection reset by peer)
2016-01-14 21:39:42	Ankhers	You can do both high and low level stuff in Haskell.
2016-01-14 21:39:53	◀	tey (~tey___@90.163.35.82) has quit (Ping timeout: 255 seconds)
2016-01-14 21:40:12	▶	MorpheusB (~morpheusb@95.211.172.97) has joined #haskell
2016-01-14 21:40:18	◀	kurt11 (~Adium@207.191.34.198) has quit (Quit: Leaving.)
2016-01-14 21:40:28	Anon7k_	which one is easier python or haskell            
2016-01-14 21:40:36	Anon7k_	e.g hello world
2016-01-14 21:40:36	▶	wanderleyguima (~wanderley@199.201.64.3) has joined #haskell
2016-01-14 21:40:41	Ankhers	That depends on your definition of easier.
2016-01-14 21:40:42	gabbiel	haskell
2016-01-14 21:40:44	◀	t7 (~chatzilla@5-179-100-38.glidedsl.com) has quit (Ping timeout: 246 seconds)
2016-01-14 21:40:47	▶	Velpoman (~Velpoman@bender.gigo.com) has joined #haskell
2016-01-14 21:40:48	ℹ	t7_ is now known as t7
2016-01-14 21:41:06	◀	gnusosa (~gnusosa@unaffiliated/gnusosa) has quit (Ping timeout: 240 seconds)
2016-01-14 21:41:23	◀	iwmrby (~iwmrby@2a02:2f0b:b0ec:400:3534:11e9:5fa:84a0) has quit (Quit: WeeChat 1.4)
2016-01-14 21:41:33	Anon7k_	python its    print('Hello world')      how is Haskell
2016-01-14 21:41:38	sk8dev	hi, can someone pls tell me how I can find all android related channels?
2016-01-14 21:41:42	◀	dgpratt (~dpratt71@207.182.208.2) has quit (Quit: Leaving)
2016-01-14 21:41:42	dmj	> putStrLn "Hello world"
2016-01-14 21:41:44	lambdabot	 <IO ()>
2016-01-14 21:42:08	◀	davidthomas (~dlthomas@li433-115.members.linode.com) has quit (Ping timeout: 255 seconds)
2016-01-14 21:42:22	Anon7k_	Well not difficult like java
2016-01-14 21:42:29	◀	mokus (~mokus@erdos.deepbondi.net) has quit (Ping timeout: 246 seconds)
2016-01-14 21:42:29	▶	path[l] (~vsi@c-73-158-39-31.hsd1.ca.comcast.net) has joined #haskell
2016-01-14 21:42:33	Ankhers	sk8dev: /msg alis help
2016-01-14 21:42:35	◀	sm (~user@li229-222.members.linode.com) has quit (Ping timeout: 240 seconds)
2016-01-14 21:42:55	◀	pacak (~pacak@2401:7400:e800:82d5:cc7:210:afac:fa7) has quit (Ping timeout: 240 seconds)
2016-01-14 21:42:56	◀	shachaf (~shachaf@unaffiliated/shachaf) has quit (Ping timeout: 272 seconds)
2016-01-14 21:42:58	gabbiel	i hate that I have to learn java for my cs degree
2016-01-14 21:43:00	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-14 21:43:02	◀	hackagebot (~rss2irc@li229-222.members.linode.com) has quit (Ping timeout: 276 seconds)
2016-01-14 21:43:02	◀	mrshoe (~mrshoe@mail.davidshoemaker.me) has quit (Ping timeout: 276 seconds)
2016-01-14 21:43:02	◀	mikeplus64 (~mike@unaffiliated/mikeplus64) has quit (Ping timeout: 276 seconds)
2016-01-14 21:43:06	t0by	Anon7k_, head over to wikipedia.
2016-01-14 21:43:06	◀	FireFly (~firefly@oftn/member/FireFly) has quit (Ping timeout: 260 seconds)
2016-01-14 21:43:07	sk8dev	Ankhers: thanks :)
2016-01-14 21:43:14	▶	tey (~tey___@90.163.35.82) has joined #haskell
2016-01-14 21:43:21	◀	baweaver (~baweaver@173.230.196.25) has quit (Remote host closed the connection)
2016-01-14 21:43:22	▶	mrshoe (~mrshoe@mail.davidshoemaker.me) has joined #haskell
2016-01-14 21:43:26	kaictl_work	Not sure if this is the right place, but here goes. So I've got a weird thing going on with my own install of lambdabot: mueval-core: GhcException "cannot satisfy -package lambdabot-trusted\n    (use -v for more information)"
2016-01-14 21:43:30	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-14 21:43:33	Anon7k_	then???????????????????
2016-01-14 21:43:33	▶	sm (~user@li229-222.members.linode.com) has joined #haskell
2016-01-14 21:43:35	◀	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has quit (Ping timeout: 240 seconds)
2016-01-14 21:43:39	◀	bennofs (~benno@2a02:810a:8200:2934:56ee:75ff:fe53:d108) has quit (Quit: WeeChat 1.3)
2016-01-14 21:43:45	maerwald	gabbiel: it usually confuses people new to programming and gives them tools they shouldn't be learning at that stage
2016-01-14 21:43:53	◀	kwantam (~kwantam@graviton.stanford.edu) has quit (Ping timeout: 246 seconds)
2016-01-14 21:43:56	▶	davidthomas (~dlthomas@li433-115.members.linode.com) has joined #haskell
2016-01-14 21:44:09	Anon7k_	<t0by> what on wiki
2016-01-14 21:44:15	t0by	Anon7k_, then read the "Python" and "Haskell" pages, as well as "Functional programming", "Lazy evaluation" and "Lambda calculus"
2016-01-14 21:44:16	▶	shachaf (~shachaf@unaffiliated/shachaf) has joined #haskell
2016-01-14 21:44:49	▶	mikeplus64 (~mike@quasimal.com) has joined #haskell
2016-01-14 21:44:49	◀	mikeplus64 (~mike@quasimal.com) has quit (Changing host)
2016-01-14 21:44:49	▶	mikeplus64 (~mike@unaffiliated/mikeplus64) has joined #haskell
2016-01-14 21:45:10	dmj	Anon7k_: why do you want to learn to program? What's your end goal?
2016-01-14 21:45:12	t0by	gabbiel, why so. Java is a very interesting case study IMHO. Would you rather learn about ALGOL 60?
2016-01-14 21:45:13	◀	rikonor (~rikonor@38.104.246.166) has quit (Remote host closed the connection)
2016-01-14 21:45:14	▶	vF3hNGxc47h8 (~androirc@177.45.176.146) has joined #haskell
2016-01-14 21:45:20	Anon7k_	will do but might take some time,,, I am using Cyborg Hawk
2016-01-14 21:45:25	gabbiel	i seriously can't do anything else after learning haskell
2016-01-14 21:45:34	gabbiel	*do any other programming lang
2016-01-14 21:45:36	▶	insitu (~textual@105.196.201.77.rev.sfr.net) has joined #haskell
2016-01-14 21:45:39	▶	pacak (~pacak@175.156.145.194) has joined #haskell
2016-01-14 21:45:49	▶	kurt11 (~Adium@207.191.34.198) has joined #haskell
2016-01-14 21:45:55	maerwald	well, for some things haskell can get rather boring if you are stuck to imperative style C bindings for example...
2016-01-14 21:45:57	suppi	gabbiel, you can do purescript ;)
2016-01-14 21:46:05	t0by	or prolog.
2016-01-14 21:46:11	Anon7k_	<dmj> My goal is to write programmes for now
2016-01-14 21:46:12	gabbiel	prolog?
2016-01-14 21:46:12	capisce	gabbiel: write Haskell programs to generate the Java
2016-01-14 21:46:18	▶	manuel_v (~manuel@ccn.li) has joined #haskell
2016-01-14 21:46:38	dolio	Nah, prolog's no good. Lambda prolog is where it's at.
2016-01-14 21:46:42	Ankhers	capisce: Frege
2016-01-14 21:46:47	▶	Swizec (~swizec@199.21.86.210) has joined #haskell
2016-01-14 21:46:56	spuz_	Anon7k_, i highly recommend you start programming with python. Feel free to read about haskell but start programming in something else
2016-01-14 21:47:04	maerwald	prolog doesn't scale well... huge programs are utterly complicated... pretty much unlike haskell
2016-01-14 21:47:18	▶	Shade_ (4666410a@gateway/web/freenode/ip.70.102.65.10) has joined #haskell
2016-01-14 21:47:20	suppi	Anon7k_, I'd recommend Racket :)
2016-01-14 21:47:25	▶	Th30n (~Th30n@93-136-19-65.adsl.net.t-com.hr) has joined #haskell
2016-01-14 21:47:25	gabbiel	purescript?
2016-01-14 21:47:27	▶	richardiii (~richardii@ip98-165-17-109.ph.ph.cox.net) has joined #haskell
2016-01-14 21:47:45	▶	gnusosa (~gnusosa@192.235.78.203) has joined #haskell
2016-01-14 21:47:45	◀	gnusosa (~gnusosa@192.235.78.203) has quit (Changing host)
2016-01-14 21:47:45	▶	gnusosa (~gnusosa@unaffiliated/gnusosa) has joined #haskell
2016-01-14 21:47:46	◀	IrishPrime (~IrishPrim@74.202.224.66) has quit (Quit: Leaving)
2016-01-14 21:47:53	▶	BlackCap (~blackcap@246.89-10-124.nextgentel.com) has joined #haskell
2016-01-14 21:48:00	◀	marienz (~marienz@freenode/staff/marienz) has quit (Ping timeout: 604 seconds)
2016-01-14 21:48:10	◀	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-14 21:48:12	fr33domlover	scheme/racket is a great start but it needs a but of theory in parallel to learn about type systems imho
2016-01-14 21:48:15	t0by	I agree with spuz_. I find Python makes for a very nice and clean "toy" language.
2016-01-14 21:48:17	Shade_	hi, can someone clue on when to use data, type, and newtype? 
2016-01-14 21:48:27	▶	FireFly (~firefly@oftn/member/FireFly) has joined #haskell
2016-01-14 21:48:46	dmj	spuz_: python is great, but it's difficult to refactor since there's no static types nor equational reasoning. Equational reasoning gives you the freedom to refactor. Code in dynamic languages are great to write stuff in quickly, but not to change / maintain things
2016-01-14 21:48:59	Shade_	for example, I want a data type that's essentially boolean, but I want the 2 constructors to be On | Off
2016-01-14 21:49:09	▶	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-14 21:49:12	t0by	dmj, of course. But if you are learning to program do you really need to refactor giant clusters of code? :)
2016-01-14 21:49:15	suppi	fr33domlover, do things in your head a little, then watch the compiler do that for you :)
2016-01-14 21:49:19	fr33domlover	Shade_, you can define your own type for that actually
2016-01-14 21:49:25	ReinH	Shade_: then you should use data
2016-01-14 21:49:59	◀	sk8dev (~sk8dev@p5B2FEC5D.dip0.t-ipconnect.de) has left #haskell
2016-01-14 21:49:59	ReinH	Shade_: data is generally what you should use. newtype is useful specifically when you type has exactly one constructor. type does not introduce a new data declaration, it introduces a synonym for an existing type.
2016-01-14 21:50:15	◀	pacak (~pacak@175.156.145.194) has quit (Ping timeout: 260 seconds)
2016-01-14 21:50:16	dmj	Shade_: type is just a synonym, it has 0 runtime overhead, newtype gives you static checking and no runtime overhead, but you're limited to a single constructor. data is when you need multiple constructors and compile time checking, but there will be heap allocation
2016-01-14 21:50:26	ReinH	@google haskell wiki newtype
2016-01-14 21:50:27	lambdabot	https://wiki.haskell.org/Newtype
2016-01-14 21:50:30	ReinH	^ for more info on newtypes
2016-01-14 21:50:34	▶	Anon7k (~Anon7k@OAI-BR01-41-182-163-89.ipb.na) has joined #haskell
2016-01-14 21:50:35	geekosaur	newtype is specifically useful when working with typeclasses
2016-01-14 21:50:40	gabbiel	newtype is just to save some mem?
2016-01-14 21:50:47	t0by	 I'm confused-ish. In ex1 from www.seas.upenn.edu/~cis194/spring13/hw/04-higher-order.pdf, what exactly do you think I'm supposed to do with `iterate` and `takeWhile`? I can't see how they would help me in the second case. `iterate` looks nice, but it gives me an *infinite* list, not a fixpoint which I guess is what would come in handy.
2016-01-14 21:50:47	◀	Anon7k (~Anon7k@OAI-BR01-41-182-163-89.ipb.na) has left #haskell
2016-01-14 21:50:48	maerwald	don't use type, unless you have a complicated monad burrito, but even then it's debatable
2016-01-14 21:50:54	▶	chrisramsey (~chrisrams@99-118-32-112.lightspeed.snantx.sbcglobal.net) has joined #haskell
2016-01-14 21:51:00	t0by	lol @ monad burrito
2016-01-14 21:51:03	gabbiel	^
2016-01-14 21:51:09	dmj	I'd use newtype over type everyday
2016-01-14 21:51:09	maerwald	mh?
2016-01-14 21:51:29	◀	T0BI (~ObitO@41.101.160.59) has quit (Ping timeout: 276 seconds)
2016-01-14 21:51:32	◀	julmac (~kamak@s247.ip5.netikka.fi) has quit (Read error: Connection reset by peer)
2016-01-14 21:51:32	▶	gfixler (~gfixler@bur-inet-pa-2.disney.com) has joined #haskell
2016-01-14 21:51:33	▶	danthemy_ (~danthemyt@50.246.66.201) has joined #haskell
2016-01-14 21:51:50	fr33domlover	the problem with type is type safety, I used it all lot for IRC and then passed nicknames as channel names and vice versa... and no type errors
2016-01-14 21:51:52	dmj	t0bi: re:learning to code, that's why I asked him what his goal is
2016-01-14 21:51:57	fr33domlover	then I moved to newtypes
2016-01-14 21:52:02	◀	richardiii (~richardii@ip98-165-17-109.ph.ph.cox.net) has quit (Ping timeout: 255 seconds)
2016-01-14 21:52:09	gabbiel	i just wanna know how advanced u guys are? ex: what are some software you've done
2016-01-14 21:52:24	▶	kochary (~lpostula@98.242-65-87.adsl-dyn.isp.belgacom.be) has joined #haskell
2016-01-14 21:52:31	fr33domlover	gabbiel, you'll fine all kinds of people here
2016-01-14 21:52:34	fr33domlover	experts and beginners
2016-01-14 21:52:36	gabbiel	in haskell of course
2016-01-14 21:52:39	▶	erikd (~erikd@103.229.16.4) has joined #haskell
2016-01-14 21:52:42	t0by	what is he, a tax officer?
2016-01-14 21:52:45	ReinH	And probably some non-guys as well.
2016-01-14 21:52:59	maerwald	I think sometimes people use "type" where they could just have proper function argument documentation
2016-01-14 21:53:07	gabbiel	gabbiel :: TaxOfficer
2016-01-14 21:53:18	▶	lritter (~lritter@92.229.38.98) has joined #haskell
2016-01-14 21:53:41	Jello_Raptor	hmm, is it possible to specialize a monad tranformer so that it uses one implementation when it's wrapping a MonadIO and a different implementation otherwise? (simply because mutable references would be great for efficiency if available) 
2016-01-14 21:53:48	rschnck	ReinH: I see. Thanks for the help. :)
2016-01-14 21:54:22	fr33domlover	Jello_Raptor, there is a GHC extension for that, dunno if there are tricks to do this without extension
2016-01-14 21:54:23	▶	marienz (~marienz@freenode/staff/marienz) has joined #haskell
2016-01-14 21:54:25	maerwald	e.g.: type Point = (Double, Double) -- which I find horrible
2016-01-14 21:54:46	◀	usr (~usr@unaffiliated/usr) has quit (Ping timeout: 240 seconds)
2016-01-14 21:54:46	◀	danthemyth (~danthemyt@50.246.66.201) has quit (Ping timeout: 260 seconds)
2016-01-14 21:54:52	maerwald	unfortunately even popular libraries do that (see gloss)
2016-01-14 21:54:55	▶	kwantam (~kwantam@graviton.stanford.edu) has joined #haskell
2016-01-14 21:55:02	t0by	maerwald, what's wrong with Double, Double?
2016-01-14 21:55:14	◀	manuel_v (~manuel@ccn.li) has left #haskell ("Leaving")
2016-01-14 21:55:21	maerwald	type Point = (Float, Float) ... type Vector = Point ... type Path = [Point] -- oh dear
2016-01-14 21:55:31	Jello_Raptor	fr33domlover: I think it needs ConstraintKinds and TypeFamilies, but i'm not clear exactly how to get that to happen.  
2016-01-14 21:55:34	fr33domlover	t0by, you can by mistake pass `type Dimensions = (Double, Double)`
2016-01-14 21:55:40	fr33domlover	and there will be no type errors
2016-01-14 21:55:44	maerwald	at some point you might pass in (Float, Float) describing something which is not a point... and the function will not complain 
2016-01-14 21:55:53	▶	meoblast001 (~meoblast@cable-86-56-110-32.cust.telecolumbus.net) has joined #haskell
2016-01-14 21:56:00	▶	salih666 (~user@unaffiliated/r420r) has joined #haskell
2016-01-14 21:56:01	▶	julmae (~kamak@s247.ip5.netikka.fi) has joined #haskell
2016-01-14 21:56:16	fr33domlover	Jello_Raptor, there is an extension for specialized instances
2016-01-14 21:56:27	fr33domlover	see the GHC manual
2016-01-14 21:56:29	t0by	maerwald, wait. I'm a total haskell newbie. Can you elaborate a bit? I believe there is a valuable lesson in there, but I'm not understanding it.
2016-01-14 21:56:33	⚡	fr33domlover goes there too to check
2016-01-14 21:57:15	◀	jack_rabbit (~jack_rabb@2601:240:8200:2380:6a17:29ff:fef6:76d8) has quit (Ping timeout: 240 seconds)
2016-01-14 21:57:37	fr33domlover	https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/pragmas.html#ftn.idp46686526090608
2016-01-14 21:57:40	fr33domlover	Jello_Raptor, ^
2016-01-14 21:57:57	◀	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-14 21:58:04	Jello_Raptor	oh huh, didn't know about that pragma
2016-01-14 21:58:10	mnoonan	t0by: think of something like type Dollars = Int, type UserID = Int, and a function addMoney :: UserID -> Dollars -> IO ()
2016-01-14 21:58:23	◀	gfixler (~gfixler@bur-inet-pa-2.disney.com) has quit (Ping timeout: 264 seconds)
2016-01-14 21:58:26	fr33domlover	Jello_Raptor, some libs use it to provide efficient specialized implementations :)
2016-01-14 21:58:27	▶	mokus (~mokus@erdos.deepbondi.net) has joined #haskell
2016-01-14 21:58:28	◀	gabbiel (~gabbiel@97-100-73-213.res.bhn.net) has quit (Quit: leaving)
2016-01-14 21:58:37	fr33domlover	it's probably the reason it exists
2016-01-14 21:58:39	t0by	mnoonan, thinking ot it. What happens?
2016-01-14 21:58:43	mnoonan	so giving 10 dollars to user 20 looks like "addMoney 20 10"
2016-01-14 21:58:56	t0by	Oh okay, I see.
2016-01-14 21:58:57	▶	angerman (~m@118.200.49.69) has joined #haskell
2016-01-14 21:59:02	t0by	It's confusing, isn't it.
2016-01-14 21:59:04	▶	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has joined #haskell
2016-01-14 21:59:09	t0by	What would the sane way to do it be?
2016-01-14 21:59:14	mnoonan	easy to accidentally give 20 dollars to user 10 by writing addMoney 10 20, right?
2016-01-14 21:59:16	◀	ph88 (~ph88@541E4F6E.cm-5-7b.dynamic.ziggo.nl) has quit (Read error: Connection reset by peer)
2016-01-14 21:59:24	▶	askalski (~akuda@83.28.151.105) has joined #haskell
2016-01-14 21:59:33	▶	wennergr (~textual@EARNEST-OPE.bar1.SanFrancisco1.Level3.net) has joined #haskell
2016-01-14 21:59:44	mnoonan	if you used newtypes instead, you would need something more explict like "addMoney (Dollars 20) (UserID 10)"
2016-01-14 21:59:55	◀	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has quit (Client Quit)
2016-01-14 21:59:56	▶	xnil (~xnil@69.43.66.12) has joined #haskell
2016-01-14 22:00:03	mnoonan	and if you wrote "addMoney (UserID 20) (Dollars 10)" accidentally, it would fail to compile
2016-01-14 22:00:05	maerwald	t0by: if you have "data Vector = Vec { vx :: Double, vy :: Double }" vs "type Vector = (Double, Double)"... it's harder to screw up a function that takes the former, because you construct it explicitly via Vec... while Vector is just a synonym for _anything_ that is of type (Double, Double)
2016-01-14 22:00:11	▶	derdon (~derdon@91.49.204.240) has joined #haskell
2016-01-14 22:00:15	t0by	mnoonan, very clear, thanks
2016-01-14 22:00:17	fr33domlover	mnoonan, unless you use "instance [..] Num" which defeats the point of the newtype :P
2016-01-14 22:00:30	fr33domlover	also a good point to note
2016-01-14 22:00:44	▶	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-14 22:00:45	fr33domlover	I mean Instance Num [..] :P
2016-01-14 22:00:54	dolio	It doesn't necessarily defeat the point.
2016-01-14 22:00:59	◀	yqt (~yqt@81.88.230.28) has quit (Ping timeout: 245 seconds)
2016-01-14 22:01:05	dolio	Just the example.
2016-01-14 22:01:05	fr33domlover	dolio, well, it does partially
2016-01-14 22:01:11	▶	timmy_tofu (~tofu@static-72-69-161-2.nycmny.fios.verizon.net) has joined #haskell
2016-01-14 22:01:12	fr33domlover	depends on the case
2016-01-14 22:01:35	t0by	speaking of sane ways, can anybody give me a tiny little hint re: Excercise 1.2 from http://www.seas.upenn.edu/~cis194/spring13/hw/04-higher-order.pdf? It asks me to rewrite a function in a cleaner style, but I can't understand where to start.
2016-01-14 22:01:36	maerwald	however, I sometimes use "type something = something" to make refactoring easier... e.g. if I play with GTK+ data types and might change them a lot... I'd have to go over a lot of files and search/replace stuff
2016-01-14 22:01:42	maerwald	a central type synonym can make that easier
2016-01-14 22:01:45	t0by	Were it a list, I would have some idea.
2016-01-14 22:01:50	▶	dgpratt (~dpratt71@207.182.208.2) has joined #haskell
2016-01-14 22:02:11	▶	baweaver (~baweaver@173.230.196.25) has joined #haskell
2016-01-14 22:02:15	▶	mankaev_ (~mankaev@broadband-5-228-245-147.nationalcablenetworks.ru) has joined #haskell
2016-01-14 22:02:16	◀	fizbin (~Adium@39.sub-70-215-74.myvzw.com) has quit (Quit: Leaving.)
2016-01-14 22:02:16	▶	lingxiao (~lingxiao@2607:f470:6:400d:700e:651f:6d52:c024) has joined #haskell
2016-01-14 22:02:23	exio4	maerwald: well, I wouldn't allow UserIDs to be created so easily :p
2016-01-14 22:02:34	◀	Tertain (~tertain@190.131.155.156) has quit (Ping timeout: 272 seconds)
2016-01-14 22:02:36	◀	oisdk_ (~oisdk_@95.45.70.25) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-14 22:02:50	t0by	I have
2016-01-14 22:02:52	t0by	fun2 1 = 0
2016-01-14 22:02:52	t0by	fun2 n | even n    = n + fun2 (n `div` 2)
2016-01-14 22:02:52	t0by	       | otherwise = fun2 (3 * n + 1)
2016-01-14 22:03:06	t0by	Any little hint to improve it?
2016-01-14 22:03:24	shachaf	Improve it by making fun2 1 = 4
2016-01-14 22:03:27	▶	jomg (~jomg@dslc-082-083-170-154.pools.arcor-ip.net) has joined #haskell
2016-01-14 22:03:34	shachaf	Oh, this isn't that function.
2016-01-14 22:03:37	▶	sz0 (~sz0@94.54.207.190) has joined #haskell
2016-01-14 22:03:39	t0by	shachaf, I mean style-wise.
2016-01-14 22:03:44	dmj	is this collatz?
2016-01-14 22:03:55	t0by	dmj, it's cs194
2016-01-14 22:04:06	⚡	t0by is very confused
2016-01-14 22:04:24	◀	sbinq (5d55b532@gateway/web/freenode/ip.93.85.181.50) has quit (Quit: Page closed)
2016-01-14 22:04:34	dmj	t0by: https://en.wikipedia.org/wiki/Collatz_conjecture
2016-01-14 22:04:38	◀	raichoo (~raichoo@mue-88-130-46-034.dsl.tropolys.de) has quit (Ping timeout: 255 seconds)
2016-01-14 22:04:41	exio4	collatz :: Int -> [Int] ; collatz 1 = [1] ; collatz n | even n = n : collatz (n `div` 2) | otherwise = n : collatz (3 * n + 1)
2016-01-14 22:04:49	◀	mankaev_ (~mankaev@broadband-5-228-245-147.nationalcablenetworks.ru) has left #haskell
2016-01-14 22:04:49	exio4	then I'd do sum . filter even . collatz
2016-01-14 22:04:52	t0by	oh, very much, then
2016-01-14 22:05:00	exio4	oh wait
2016-01-14 22:05:04	exio4	it's homework, ignore me
2016-01-14 22:05:10	▶	consus (~Unknown@188.162.65.17) has joined #haskell
2016-01-14 22:05:13	▶	hackagebot (~rss2irc@li229-222.members.linode.com) has joined #haskell
2016-01-14 22:05:20	⚡	hackagebot email-validate 2.2.0 - Validating an email address string against RFC 5322  https://hackage.haskell.org/package/email-validate-2.2.0 (GeorgePollard)
2016-01-14 22:05:22	⚡	hackagebot pipes-websockets 0.1.0.0 - WebSockets in the Pipes framework.  https://hackage.haskell.org/package/pipes-websockets-0.1.0.0 (NoonSilk)
2016-01-14 22:05:48	t0by	exio4, it's not actually homework for me, but I did ask for a hint and not a solution :)
2016-01-14 22:06:08	exio4	<_< I need a place to hide now
2016-01-14 22:06:10	t0by	exio4, luckily I managed not to read that yet. wanna try a hint? :)
2016-01-14 22:06:16	◀	javjarfer (~javjarfer@212.225.209.2) has quit (Ping timeout: 250 seconds)
2016-01-14 22:06:30	◀	chrisramsey (~chrisrams@99-118-32-112.lightspeed.snantx.sbcglobal.net) has quit (Remote host closed the connection)
2016-01-14 22:06:31	▶	kadoban (~mud@unaffiliated/kadoban) has joined #haskell
2016-01-14 22:06:47	▶	SuperTux88 (benjamin@i.have.ipv6.on.coding4.coffee) has joined #haskell
2016-01-14 22:06:54	◀	jeeger (~user@p5B2C274F.dip0.t-ipconnect.de) has quit (Ping timeout: 256 seconds)
2016-01-14 22:07:12	exio4	t0by: let's go with this, what's fun2 doing? 
2016-01-14 22:07:25	Anon7k_	bye bros
2016-01-14 22:07:26	◀	rkazak (~rkazak@c-24-6-104-170.hsd1.ca.comcast.net) has quit (Ping timeout: 240 seconds)
2016-01-14 22:07:43	▶	chrisramsey (~chrisrams@2602:306:3762:700:888f:4db6:6101:d747) has joined #haskell
2016-01-14 22:07:45	◀	Ziltrum (~Destol@public-249-238.nat.utoronto.ca) has quit (Ping timeout: 260 seconds)
2016-01-14 22:07:49	◀	Anon7k_ (29b6a359@gateway/web/freenode/ip.41.182.163.89) has quit (Quit: Page closed)
2016-01-14 22:08:06	▶	tekkkz (~tekkkz@p2003005F2A369BC50A9E01FFFEA965AA.dip0.t-ipconnect.de) has joined #haskell
2016-01-14 22:08:15	BlackCap	Why does lambdabot have a brainfuck interpreter again?
2016-01-14 22:08:40	dolio	Because someone wrote it.
2016-01-14 22:08:44	◀	chrisramsey (~chrisrams@2602:306:3762:700:888f:4db6:6101:d747) has quit (Remote host closed the connection)
2016-01-14 22:08:53	t0by	exio4, well, things, apparently. I can't see anything "special" about it.
2016-01-14 22:09:11	◀	wanderleyguima (~wanderley@199.201.64.3) has quit (Ping timeout: 264 seconds)
2016-01-14 22:09:12	t0by	(which checks out since people are apparently still trying to prove stuff about that functions)
2016-01-14 22:09:16	t0by	*function
2016-01-14 22:09:32	t0by	exio4, is there any special place I should direct my eye?
2016-01-14 22:09:43	tekkkz	hello! im trying to make a function working from inside c code. i did this some time ago - worked. now, at this time, it wont work (ofc im trying an otherfunction now). Have a look: https://bpaste.net/show/26605e90b12b errors at compiling with: https://bpaste.net/show/fe48e6562a4e
2016-01-14 22:09:47	▶	pacak (~pacak@2401:7400:e800:82d5:cc7:210:afac:fa7) has joined #haskell
2016-01-14 22:09:49	tekkkz	any ideas how to fix that?
2016-01-14 22:09:51	exio4	t0by: if you had to explain what your current function is doing (btw, it's not exactly collatz, it's doing some extra things with the sequence!)
2016-01-14 22:10:02	◀	python476 (~user@2a02-8420-6f5c-4200-021f-3bff-fe7d-f603.rev.sfr.net) has quit (Ping timeout: 255 seconds)
2016-01-14 22:10:15	◀	eis (~eis@64.201.244.6) has quit (Quit: This computer has gone to sleep)
2016-01-14 22:10:27	▶	jle_ (~mstksg@ip68-5-21-75.oc.oc.cox.net) has joined #haskell
2016-01-14 22:10:36	▶	NoCreativity (~quassel@187.110.234.144) has joined #haskell
2016-01-14 22:10:40	BlackCap	@bf +[]
2016-01-14 22:10:45	lambdabot	 Done.
2016-01-14 22:10:49	BlackCap	clever.
2016-01-14 22:11:12	◀	Sixmsj (~Sixmsj@c-73-189-102-185.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2016-01-14 22:11:13	▶	eis (~eis@64.201.244.6) has joined #haskell
2016-01-14 22:11:15	t0by	exio4, it's summing even n's to f(n/2), which means f(3*n+1) if n is not even.
2016-01-14 22:11:38	▶	albertus1 (~albertus1@78.53.145.47) has joined #haskell
2016-01-14 22:11:40	t0by	exio4, the output must be always even.
2016-01-14 22:12:30	◀	Jackneill (~Jackneill@gateway/vpn/privateinternetaccess/jackneill) has quit (Ping timeout: 260 seconds)
2016-01-14 22:12:35	◀	__uu__ (~uuplusu@183.157.160.27) has quit (Ping timeout: 240 seconds)
2016-01-14 22:12:39	◀	jle` (~mstksg@unaffiliated/mstksg) has quit (Ping timeout: 245 seconds)
2016-01-14 22:12:48	exio4	t0by: I mean at a higher level, given a number N, you have some sequence there, right?
2016-01-14 22:13:00	t0by	exio4, absolutely.
2016-01-14 22:13:04	t0by	and they are always even.
2016-01-14 22:13:11	▶	ali_bush_laptop (4311a1d6@gentoo/developer/alibush) has joined #haskell
2016-01-14 22:13:26	maerwald	the function is fine (style-wise)
2016-01-14 22:13:30	maerwald	not really much to do there
2016-01-14 22:13:37	◀	Luke (~Luke@unaffiliated/luke) has quit (Quit: sleep)
2016-01-14 22:13:47	maerwald	only nitpicking...
2016-01-14 22:13:53	◀	griotspeak (~textual@50-205-32-182-static.hfc.comcastbusiness.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-14 22:14:04	exio4	you're actually right :P 
2016-01-14 22:14:04	▶	ph88 (~ph88@541E4F6E.cm-5-7b.dynamic.ziggo.nl) has joined #haskell
2016-01-14 22:14:49	t0by	exio4, hum.
2016-01-14 22:14:56	exio4	t0by: I don't really know how to explain this without giving out the function in english instead of code, I'll let someone else here or in #haskell-beginners to help you, sorry :( 
2016-01-14 22:15:02	t0by	exio4, wait, wait.
2016-01-14 22:15:12	◀	DANtheBEASTman (dan@soupwhale.com) has quit (Quit: I hate quit messages.)
2016-01-14 22:15:16	exio4	alright, you were warned! 
2016-01-14 22:15:48	t0by	no, sorry.
2016-01-14 22:15:48	◀	insitu (~textual@105.196.201.77.rev.sfr.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-01-14 22:15:48	◀	yfeldblum (~yfeldblum@2620:10d:c090:180::1:915f) has quit (Ping timeout: 250 seconds)
2016-01-14 22:16:04	t0by	I'll head over to haskell-beginners and troll that channel as well
2016-01-14 22:16:14	◀	kochary (~lpostula@98.242-65-87.adsl-dyn.isp.belgacom.be) has quit (Ping timeout: 260 seconds)
2016-01-14 22:16:27	◀	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-14 22:16:32	▶	griotspeak (~textual@50-205-32-182-static.hfc.comcastbusiness.net) has joined #haskell
2016-01-14 22:16:40	◀	wolfcub (~henrique_@177.55.195.209) has quit (Ping timeout: 250 seconds)
2016-01-14 22:17:02	▶	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-14 22:17:16	▶	cdg (~cdg@157.166.175.129) has joined #haskell
2016-01-14 22:17:19	▶	yqt (~yqt@81.88.230.28) has joined #haskell
2016-01-14 22:18:18	▶	sinkensabe (~sinkensab@213-65-123-236-no78.tbcn.telia.com) has joined #haskell
2016-01-14 22:18:42	▶	chrisramsey (~chrisrams@99-118-32-112.lightspeed.snantx.sbcglobal.net) has joined #haskell
2016-01-14 22:19:05	◀	Arkooi (~Arkooij@095-096-221-109.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-14 22:19:08	▶	rardiol (~user@177.52.229.102) has joined #haskell
2016-01-14 22:19:10	◀	Bor0 (~boro@unaffiliated/boro/x-000000001) has quit (Quit: Leaving)
2016-01-14 22:19:20	▶	crossroads1112 (~chad@99-32-166-252.lightspeed.iplsin.sbcglobal.net) has joined #haskell
2016-01-14 22:19:51	maerwald	hope the "troll" part was a joke :P
2016-01-14 22:20:17	◀	sinkensabe (~sinkensab@213-65-123-236-no78.tbcn.telia.com) has quit (Remote host closed the connection)
2016-01-14 22:20:27	◀	dadar (~androidde@78.173.237.110) has quit (Read error: Connection reset by peer)
2016-01-14 22:20:40	◀	t7 (~chatzilla@5-179-100-38.glidedsl.com) has quit (Remote host closed the connection)
2016-01-14 22:20:50	◀	tekkkz (~tekkkz@p2003005F2A369BC50A9E01FFFEA965AA.dip0.t-ipconnect.de) has quit (Quit: Leaving)
2016-01-14 22:20:50	▶	sinkensabe (~sinkensab@213-65-123-236-no78.tbcn.telia.com) has joined #haskell
2016-01-14 22:20:52	▶	wolfcub (~henrique_@177.55.195.209) has joined #haskell
2016-01-14 22:21:03	◀	hellertime (~hellertim@pool-173-48-56-241.bstnma.fios.verizon.net) has quit (Quit: Leaving.)
2016-01-14 22:21:36	crossroads1112	I am trying to define a simple function that takes two arguments and returns the first argument, adding one. I tried to do (+1) . const but  I get an error that there is a "Non type-variable argument in the constraing : Num (b->a)" What does this mean and what can I do do solve this?
2016-01-14 22:22:15	◀	strburst (~allen@lawn-128-61-22-119.lawn.gatech.edu) has quit (Ping timeout: 265 seconds)
2016-01-14 22:22:22	▶	t7 (~chatzilla@5-179-100-38.glidedsl.com) has joined #haskell
2016-01-14 22:22:51	mnoonan	crossroads1112: you almost had it, but you want const . (+1)
2016-01-14 22:22:52	▶	fizbin (~Adium@hqp-p.bcls.lib.nj.us) has joined #haskell
2016-01-14 22:22:55	◀	lingxiao (~lingxiao@2607:f470:6:400d:700e:651f:6d52:c024) has quit
2016-01-14 22:23:08	◀	sinkensabe (~sinkensab@213-65-123-236-no78.tbcn.telia.com) has quit (Read error: Connection reset by peer)
2016-01-14 22:23:32	▶	sinkensabe (~sinkensab@213-65-123-236-no78.tbcn.telia.com) has joined #haskell
2016-01-14 22:23:32	◀	ype (~ype@cpc45-slam6-2-0-cust434.2-4.cable.virginm.net) has quit (Ping timeout: 255 seconds)
2016-01-14 22:23:34	mnoonan	:t const
2016-01-14 22:23:36	lambdabot	a -> b -> a
2016-01-14 22:23:38	mnoonan	:t (+1)
2016-01-14 22:23:39	lambdabot	Num a => a -> a
2016-01-14 22:23:42	▶	Sonolin (~michael@wsip-184-178-115-131.sd.sd.cox.net) has joined #haskell
2016-01-14 22:24:05	mnoonan	think of const  as :: a -> (b -> a) and you can see why they only fit together in one way
2016-01-14 22:24:30	◀	plucas (~plucas@8.18.218.175) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-14 22:24:54	▶	sphinxo (~sphinxo@212-139-66-70.dynamic.dsl.as9105.com) has joined #haskell
2016-01-14 22:24:57	crossroads1112	mnoonan, ah yes that works. Why exactly is this?
2016-01-14 22:25:40	sphinxo	How would you store something that for example given 16 returns AX, BX, CX and so on?
2016-01-14 22:25:57	sphinxo	and say given 64 would return RAX, RBX etc
2016-01-14 22:26:05	▶	plucas (~plucas@8.18.218.175) has joined #haskell
2016-01-14 22:26:05	▶	DANtheBEASTman (~DANtheBEA@new.bananabo.xyz) has joined #haskell
2016-01-14 22:26:09	mnoonan	you read the composition right-to-left, so const . (+1) means "take my input, add one to it, then create a function that ignores the next input and gives this value back"
2016-01-14 22:26:17	◀	jgoux (6dd49722@gateway/web/cgi-irc/kiwiirc.com/ip.109.212.151.34) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2016-01-14 22:26:19	▶	dgpratt_ (~dpratt71@207.182.208.2) has joined #haskell
2016-01-14 22:26:32	◀	Jesin (~Jesin@pool-108-45-39-144.washdc.fios.verizon.net) has quit (Quit: Leaving)
2016-01-14 22:26:47	◀	chrisramsey (~chrisrams@99-118-32-112.lightspeed.snantx.sbcglobal.net) has quit (Remote host closed the connection)
2016-01-14 22:27:10	▶	chrisramsey (~chrisrams@99-118-32-112.lightspeed.snantx.sbcglobal.net) has joined #haskell
2016-01-14 22:27:11	crossroads1112	Ah okay, I was thinking "I want to take the output of const and feed it into (+1)", but that makes more sense
2016-01-14 22:27:24	◀	drmoob (~iceman@c-ea0be353.036-63-6875761.cust.bredbandsbolaget.se) has quit (Remote host closed the connection)
2016-01-14 22:27:33	◀	DANtheBEASTman (~DANtheBEA@new.bananabo.xyz) has quit (Client Quit)
2016-01-14 22:27:41	▶	drmoob (~iceman@c-ea0be353.036-63-6875761.cust.bredbandsbolaget.se) has joined #haskell
2016-01-14 22:27:58	▶	DANtheBEASTman (dan@2a01:4f8:190:5145::2) has joined #haskell
2016-01-14 22:28:12	◀	conal (~textual@104.255.240.10) has quit (Read error: Connection reset by peer)
2016-01-14 22:28:13	crossroads1112	sphinxo: What do you mean by "store"
2016-01-14 22:28:23	◀	simony (~LokiSnake@unaffiliated/lokisnake) has quit (Ping timeout: 264 seconds)
2016-01-14 22:28:45	◀	hackagebot (~rss2irc@li229-222.members.linode.com) has quit (Ping timeout: 260 seconds)
2016-01-14 22:28:47	◀	drewdavis (drew@2600:3c01::f03c:91ff:fe50:a163) has quit (Remote host closed the connection)
2016-01-14 22:29:03	◀	umib0zu (~umib0zu@c-50-177-152-117.hsd1.ma.comcast.net) has quit (Quit: umib0zu)
2016-01-14 22:29:14	◀	Guest96687 (no-n@that.bitch.stole-your.pw) has quit (Ping timeout: 250 seconds)
2016-01-14 22:29:14	◀	alem0lars (alem0lars@0xcc.alem0lars.me) has quit (Ping timeout: 250 seconds)
2016-01-14 22:29:14	◀	Klumben (Nsaiswatch@elmo.stole-your.pw) has quit (Ping timeout: 250 seconds)
2016-01-14 22:29:26	◀	FireFly (~firefly@oftn/member/FireFly) has quit (Ping timeout: 240 seconds)
2016-01-14 22:29:48	◀	refold (~gman@h-129-27.a258.priv.bahnhof.se) has quit (Quit: leaving)
2016-01-14 22:29:52	▶	mudphone` (user@2600:3c01::f03c:91ff:fe18:90cf) has joined #haskell
2016-01-14 22:29:55	◀	vikraman (~vh4x0r@gentoo/developer/vikraman) has quit (Ping timeout: 260 seconds)
2016-01-14 22:29:55	◀	SolarAquarion (SolarAquar@the.feds.nullrouted.us) has quit (Ping timeout: 260 seconds)
2016-01-14 22:29:55	◀	Cr8 (apage43@ooo.crate.im) has quit (Ping timeout: 260 seconds)
2016-01-14 22:30:10	▶	richardiii (~richardii@ip98-165-17-109.ph.ph.cox.net) has joined #haskell
2016-01-14 22:30:29	◀	dgpratt (~dpratt71@207.182.208.2) has quit (Ping timeout: 276 seconds)
2016-01-14 22:30:31	◀	PizzaPortal (~PizzaPort@ip503c32de.speed.planet.nl) has quit (Quit: PizzaPortal)
2016-01-14 22:30:31	◀	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2016-01-14 22:30:32	◀	jokester (~mono@unaffiliated/jokester) has quit (Ping timeout: 250 seconds)
2016-01-14 22:30:33	▶	asthasr (~asthasr__@cpe-69-132-118-91.carolina.res.rr.com) has joined #haskell
2016-01-14 22:30:44	▶	vikraman (~vh4x0r@gentoo/developer/vikraman) has joined #haskell
2016-01-14 22:30:48	◀	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-14 22:30:54	▶	Cr8 (apage43@ooo.crate.im) has joined #haskell
2016-01-14 22:30:54	▶	drewdavis (drew@2600:3c01::f03c:91ff:fe50:a163) has joined #haskell
2016-01-14 22:31:03	◀	phyrex1an (~phyrex1an@2a02:fe0:c151:4d10:bd93:496a:ec56:e657) has quit (Quit: Leaving.)
2016-01-14 22:31:09	▶	mokus_ (~mokus@erdos.deepbondi.net) has joined #haskell
2016-01-14 22:31:36	◀	path[l] (~vsi@c-73-158-39-31.hsd1.ca.comcast.net) has quit (Quit: path[l])
2016-01-14 22:31:47	▶	umib0zu (~umib0zu@c-50-177-152-117.hsd1.ma.comcast.net) has joined #haskell
2016-01-14 22:31:49	sphinxo	crossroads1112: Some kind of mapping?
2016-01-14 22:31:50	jle_	crossroads1112: might be easier to write it as: foo x y = x + 1
2016-01-14 22:31:50	◀	mudphone (user@2600:3c01::f03c:91ff:fe18:90cf) has quit (Ping timeout: 250 seconds)
2016-01-14 22:32:03	▶	tel (~tel@204.148.29.50) has joined #haskell
2016-01-14 22:32:05	t0by	@pl \n ->  (3 * n + 1)
2016-01-14 22:32:06	lambdabot	(1 +) . (3 *)
2016-01-14 22:32:06	◀	chrisramsey (~chrisrams@99-118-32-112.lightspeed.snantx.sbcglobal.net) has quit (Remote host closed the connection)
2016-01-14 22:32:17	◀	askalski (~akuda@83.28.151.105) has quit (Quit: Wychodzi)
2016-01-14 22:32:30	BlackCap	@let f 16 = map (:"X") ['A'..'Z']
2016-01-14 22:32:32	lambdabot	 Defined.
2016-01-14 22:32:36	BlackCap	> f 16
2016-01-14 22:32:37	lambdabot	     Ambiguous occurrence ‘f’
2016-01-14 22:32:38	lambdabot	     It could refer to either ‘L.f’,
2016-01-14 22:32:38	lambdabot	                              defined at /tmp/mueval2694553061703964683.hs:150:1
2016-01-14 22:32:54	BlackCap	sphinxo: Like that?
2016-01-14 22:33:14	BlackCap	> map (:"X") ['A'..'Z']
2016-01-14 22:33:15	lambdabot	 ["AX","BX","CX","DX","EX","FX","GX","HX","IX","JX","KX","LX","MX","NX","OX",...
2016-01-14 22:33:20	▶	raid (macbookpro@irc.coding4coffee.org) has joined #haskell
2016-01-14 22:33:26	◀	mokus (~mokus@erdos.deepbondi.net) has quit (Ping timeout: 255 seconds)
2016-01-14 22:33:36	▶	chrisramsey (~chrisrams@2602:306:3762:700:75b7:47cc:9101:85ec) has joined #haskell
2016-01-14 22:33:58	sphinxo	I want to link register sizes to registers
2016-01-14 22:34:02	crossroads1112	sphinxo: It kind of depends on what you plan on doing with them. Obviously, you are trying to represent registers, maybe you could define an enum?
2016-01-14 22:34:14	jle_	sphinxo: foo 16 = map (:"X") ['A'..'Z']; foo 64 = blah?
2016-01-14 22:34:17	sphinxo	I have an enum like B64 | B32 | B16 | BH8 | BL8
2016-01-14 22:34:23	◀	mikeplus64 (~mike@unaffiliated/mikeplus64) has quit (Ping timeout: 264 seconds)
2016-01-14 22:34:27	◀	RevBayes (~revbayes@168.215.217.226) has quit (Read error: Connection reset by peer)
2016-01-14 22:34:33	sphinxo	and then another enum containing RAX | EAX  | AX | AH |  AL ..etc
2016-01-14 22:34:35	◀	gnusosa (~gnusosa@unaffiliated/gnusosa) has quit (Ping timeout: 260 seconds)
2016-01-14 22:34:37	▶	RevBayes (~revbayes@168.215.217.226) has joined #haskell
2016-01-14 22:34:59	◀	timmy_tofu (~tofu@static-72-69-161-2.nycmny.fios.verizon.net) has quit (Ping timeout: 246 seconds)
2016-01-14 22:35:02	◀	mrshoe (~mrshoe@mail.davidshoemaker.me) has quit (Ping timeout: 276 seconds)
2016-01-14 22:35:36	▶	FireFly (~firefly@oftn/member/FireFly) has joined #haskell
2016-01-14 22:35:58	▶	path[l] (~vsi@c-73-158-39-31.hsd1.ca.comcast.net) has joined #haskell
2016-01-14 22:36:36	sphinxo	Any ideas?
2016-01-14 22:36:47	crossroads1112	sphinxo, Yeah give me a second
2016-01-14 22:37:07	▶	steamboat (~sehrlich@pool-96-237-243-68.bstnma.fios.verizon.net) has joined #haskell
2016-01-14 22:37:22	▶	simony (~LokiSnake@li91-172.members.linode.com) has joined #haskell
2016-01-14 22:37:22	◀	simony (~LokiSnake@li91-172.members.linode.com) has quit (Changing host)
2016-01-14 22:37:22	▶	simony (~LokiSnake@unaffiliated/lokisnake) has joined #haskell
2016-01-14 22:37:28	◀	julmae (~kamak@s247.ip5.netikka.fi) has quit (Ping timeout: 250 seconds)
2016-01-14 22:37:43	dredozubov	you can probably express it with GADTs
2016-01-14 22:37:47	▶	sathish_haskell (~sathish_h@75.143.16.8) has joined #haskell
2016-01-14 22:37:56	sphinxo	dredozubov: How?
2016-01-14 22:38:14	◀	lindenk (~weechat@c-73-17-51-213.hsd1.nh.comcast.net) has quit (Read error: Connection reset by peer)
2016-01-14 22:38:47	▶	lindenk (~weechat@c-73-17-51-213.hsd1.nh.comcast.net) has joined #haskell
2016-01-14 22:38:56	◀	tehgeekmeister (~tehgeekme@207.251.103.46) has quit (Ping timeout: 276 seconds)
2016-01-14 22:39:24	dredozubov	i don't quite get what you're trying to do
2016-01-14 22:39:33	dredozubov	i may be even easier that than
2016-01-14 22:39:35	◀	srajendra (~srajendra@2403:0:506:102::5b) has quit (Read error: Connection reset by peer)
2016-01-14 22:39:37	dredozubov	it may*
2016-01-14 22:39:45	▶	gnusosa (~gnusosa@192.235.78.203) has joined #haskell
2016-01-14 22:39:45	◀	gnusosa (~gnusosa@192.235.78.203) has quit (Changing host)
2016-01-14 22:39:45	▶	gnusosa (~gnusosa@unaffiliated/gnusosa) has joined #haskell
2016-01-14 22:40:05	sphinxo	hmm ok
2016-01-14 22:40:17	dredozubov	it seems like a [(A,B)] mapping
2016-01-14 22:40:25	dredozubov	from what you're saying
2016-01-14 22:40:34	◀	marienz (~marienz@freenode/staff/marienz) has quit (Ping timeout: 604 seconds)
2016-01-14 22:40:39	dmj	type instance ToRegisterSize EAX B64
2016-01-14 22:40:48	sphinxo	wouldn't it be more [(A,[B])} ?
2016-01-14 22:40:57	dredozubov	yeah, you're right
2016-01-14 22:41:08	▶	gfixler (~gfixler@204.128.192.32) has joined #haskell
2016-01-14 22:41:17	▶	julmae (~kamak@s247.ip5.netikka.fi) has joined #haskell
2016-01-14 22:41:35	▶	mahasamoot (~mahasamoo@24.42.192.202) has joined #haskell
2016-01-14 22:41:40	dredozubov	but you can imagine that type B = [C]
2016-01-14 22:41:56	◀	teeteewhy (~teeteewhy@2001:41d0:8:67d2::1337) has quit (Ping timeout: 240 seconds)
2016-01-14 22:42:11	◀	Martiini (~Martin@83-245-239-161-nat-p.elisa-mobile.fi) has quit (Ping timeout: 276 seconds)
2016-01-14 22:42:21	dredozubov	dmj: isn't B64 dictates the size by itself?
2016-01-14 22:42:22	▶	teeteewhy (~teeteewhy@2001:41d0:8:67d2::1337) has joined #haskell
2016-01-14 22:43:02	◀	oish (~charlie@159.22.169.217.in-addr.arpa) has quit (Ping timeout: 246 seconds)
2016-01-14 22:43:40	◀	salih666 (~user@unaffiliated/r420r) has quit (Remote host closed the connection)
2016-01-14 22:44:13	dredozubov	sphinxo: http://www.stephendiehl.com/posts/monads_machine_code.html to get your creative juices going
2016-01-14 22:44:36	sphinxo	ooh
2016-01-14 22:45:05	◀	chrisdotcode (~quassel@2605:a000:e500:7c00:8187:c9b6:b089:8db9) has quit (Ping timeout: 260 seconds)
2016-01-14 22:46:15	◀	hiroakip (~hiroaki@ip4d150c8e.dynamic.kabel-deutschland.de) has quit (Ping timeout: 260 seconds)
2016-01-14 22:46:42	◀	angerman (~m@118.200.49.69) has quit (Quit: Gone)
2016-01-14 22:47:14	◀	crossroads1112 (~chad@99-32-166-252.lightspeed.iplsin.sbcglobal.net) has quit (Quit: leaving)
2016-01-14 22:47:33	▶	eb_ (~eb@90.149.139.138) has joined #haskell
2016-01-14 22:47:45	◀	chaosmasttter (~chaosmast@p54B7F8CF.dip0.t-ipconnect.de) has quit (Quit: WeeChat 1.3)
2016-01-14 22:47:51	BlackCap	There's also this: http://wall.org/~lewis/2013/10/15/asm-monad.html
2016-01-14 22:48:15	◀	eb (~eb@90.149.139.138) has quit (Ping timeout: 240 seconds)
2016-01-14 22:48:16	◀	M-radix (radixmatri@gateway/shell/matrix.org/x-xkardsvghzxmdywb) has quit (Quit: node-irc says goodbye)
2016-01-14 22:48:26	▶	lipkab (~the_new_l@host-91-147-210-58.biatv.hu) has joined #haskell
2016-01-14 22:48:27	▶	dpratt711 (~dpratt71@207.182.208.2) has joined #haskell
2016-01-14 22:48:44	◀	dmag_ (~damian@81.141.157.0) has quit (Ping timeout: 255 seconds)
2016-01-14 22:48:46	▶	marienz (~marienz@freenode/staff/marienz) has joined #haskell
2016-01-14 22:48:48	◀	sz0 (~sz0@94.54.207.190) has quit (Quit: Bye.)
2016-01-14 22:49:01	▶	conal (~textual@104.255.240.10) has joined #haskell
2016-01-14 22:49:17	▶	sepp2k (~Sepp2k@x5ce061c0.dyn.telefonica.de) has joined #haskell
2016-01-14 22:49:19	▶	mikeplus64 (~mike@unaffiliated/mikeplus64) has joined #haskell
2016-01-14 22:50:14	◀	sepp2k (~Sepp2k@x5ce061c0.dyn.telefonica.de) has quit (Read error: Connection reset by peer)
2016-01-14 22:50:35	◀	forgottenone (~forgotten@92.44.157.133) has quit (Quit: Konversation terminated!)
2016-01-14 22:51:17	▶	afcondon (~afcondon@109.76.224.121) has joined #haskell
2016-01-14 22:51:22	▶	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #haskell
2016-01-14 22:51:58	▶	mrshoe (~mrshoe@mail.davidshoemaker.me) has joined #haskell
2016-01-14 22:52:02	▶	cpup (~cpup@32.218.113.12) has joined #haskell
2016-01-14 22:52:08	◀	kaictl_work (~kaictl@unaffiliated/kaisforza) has quit (Ping timeout: 246 seconds)
2016-01-14 22:52:35	◀	dgpratt_ (~dpratt71@207.182.208.2) has quit (Ping timeout: 276 seconds)
2016-01-14 22:53:04	▶	twanvl (~twanvl@dhcp-077-250-086-217.chello.nl) has joined #haskell
2016-01-14 22:53:09	ℹ	dpratt711 is now known as dgpratt
2016-01-14 22:53:48	▶	salih666 (~user@unaffiliated/r420r) has joined #haskell
2016-01-14 22:54:07	◀	clynamen (~clynamen@93-50-191-217.ip153.fastwebnet.it) has quit (Read error: Connection reset by peer)
2016-01-14 22:54:11	◀	mizu_no_oto (~textual@c-67-189-145-156.hsd1.ma.comcast.net) has quit (Ping timeout: 264 seconds)
2016-01-14 22:54:57	▶	losingkeys (~losingkey@172.56.13.111) has joined #haskell
2016-01-14 22:55:22	▶	rikonor (~rikonor@38.104.246.166) has joined #haskell
2016-01-14 22:55:43	ℹ	ril is now known as ril[away]
2016-01-14 22:55:56	◀	Th30n (~Th30n@93-136-19-65.adsl.net.t-com.hr) has quit (Quit: leaving)
2016-01-14 22:56:24	◀	consus (~Unknown@188.162.65.17) has left #haskell
2016-01-14 22:56:45	sphinxo	I'm getting the error 'Not in scope: ‘lift’'?
2016-01-14 22:57:27	▶	jokester (~mono@unaffiliated/jokester) has joined #haskell
2016-01-14 22:57:59	ℹ	ril[away] is now known as ril
2016-01-14 22:58:18	sphinxo	well i'm an idiot, dw
2016-01-14 22:58:28	▶	u-ou (no-n@that.bitch.stole-your.pw) has joined #haskell
2016-01-14 22:58:51	▶	bos (~bos@facebook/mercurial/bos) has joined #haskell
2016-01-14 22:58:52	ℹ	u-ou is now known as Guest56043
2016-01-14 22:58:56	▶	clynamen (~clynamen@93-50-191-217.ip153.fastwebnet.it) has joined #haskell
2016-01-14 22:58:59	◀	xylen_ (~codywelsh@c-73-189-204-160.hsd1.ca.comcast.net) has quit (Ping timeout: 265 seconds)
2016-01-14 22:59:03	▶	alem0lars (alem0lars@0xcc.alem0lars.me) has joined #haskell
2016-01-14 22:59:11	▶	hiroakip (~hiroaki@p200300562C6937463EA9F4FFFE659BC4.dip0.t-ipconnect.de) has joined #haskell
2016-01-14 22:59:17	◀	ril (~ril@c-98-210-195-123.hsd1.ca.comcast.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-14 22:59:20	◀	zachk (~zsh@unaffiliated/zachk) has quit (Quit: [0..])
2016-01-14 22:59:25	◀	chrisramsey (~chrisrams@2602:306:3762:700:75b7:47cc:9101:85ec) has quit (Remote host closed the connection)
2016-01-14 22:59:26	◀	aarvar (~foewfoiew@172.76.136.233) has left #haskell
2016-01-14 22:59:33	▶	Klumben (Nsaiswatch@elmo.stole-your.pw) has joined #haskell
2016-01-14 22:59:51	▶	zachk (~zsh@unaffiliated/zachk) has joined #haskell
2016-01-14 23:00:03	▶	SolarAquarion (SolarAquar@the.feds.nullrouted.us) has joined #haskell
2016-01-14 23:01:05	▶	hackagebot (~rss2irc@li229-222.members.linode.com) has joined #haskell
2016-01-14 23:01:05	⚡	hackagebot pipes-websockets 0.1.0.0 - WebSockets in the Pipes framework.  https://hackage.haskell.org/package/pipes-websockets-0.1.0.0 (NoonSilk)
2016-01-14 23:01:05	⚡	hackagebot exp-extended 0.1.1 - floating point with extended exponent range  https://hackage.haskell.org/package/exp-extended-0.1.1 (ClaudeHeilandAllen)
2016-01-14 23:02:02	◀	rikonor (~rikonor@38.104.246.166) has quit (Remote host closed the connection)
2016-01-14 23:02:32	▶	chrisramsey (~chrisrams@99-118-32-112.lightspeed.snantx.sbcglobal.net) has joined #haskell
2016-01-14 23:02:54	◀	t7 (~chatzilla@5-179-100-38.glidedsl.com) has quit (Remote host closed the connection)
2016-01-14 23:03:12	◀	cereal_killer_ (~ernesto@179-8-245-190.fibertel.com.ar) has quit (Quit: Konversation terminated!)
2016-01-14 23:03:29	sphinxo	How can I go from integer to Word8?
2016-01-14 23:03:48	◀	path[l] (~vsi@c-73-158-39-31.hsd1.ca.comcast.net) has quit (Quit: path[l])
2016-01-14 23:04:04	sphinxo	or something like bytes :: Integral a => a -> [Word8]
2016-01-14 23:04:05	ReinH	fromIntegral
2016-01-14 23:04:10	coeus	fromIntegral
2016-01-14 23:04:20	johnw	fromIntegral
2016-01-14 23:04:26	▶	crossroads1112 (~chad@99-32-166-252.lightspeed.iplsin.sbcglobal.net) has joined #haskell
2016-01-14 23:04:36	dmj	fromIntegral
2016-01-14 23:04:37	dmj	:t (fromIntegral (2 :: Integer) :: Word8)
2016-01-14 23:04:39	lambdabot	Word8
2016-01-14 23:04:48	◀	chrisramsey (~chrisrams@99-118-32-112.lightspeed.snantx.sbcglobal.net) has quit (Remote host closed the connection)
2016-01-14 23:04:48	sphinxo	Great thanks
2016-01-14 23:04:53	coeus	do it multiple times, 4x on 32bit systems.
2016-01-14 23:04:55	ReinH	Just want to point out that the function you asked for is called fromIntegral
2016-01-14 23:05:06	ReinH	coeus: o_O what?
2016-01-14 23:05:13	◀	MarceColl (~MarceColl@2.Red-79-155-140.dynamicIP.rima-tde.net) has quit (Quit: Lost terminal)
2016-01-14 23:05:15	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-14 23:05:18	coeus	(joke)
2016-01-14 23:05:34	crossroads1112	what is the purpose of "id" in the following list-reversing fold? foldr (\x f e -> f (x :  e)) id [1,2,3] []
2016-01-14 23:05:35	sphinxo	What's it called again?
2016-01-14 23:05:42	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-14 23:05:42	◀	edon (~user@albalug/edon) has quit (Ping timeout: 260 seconds)
2016-01-14 23:06:01	▶	t7 (~chatzilla@5-179-100-38.glidedsl.com) has joined #haskell
2016-01-14 23:06:02	▶	cir0x (~Adium@dslb-178-006-199-234.178.006.pools.vodafone-ip.de) has joined #haskell
2016-01-14 23:06:09	◀	cir0x (~Adium@dslb-178-006-199-234.178.006.pools.vodafone-ip.de) has quit (Read error: Connection reset by peer)
2016-01-14 23:06:11	◀	codepete (~codepete@4.16.144.178) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-14 23:06:11	◀	csd_ (~chris@pool-108-30-122-128.nycmny.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2016-01-14 23:06:13	▶	cir0x1 (~Adium@dslb-178-006-199-234.178.006.pools.vodafone-ip.de) has joined #haskell
2016-01-14 23:06:28	ReinH	crossroads1112: it's the function to apply to the empty list
2016-01-14 23:06:58	▶	codepete (~codepete@4.16.144.178) has joined #haskell
2016-01-14 23:07:11	◀	verement (~anonymous@cpe-24-94-9-156.san.res.rr.com) has quit (Read error: Connection reset by peer)
2016-01-14 23:07:18	sphinxo	I want to return [Word8] not Word8
2016-01-14 23:07:27	▶	julmac (~kamak@s247.ip5.netikka.fi) has joined #haskell
2016-01-14 23:07:28	ReinH	@google foldl as foldr
2016-01-14 23:07:29	lambdabot	https://wiki.haskell.org/Foldl_as_foldr
2016-01-14 23:07:31	ReinH	crossroads1112: ^
2016-01-14 23:07:35	sphinxo	And some numbers won't fit in Word8?
2016-01-14 23:07:54	crossroads1112	ReinH, thank you very much
2016-01-14 23:08:02	ReinH	sphinxo: well, we answered the question you asked and then you asked a different question
2016-01-14 23:08:12	coeus	sphinxo, you want to serialize that? in that case you might want to use a lib like cereal.
2016-01-14 23:08:35	◀	hiptobecubic (~john@unaffiliated/hiptobecubic) has quit (Ping timeout: 264 seconds)
2016-01-14 23:08:37	sphinxo	no, i'm trying to encode immediate values
2016-01-14 23:08:52	ReinH	sphinxo: what specifically are you trying to do?
2016-01-14 23:08:57	▶	kaictl_work (~kaictl@unaffiliated/kaisforza) has joined #haskell
2016-01-14 23:09:11	sphinxo	Given an integer return [Word8] equivelent
2016-01-14 23:09:21	▶	hellertime (~hellertim@pool-173-48-56-241.bstnma.fios.verizon.net) has joined #haskell
2016-01-14 23:09:49	sphinxo	So it would spill over into second element of list if needed
2016-01-14 23:09:58	◀	julmae (~kamak@s247.ip5.netikka.fi) has quit (Ping timeout: 250 seconds)
2016-01-14 23:10:15	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-14 23:10:33	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-14 23:11:16	▶	coot_ (~marcin@bl5-234-92.dsl.telepac.pt) has joined #haskell
2016-01-14 23:11:32	▶	strburst (~allen@128.61.88.50) has joined #haskell
2016-01-14 23:11:56	◀	meoblast001 (~meoblast@cable-86-56-110-32.cust.telecolumbus.net) has quit (Quit: Leaving)
2016-01-14 23:12:00	ReinH	@hackage digits
2016-01-14 23:12:01	lambdabot	http://hackage.haskell.org/package/digits
2016-01-14 23:12:04	ReinH	sphinxo: ^
2016-01-14 23:12:25	▶	chrisdotcode (~quassel@cpe-65-189-217-7.neo.res.rr.com) has joined #haskell
2016-01-14 23:12:41	▶	jetho (~jetho@191.242.128.161) has joined #haskell
2016-01-14 23:13:09	ReinH	then you need to decide on an endianness
2016-01-14 23:13:29	sphinxo	I don't think that does what I need
2016-01-14 23:13:44	▶	MatthiasHu (~Thunderbi@ppp-188-174-120-91.dynamic.mnet-online.de) has joined #haskell
2016-01-14 23:13:56	◀	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-01-14 23:13:56	◀	osa1 (~omer@haskell/developer/osa1) has quit (Ping timeout: 255 seconds)
2016-01-14 23:14:20	◀	danthemy_ (~danthemyt@50.246.66.201) has quit (Remote host closed the connection)
2016-01-14 23:14:27	▶	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #haskell
2016-01-14 23:14:29	coeus	unpack . toLazyByteString . int64BE :: Int64 -> [Word8] -- https://hackage.haskell.org/package/bytestring-0.10.6.0/docs/Data-ByteString-Builder.html#v:int64BE
2016-01-14 23:14:44	◀	hiroakip (~hiroaki@p200300562C6937463EA9F4FFFE659BC4.dip0.t-ipconnect.de) has quit (Ping timeout: 250 seconds)
2016-01-14 23:14:54	◀	cpup (~cpup@32.218.113.12) has quit (Ping timeout: 256 seconds)
2016-01-14 23:15:14	sphinxo	Thank you !
2016-01-14 23:15:31	▶	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-14 23:16:00	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Remote host closed the connection)
2016-01-14 23:16:15	▶	edwinvdgraaf (~edwinvdgr@95.96.24.193) has joined #haskell
2016-01-14 23:16:16	◀	josdeha_rt (~josdehart@535299F3.cm-6-3c.dynamic.ziggo.nl) has quit (Quit: josdeha_rt)
2016-01-14 23:16:27	▶	verement (~anonymous@cpe-24-94-9-156.san.res.rr.com) has joined #haskell
2016-01-14 23:16:47	sphinxo	I probably want the little endien equivalent 
2016-01-14 23:17:03	◀	edwinvdgraaf (~edwinvdgr@95.96.24.193) has quit (Remote host closed the connection)
2016-01-14 23:17:17	◀	dsh (~daishi@ool-18bd7436.dyn.optonline.net) has quit (Read error: Connection reset by peer)
2016-01-14 23:17:20	◀	mahasamoot (~mahasamoo@24.42.192.202) has quit (Ping timeout: 246 seconds)
2016-01-14 23:17:23	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-14 23:17:46	▶	path[l] (~vsi@c-73-158-39-31.hsd1.ca.comcast.net) has joined #haskell
2016-01-14 23:18:12	ReinH	sphinxo: why not?
2016-01-14 23:18:24	ReinH	it does what you asked for, modulo an fmap fromIntegral
2016-01-14 23:18:47	ReinH	round-tripping through ByteString is a lot more complicated than divmod.
2016-01-14 23:19:00	◀	t0by (~t0by@host140-244-dynamic.244-95-r.retail.telecomitalia.it) has quit (Quit: Bye!)
2016-01-14 23:19:04	◀	fizbin (~Adium@hqp-p.bcls.lib.nj.us) has quit (Quit: Leaving.)
2016-01-14 23:19:15	◀	conal (~textual@104.255.240.10) has quit (Quit: Computer has gone to sleep.)
2016-01-14 23:19:18	▶	t0by (~t0by@host140-244-dynamic.244-95-r.retail.telecomitalia.it) has joined #haskell
2016-01-14 23:19:22	sphinxo	How would I do it using divmod?
2016-01-14 23:19:35	ReinH	the way that that package I linked does
2016-01-14 23:19:40	sphinxo	ahh ok
2016-01-14 23:19:52	▶	eb (~eb@138.90-149-139.nextgentel.com) has joined #haskell
2016-01-14 23:19:56	ReinH	or quoteRem, rather, w/e
2016-01-14 23:21:08	◀	L8D (~L8D@216.201.168.18) has quit (Ping timeout: 256 seconds)
2016-01-14 23:21:11	coeus	be aware that there exist serialization libs that can handle Int, [], Maybe etc. too -- but they fail(ed) in compatibility between 32bit and 64bit systems.
2016-01-14 23:21:19	◀	tey (~tey___@90.163.35.82) has quit (Quit: Leaving)
2016-01-14 23:21:34	◀	eb_ (~eb@90.149.139.138) has quit (Ping timeout: 260 seconds)
2016-01-14 23:22:27	zachk	can't you force your Int's to Int32 all around? 
2016-01-14 23:22:58	◀	erikd (~erikd@103.229.16.4) has quit (Ping timeout: 260 seconds)
2016-01-14 23:23:22	◀	vF3hNGxc47h8 (~androirc@177.45.176.146) has quit (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
2016-01-14 23:23:40	◀	losingkeys (~losingkey@172.56.13.111) has quit (Read error: Connection reset by peer)
2016-01-14 23:23:49	coeus	zachk, are you asking me?
2016-01-14 23:23:54	▶	yfeldblum (~yfeldblum@199.201.64.131) has joined #haskell
2016-01-14 23:24:33	◀	griotspeak (~textual@50-205-32-182-static.hfc.comcastbusiness.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-14 23:24:34	▶	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has joined #haskell
2016-01-14 23:24:42	zachk	just specify Int32 or manually coerce Int -> Int32 and you should be fine with serialization 
2016-01-14 23:24:47	◀	hellwolf (~hellwolf@85.253.102.223.cable.starman.ee) has quit (Ping timeout: 264 seconds)
2016-01-14 23:24:58	▶	Luke (~Luke@unaffiliated/luke) has joined #haskell
2016-01-14 23:25:07	coeus	serialization of [] begins with an Int that encodes the length.
2016-01-14 23:25:36	coeus	the instance was already in that lib i used. but that was >2 years ago.
2016-01-14 23:25:55	◀	danza (~francesco@151.54.17.198) has quit (Remote host closed the connection)
2016-01-14 23:26:24	◀	Jellydog (~Jellykuf@c-94-255-245-165.cust.bredband2.com) has quit (Read error: Connection reset by peer)
2016-01-14 23:26:37	coeus	not beeing able to define own serialization strategies sucks.
2016-01-14 23:26:42	▶	path[l]_ (~vsi@199.201.64.3) has joined #haskell
2016-01-14 23:26:46	◀	path[l] (~vsi@c-73-158-39-31.hsd1.ca.comcast.net) has quit (Ping timeout: 240 seconds)
2016-01-14 23:26:46	▶	danza (~francesco@151.54.17.198) has joined #haskell
2016-01-14 23:26:46	▶	Sixmsj (~Sixmsj@c-73-189-102-185.hsd1.ca.comcast.net) has joined #haskell
2016-01-14 23:26:46	ℹ	path[l]_ is now known as path[l]
2016-01-14 23:27:10	◀	Luke (~Luke@unaffiliated/luke) has quit (Max SendQ exceeded)
2016-01-14 23:27:14	ReinH	> let go 0 = Nothing; go n = Just (swap (quotRem n 256)) in reverse (unfoldr go 256)
2016-01-14 23:27:16	lambdabot	 [1,0]
2016-01-14 23:27:18	sleblanc	What is a convenient way to combine two vectors? (assuming they are of the same length) I would like to return a vector that includes the greatest value of the two elements
2016-01-14 23:27:30	▶	PizzaPortal (~PizzaPort@ip503c32de.speed.planet.nl) has joined #haskell
2016-01-14 23:27:30	▶	bvad (~bvad@50a1b03c.flatrate.dk) has joined #haskell
2016-01-14 23:27:39	▶	hiroakip (~hiroaki@ip4d150c8e.dynamic.kabel-deutschland.de) has joined #haskell
2016-01-14 23:27:48	▶	Luke (~Luke@unaffiliated/luke) has joined #haskell
2016-01-14 23:27:48	ReinH	sleblanc: I believe Vector provides a zipWith
2016-01-14 23:27:56	▶	Itkovian_ (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-14 23:28:00	sleblanc	ReinH, perfect!
2016-01-14 23:28:25	◀	plucas (~plucas@8.18.218.175) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-14 23:28:28	coeus	gaah... now it is obvious to me how to customize serialization using a simple (newtype Foo a = Foo a) to wrap everything.
2016-01-14 23:28:44	◀	sphinxo (~sphinxo@212-139-66-70.dynamic.dsl.as9105.com) has quit (Quit: WeeChat 1.3)
2016-01-14 23:28:49	▶	SiGe (~SiGe@cpe-172-91-6-207.socal.res.rr.com) has joined #haskell
2016-01-14 23:28:53	◀	simukis_ (~nagisa@78-60-58-6.static.zebra.lt) has quit (Ping timeout: 246 seconds)
2016-01-14 23:29:10	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-14 23:29:39	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-14 23:30:23	▶	plucas (~plucas@8.18.218.175) has joined #haskell
2016-01-14 23:30:25	▶	aaronlevin (~aaronlevi@37.120.66.21) has joined #haskell
2016-01-14 23:30:39	▶	Luke_ (~Luke@unaffiliated/luke) has joined #haskell
2016-01-14 23:30:44	zachk	you can make your instances of get from Binary, and I forget the other function, which serialization lib do you use? 
2016-01-14 23:30:47	▶	cpup (~cpup@32.218.113.12) has joined #haskell
2016-01-14 23:30:49	SiGe	Hey guys, have you guys faced a case where a conscious use of category theory, e.g., use of monoids, monads, etc. led to a better design in your program?  By conscious I mean that you looked at your problem and have that gotcha moment that "Aha! a monad is what I need here"
2016-01-14 23:31:04	ReinH	SiGe: yes, all the time
2016-01-14 23:31:09	johnw	SiGe: edwardk has especially had that experience
2016-01-14 23:31:10	sleblanc	SiGe, yes
2016-01-14 23:31:15	◀	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has quit (Ping timeout: 240 seconds)
2016-01-14 23:31:32	johnw	and Tekmo has written an article about it
2016-01-14 23:31:33	◀	umib0zu (~umib0zu@c-50-177-152-117.hsd1.ma.comcast.net) has left #haskell
2016-01-14 23:31:40	◀	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-01-14 23:32:04	◀	bvad (~bvad@50a1b03c.flatrate.dk) has quit (Ping timeout: 250 seconds)
2016-01-14 23:32:05	◀	Luke (~Luke@unaffiliated/luke) has quit (Read error: Connection reset by peer)
2016-01-14 23:32:06	◀	Itkovian_ (~Itkovian@178-117-76-63.access.telenet.be) has quit (Client Quit)
2016-01-14 23:32:11	▶	StyxAlso (~Android@1.129.96.76) has joined #haskell
2016-01-14 23:32:12	▶	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #haskell
2016-01-14 23:32:24	SiGe	Care to share a few examples?  my experience is mostly with imperative languages, and to me, terms like Monad/Monoid, etc. look like design patterns such as Factory, etc.  Is this a correct mapping?
2016-01-14 23:32:28	fr33domlover	SiGe, i think once you know the concepts they are just tools like in any language
2016-01-14 23:32:35	◀	Zekka (~zekka@uawifi-nat-210-69.arizona.edu) has quit (Ping timeout: 264 seconds)
2016-01-14 23:32:40	fr33domlover	except in haskell they are very rich :)
2016-01-14 23:32:41	zachk	sort of, but not really 
2016-01-14 23:32:43	johnw	SiGe: http://www.haskellforall.com/2012/08/the-category-design-pattern.html
2016-01-14 23:33:01	SiGe	@johnw thanks for the link!
2016-01-14 23:33:01	lambdabot	Not enough privileges
2016-01-14 23:33:20	◀	algae (~algae@blk-11-46-131.eastlink.ca) has quit (Quit: leaving)
2016-01-14 23:33:38	◀	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has quit (Remote host closed the connection)
2016-01-14 23:33:40	SiGe	@fr33domlover I am reading through this: http://bartoszmilewski.com/2014/12/05/categories-great-and-small/ where the guy is explaining monoids and the concept is so basic that I can't fathom how it can be useful while I am writing code.
2016-01-14 23:33:40	lambdabot	Unknown command, try @list
2016-01-14 23:34:03	▶	griotspeak (~textual@50.205.32.182) has joined #haskell
2016-01-14 23:34:11	◀	dgpratt (~dpratt71@207.182.208.2) has quit (Ping timeout: 276 seconds)
2016-01-14 23:34:22	◀	mrArkwright (~mrArkwrig@ipservice-092-217-115-129.092.217.pools.vodafone-ip.de) has quit (Remote host closed the connection)
2016-01-14 23:34:24	▶	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-14 23:34:24	◀	StyxAlso_ (~Android@CPE-110-146-141-53.knmu.knt.bigpond.net.au) has quit (Ping timeout: 272 seconds)
2016-01-14 23:34:44	zachk	have you ever had to do a lookup in a hash and it might fail with a null? and you have to chain those together with abunch of conditionals, and it's messy? 
2016-01-14 23:34:52	sleblanc	SiGe, think of the categories as a way to express things that a compiler can prove
2016-01-14 23:35:31	sleblanc	within the allowed semantics of your language
2016-01-14 23:35:42	coeus	SiGe, edwardk has especially that experience in syringes... that fly like arrows.
2016-01-14 23:35:45	SiGe	zachk: yes, I am thinking that's going to be a monad?
2016-01-14 23:35:49	zachk	in haskell you would use a Maybe a and it's a Functor that is also a Monad, and you can just chain the lookups using do notation, which looks like imperative code, and at the end you only need to check if the entire chain has suceeded or failed and there a function for doing that called maybe
2016-01-14 23:35:52	zachk	@src maybe 
2016-01-14 23:35:52	lambdabot	Source not found. :(
2016-01-14 23:35:56	zachk	:(
2016-01-14 23:35:56	◀	vili (~nick@2605:a000:ffc0:44:1da3:8295:212f:ece1) has quit (Read error: Connection reset by peer)
2016-01-14 23:35:58	▶	codafi (~textual@128.237.219.108) has joined #haskell
2016-01-14 23:36:32	SiGe	zachk: but that's not conscious use of a Monad, you just use it without thinking, right?  You didn't come up with a new Monad.
2016-01-14 23:36:48	sleblanc	For example, a Maybe monad rids you of the burden of checking for "null" references, a thing that C++/.NET/Java compilers can hardly verify at compile time without a doubt
2016-01-14 23:37:00	jle_	base features a particularly silly usage of CPP
2016-01-14 23:37:02	jle_	http://hackage.haskell.org/package/base-4.8.1.0/docs/src/Control.Concurrent.Chan.html#Chan
2016-01-14 23:37:10	▶	mgsloan (~mgsloan@174-24-251-119.tukw.qwest.net) has joined #haskell
2016-01-14 23:37:26	zachk	well that is a conscious use to a monad to me, a few years ago I used to pipe around and case match on the Just a and Nothing constructors, and I got really nasty spaghetti code from it 
2016-01-14 23:38:01	shanemikel	i'm having some trouble installing the requisites for this hello world glade example
2016-01-14 23:38:14	▶	jgt (~jgt@eee125.neoplus.adsl.tpnet.pl) has joined #haskell
2016-01-14 23:38:34	shanemikel	i haven't spent much time with cabal, but I think I have a sandbox properly setup
2016-01-14 23:38:50	shanemikel	is there a pastebin preferred here?
2016-01-14 23:39:05	SiGe	@sleblanc that makes a lot of sense to me: "think of the categories as a way to express things that a compiler can prove" so it's basically using known mathematical terms to help the compiler prove the correctness of the program? At least in the type sense?
2016-01-14 23:39:06	lambdabot	Unknown command, try @list
2016-01-14 23:39:36	shanemikel	http://susepaste.org/10911203
2016-01-14 23:39:56	SiGe	zachk: That's a well known Monad, no?  The Maybe monad, I mean.  But have you ever needed to define your own monad specific to your problem?
2016-01-14 23:40:18	▶	erikd (~erikd@103.229.16.4) has joined #haskell
2016-01-14 23:40:42	zachk	shanemikel lpaste.net 
2016-01-14 23:40:57	SiGe	Hmm, maybe rephrasing my question, does knowing category theory make you a better programmer? does it help you write cleaner code?
2016-01-14 23:40:58	zachk	not yet, usually it turns out to be a monad someone already has discovered! 
2016-01-14 23:41:10	shanemikel	is there a script to use lpaste from shell?
2016-01-14 23:41:19	▶	mac10688 (~mac10688@c-69-180-251-120.hsd1.tn.comcast.net) has joined #haskell
2016-01-14 23:41:34	zachk	you can start connecting haskell functions like legos and see familar patterns between disparate things 
2016-01-14 23:41:35	SiGe	@zachk right, that's how I feel, too.  There are a few well known monads and most problems can be solved through them, so what's the point of reading up on category theory.
2016-01-14 23:41:35	lambdabot	Unknown command, try @list
2016-01-14 23:41:44	▶	PatrickRobotham (uid18270@gateway/web/irccloud.com/x-rsrxbozmxferkaaz) has joined #haskell
2016-01-14 23:41:46	glguy	SiGe: @ is for bot commands
2016-01-14 23:41:53	SiGe	Ow, crap.
2016-01-14 23:42:03	zachk	sige, then don't and just use the one's already invented 
2016-01-14 23:42:23	zachk	the hash in haskell would be Data.Map 
2016-01-14 23:42:33	SiGe	Thanks for the heads up, glguy.
2016-01-14 23:42:35	◀	jrslepak (~jrslepak@kungfu.ccs.neu.edu) has quit (Quit: leaving)
2016-01-14 23:42:54	coeus	SiGe, there is that Control.Arrow lib, too.
2016-01-14 23:42:56	zachk	the list monad lets you easily brute force combinatorial problems if you use things like guard from Control.Monad 
2016-01-14 23:42:57	shanemikel	http://lpaste.net/2354473966128594944
2016-01-14 23:43:02	▶	jrslepak (~jrslepak@kungfu.ccs.neu.edu) has joined #haskell
2016-01-14 23:43:05	sleblanc	Day to day, you will usually end up writing class instances for your types
2016-01-14 23:43:05	◀	t0by (~t0by@host140-244-dynamic.244-95-r.retail.telecomitalia.it) has quit (Quit: Bye!)
2016-01-14 23:43:25	zachk	if you want better search of infinite space and back tracking I think you need the Logic monad with some adapters 
2016-01-14 23:43:49	zachk	if you want pointer's into deeply nested data structures, cabal install lens and look into those 
2016-01-14 23:44:15	zachk	erlang/elixir style actors with message passing? cloud haskell 
2016-01-14 23:45:07	sleblanc	SiGe, monads are just a part of the brilliant features that languages like Haskell bring; there's algebraic types too
2016-01-14 23:45:22	▶	ril (~ril@199-230-11-50.PUBLIC.monkeybrains.net) has joined #haskell
2016-01-14 23:45:27	zachk	and they just shove all that goodness in cloud haskell into a Process monad which works almost just like IO, you just have to liftIO the IO monad's into the Process Monad, and I just alias like this io = liftIO , then do like io $ putStrLn "lifted string output" 
2016-01-14 23:46:16	zachk	you can make your own datatypes and make them instances of various typeclasses, and with a few LANGUAGE pragmas at the top of your source for GHC you can autoderive some of those instances 
2016-01-14 23:46:22	◀	rardiol (~user@177.52.229.102) has quit (Ping timeout: 250 seconds)
2016-01-14 23:46:37	◀	afcondon (~afcondon@109.76.224.121) has quit (Remote host closed the connection)
2016-01-14 23:46:45	◀	baweaver (~baweaver@173.230.196.25) has quit (Remote host closed the connection)
2016-01-14 23:46:48	zachk	IO is very special and magical though, check out fmap over IO for starters 
2016-01-14 23:46:58	zachk	@src (>=>) 
2016-01-14 23:46:58	lambdabot	Source not found. stty: unknown mode: doofus
2016-01-14 23:47:05	⚡	zachk frowns 
2016-01-14 23:47:11	▶	Jesin (~Jesin@wsip-98-175-164-85.dc.dc.cox.net) has joined #haskell
2016-01-14 23:47:36	exio4	@type \f g x -> f x >>= g
2016-01-14 23:47:38	lambdabot	Monad m => (r -> m a) -> (a -> m b) -> r -> m b
2016-01-14 23:47:55	zachk	if you use that operator for monad composition, it work's almost just like (.) and the return becomes the id (identity) function 
2016-01-14 23:48:04	coeus	SiGe, you should at least read up on cat theory until you understand that a Monad is a Monoid on EndoFunctors.
2016-01-14 23:48:13	SiGe	sleblanc: do you have any suggestions on where can I read up on the theory of these stuff?  I am mostly interested in learning how to think in a functional manner, and be able to defend my reasoning on why I chose to go a specific path when writing the code.
2016-01-14 23:48:14	zachk	which to me, makes the monad law's easier to understand, in how a monad is a monoid 
2016-01-14 23:48:35	◀	Luke_ (~Luke@unaffiliated/luke) has quit (Quit: sleep)
2016-01-14 23:48:46	▶	MrDetonia (~MrDetonia@unaffiliated/mrdetonia) has joined #haskell
2016-01-14 23:48:51	zachk	are you use to mapping anonymous functions over lists? and how about not mutating state to make a working program? 
2016-01-14 23:49:04	coeus	use google... or i could just write a small introduction....
2016-01-14 23:49:13	zachk	or use lambdabot 
2016-01-14 23:49:34	◀	chrisbarrett (~chrisb@121.98.103.14) has quit (Ping timeout: 260 seconds)
2016-01-14 23:49:42	▶	xylen_ (~codywelsh@c-73-189-204-160.hsd1.ca.comcast.net) has joined #haskell
2016-01-14 23:49:47	zachk	> fmap (\(x,y)->x+y) [(1,2),(3,4),(5,6)] 
2016-01-14 23:49:49	lambdabot	 [3,7,11]
2016-01-14 23:49:54	▶	Tesseraction (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2016-01-14 23:49:56	zachk	there is also #haskell-beginners 
2016-01-14 23:49:59	▶	afcondon (~afcondon@109.76.224.121) has joined #haskell
2016-01-14 23:50:03	coeus	imagine a white board with named small circles as Sets and named arrows between them as Functions.
2016-01-14 23:50:04	▶	lynnard (~lingnan@cpc1-walt13-2-0-cust402.13-2.cable.virginm.net) has joined #haskell
2016-01-14 23:50:09	zachk	but this channel is also a great place for beginners 
2016-01-14 23:50:26	◀	StyxAlso (~Android@1.129.96.76) has quit (Ping timeout: 240 seconds)
2016-01-14 23:50:34	◀	wolfcub (~henrique_@177.55.195.209) has quit (Ping timeout: 245 seconds)
2016-01-14 23:50:38	zachk	shouldn't the Sets be Types ? 
2016-01-14 23:50:39	coeus	the small circles are called Objects and the arrows Arrows.
2016-01-14 23:50:46	◀	kurt11 (~Adium@207.191.34.198) has quit (Quit: Leaving.)
2016-01-14 23:51:00	sleblanc	Sige, it's kind of a hard read at first, but Steve Awodey's Category Theory is a good read
2016-01-14 23:51:01	▶	Luke (~Luke@unaffiliated/luke) has joined #haskell
2016-01-14 23:51:06	coeus	could be Types, like in haskell, but could be apples, too.
2016-01-14 23:51:07	▶	bjz (~bjz@pa49-183-194-13.pa.vic.optusnet.com.au) has joined #haskell
2016-01-14 23:51:11	zachk	look into folding on lists, and then make your own tree data type, and make it an instance of Functor, and make a fold for the tree 
2016-01-14 23:51:20	zachk	well agda use's Set 
2016-01-14 23:51:26	coeus	let's call them Objects because they could be anything.
2016-01-14 23:51:31	sleblanc	SiGe, you might get more insight at first, simply by loading the GHC REPL (ghci) and inspecting various types and values (:t)
2016-01-14 23:51:41	zachk	then you confuse the object oriented programmers! 
2016-01-14 23:51:47	SiGe	coeus: I see, ok.  So objects themselves can contain elements? like sets?
2016-01-14 23:52:04	monochrom	SiGe: Richard Bird's "Thinking Functionally with Haskell" teaches how to think functionally.
2016-01-14 23:52:07	◀	cir0x1 (~Adium@dslb-178-006-199-234.178.006.pools.vodafone-ip.de) has quit (Quit: Leaving.)
2016-01-14 23:52:31	shanemikel	Set is a specific kind of Object
2016-01-14 23:52:32	sleblanc	SiGe, basic syntax includes "data" and "class". Once you understand algebraic types, you'll understand various examples of class instances. Little by little
2016-01-14 23:52:36	▶	fizbin (~Adium@70.215.74.39) has joined #haskell
2016-01-14 23:52:39	coeus	could, depending on what category we are talking about. the category of HaskellTypes and HaskellFunctions or the Sets and Functions.
2016-01-14 23:52:54	SiGe	sleblanc, monochrom: thanks!  I'll take a look at those books!
2016-01-14 23:53:07	◀	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-14 23:53:18	▶	mmhat (~mmh@x5f7584e2.dyn.telefonica.de) has joined #haskell
2016-01-14 23:53:23	▶	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has joined #haskell
2016-01-14 23:53:54	coeus	...or states of an apple and the actions to transform them.
2016-01-14 23:53:56	▶	Zekka (~zekka@wsip-70-184-90-138.ph.ph.cox.net) has joined #haskell
2016-01-14 23:54:02	◀	erikd (~erikd@103.229.16.4) has quit (Ping timeout: 272 seconds)
2016-01-14 23:54:07	zachk	if you want Set's of Set you have to move to a higher Set_1 from Set_0 or we call them kind's in haskell 
2016-01-14 23:54:12	coeus	or locations and routes.
2016-01-14 23:54:15	◀	enthropy (~aavogt@d157-103-21.home4.cgocable.net) has quit (Quit: WeeChat 0.3.7)
2016-01-14 23:54:25	coeus	yep.
2016-01-14 23:54:32	SiGe	location == Object, routes == arrows?
2016-01-14 23:54:39	zachk	try to think of a set that contains all set's that do not contain themselves... does it contain itself? 
2016-01-14 23:54:44	coeus	yep.
2016-01-14 23:54:52	zachk	they are like graph's from graph theory, sort of 
2016-01-14 23:54:57	zachk	but usually simpler 
2016-01-14 23:55:00	◀	griotspeak (~textual@50.205.32.182) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-14 23:55:14	▶	kurt11 (~Adium@207.191.34.198) has joined #haskell
2016-01-14 23:55:54	▶	rekahsoft (~rekahsoft@24-246-26-246.cable.teksavvy.com) has joined #haskell
2016-01-14 23:55:57	coeus	objects= those named points on the white board, arrows= those arrows that go from object to object.
2016-01-14 23:56:25	coeus	it is called a cathegory iff you have an operator to combine the arrows.
2016-01-14 23:56:37	SiGe	@coeus makes sense.  So in a sense, we are not interested in the definition of the objects or arrows, but rather in the way they are connected.  Hmmm
2016-01-14 23:56:42	lambdabot	 Sequence not found.
2016-01-14 23:56:46	coeus	(that is an if with two f)
2016-01-14 23:56:49	zachk	you also need the associative law to hold and a right and left identity, iirc 
2016-01-14 23:56:53	◀	rasen (~rasen@impressed.contract.volia.net) has quit (Quit: Lost terminal)
2016-01-14 23:57:13	coeus	exactly.
2016-01-14 23:57:48	▶	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined #haskell
2016-01-14 23:57:53	▶	Heasummn (~Heasummn@c-73-51-87-243.hsd1.il.comcast.net) has joined #haskell
2016-01-14 23:57:56	▶	cir0x (~Adium@dslb-178-006-199-234.178.006.pools.vodafone-ip.de) has joined #haskell
2016-01-14 23:58:17	coeus	now consider the Functor: it is a transformation from one category to another.
2016-01-14 23:58:17	◀	nomeata (~jojo@nomeata.de) has quit (Ping timeout: 246 seconds)
2016-01-14 23:58:26	◀	micmus (~micmus@088156129087.dynamic-ww-1.vectranet.pl) has quit (Quit: Leaving)
2016-01-14 23:58:52	coeus	that is: it maps each object to an object in the new category, and each arrow to an arrow in the new.
2016-01-14 23:58:54	ℹ	kipras is now known as kipras`away
2016-01-14 23:59:06	▶	Zekka|Sigfig (~zekka@wsip-70-184-90-138.ph.ph.cox.net) has joined #haskell
2016-01-14 23:59:14	▶	osa1 (~omer@2601:801:1:4a07:2ab2:bdff:fedf:fa66) has joined #haskell
2016-01-14 23:59:14	◀	osa1 (~omer@2601:801:1:4a07:2ab2:bdff:fedf:fa66) has quit (Changing host)
2016-01-14 23:59:14	▶	osa1 (~omer@haskell/developer/osa1) has joined #haskell
2016-01-14 23:59:44	▶	griotspeak (~textual@50-205-32-182-static.hfc.comcastbusiness.net) has joined #haskell
2016-01-14 23:59:49	shanemikel	anybody take a look at that paste?
2016-01-14 23:59:51	coeus	it is called a functor iff the arrows and objects keep their relative connections.
2016-01-15 00:00:00	◀	plucas (~plucas@8.18.218.175) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-15 00:00:03	shanemikel	http://lpaste.net/2354473966128594944
2016-01-15 00:00:34	coeus	it is still o.k. when multiple objects map to the same new object.
2016-01-15 00:00:38	◀	silver (~silver@93.85.47.56) has quit (Quit: >>=)
2016-01-15 00:00:41	SiGe	I see, ok, so um, the topologies look the same?  But isn't that also a category by itself?  with the arrow being the functor and the objects being the two categories?
2016-01-15 00:00:46	◀	mjs2600 (~mjs2600@rrcs-98-101-134-254.midsouth.biz.rr.com) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-15 00:01:00	coeus	YES!! :)
2016-01-15 00:01:34	sleblanc	shanemikel, seems like SetupWrapper.hs in Glib imports two functions that clash
2016-01-15 00:01:49	◀	bjz (~bjz@pa49-183-194-13.pa.vic.optusnet.com.au) has quit (Ping timeout: 265 seconds)
2016-01-15 00:01:57	▶	ype (~ype@cpc45-slam6-2-0-cust434.2-4.cable.virginm.net) has joined #haskell
2016-01-15 00:02:00	sleblanc	shanemikel, unless you are willing to build from a fork, you can't really fix this yourself.
2016-01-15 00:02:06	coeus	a transformation from one functor to another is called a "natural transformation".
2016-01-15 00:02:06	▶	plucas (~plucas@8.18.218.175) has joined #haskell
2016-01-15 00:02:32	shanemikel	yeah,  okay that's what I thought.. thanks
2016-01-15 00:02:32	▶	usershell (~usershell@41.136.93.208) has joined #haskell
2016-01-15 00:02:38	◀	fizbin (~Adium@70.215.74.39) has quit (Quit: Leaving.)
2016-01-15 00:02:40	shanemikel	off to file a bug, then
2016-01-15 00:02:46	shanemikel	or maybe I'll try the stack version
2016-01-15 00:03:07	sleblanc	shanemikel, that's a consequence of not importing modules as qualified, or not specifying a list of things you wish to include from the module; if one of the modules adds a function that clashes with another module, your module will not compile anymore
2016-01-15 00:03:12	coeus	"endo-" is the prefix for something that maps from one thing into itself, like "type EndoFunction a = a->a"
2016-01-15 00:03:28	▶	oisdk_ (~oisdk_@95.45.70.25) has joined #haskell
2016-01-15 00:03:37	▶	baweaver (~baweaver@173.230.196.25) has joined #haskell
2016-01-15 00:03:39	◀	usershell (~usershell@41.136.93.208) has quit (Read error: Connection reset by peer)
2016-01-15 00:03:54	SiGe	coeus: Ah, I see! so like the transformations of a rubic(k?) cube?
2016-01-15 00:03:59	▶	usershell (~usershell@41.136.93.208) has joined #haskell
2016-01-15 00:04:03	sleblanc	shanemikel, you can possibly restrict the version of the package that provides Distribution.Simple.Utils to the most recent that does not have the "die" version
2016-01-15 00:04:17	▶	chrisramsey (~chrisrams@99-118-32-112.lightspeed.snantx.sbcglobal.net) has joined #haskell
2016-01-15 00:04:22	sleblanc	it's a hackish workaround but if that version is not too old it might work ok for you
2016-01-15 00:04:42	coeus	now, there are endofunctors. the haskell type class "Functor" is an EndoFunctor, because it maps from arrows between haskell types  to arrows between a subset of haskell types.
2016-01-15 00:06:01	⚡	hackagebot haskell-updater 1.2.10 - Rebuild Haskell dependencies in Gentoo  https://hackage.haskell.org/package/haskell-updater-1.2.10 (SergeiTrofimovich)
2016-01-15 00:06:13	coeus	no.. or maybe. it is just called "natural transformation", which is a (functor on (the category of (categories and functors)))
2016-01-15 00:06:42	SiGe	I see.
2016-01-15 00:06:58	▶	erikd (~erikd@103.229.16.4) has joined #haskell
2016-01-15 00:07:54	▶	wennergr_ (~textual@EARNEST-OPE.bar1.SanFrancisco1.Level3.net) has joined #haskell
2016-01-15 00:08:03	coeus	assuming you have a function f, and you can write y=f(x). assuming f is an endofunction, you can write
2016-01-15 00:08:03	SiGe	I can't think of an immediate example where a functor would be useful.  The definition should say how the objects are mapped and how the arrows are mapped, correct?
2016-01-15 00:08:23	coeus	y=f(f(f(x))) = (f . f . f)(x)
2016-01-15 00:08:35	◀	grouzen (~grouzen@diagonal-interview.volia.net) has quit (Ping timeout: 240 seconds)
2016-01-15 00:08:39	codedmart	Can I use lts stack but have one or two packages from nightly/newer?
2016-01-15 00:08:51	◀	cir0x (~Adium@dslb-178-006-199-234.178.006.pools.vodafone-ip.de) has quit (Quit: Leaving.)
2016-01-15 00:09:02	coeus	do you know the Functor in haskell?
2016-01-15 00:09:06	coeus	fmap?
2016-01-15 00:09:17	◀	usershell (~usershell@41.136.93.208) has quit (Ping timeout: 276 seconds)
2016-01-15 00:09:26	◀	wennergr_ (~textual@EARNEST-OPE.bar1.SanFrancisco1.Level3.net) has quit (Client Quit)
2016-01-15 00:09:30	◀	chrisramsey (~chrisrams@99-118-32-112.lightspeed.snantx.sbcglobal.net) has quit (Remote host closed the connection)
2016-01-15 00:09:35	shanemikel	okay, well It looks like the package providing that is the Cabal package..
2016-01-15 00:09:42	SiGe	coeus: unfortunately, no.  That's part of the definition of Monad, but I am familiar with haskell just enough to barely read it.  Haven't done any actual programming in it, yet.
2016-01-15 00:10:06	shanemikel	so I think it that isn't gonna work
2016-01-15 00:10:06	coeus	do you know data Maybe?
2016-01-15 00:10:08	sleblanc	shanemikel, yeah, scratch that, it seems that since the oldest version on hackage cabal has always exported a function named "die"
2016-01-15 00:10:26	SiGe	Yes.
2016-01-15 00:10:38	◀	wennergr (~textual@EARNEST-OPE.bar1.SanFrancisco1.Level3.net) has quit (Ping timeout: 250 seconds)
2016-01-15 00:10:41	◀	coot_ (~marcin@bl5-234-92.dsl.telepac.pt) has quit (Quit: coot_)
2016-01-15 00:10:48	▶	Ygg (~Ygg@ppp-seco21th2-46-193-173-113.wb.wifirst.net) has joined #haskell
2016-01-15 00:10:53	◀	takuan (~takuan@d8d86bfc6.access.telenet.be) has quit (Ping timeout: 246 seconds)
2016-01-15 00:10:54	shanemikel	so, it took a function named "die" to tell me that glade is dead
2016-01-15 00:10:56	shanemikel	:)
2016-01-15 00:11:21	◀	griotspeak (~textual@50-205-32-182-static.hfc.comcastbusiness.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-15 00:11:24	shanemikel	maybe I'm looking for something else.. is there another package that provides Graphics.UI.Gtk.Glade ?
2016-01-15 00:11:30	coeus	the type of fmap :: (Functor f) => (a->b) -> (f a -> f b)
2016-01-15 00:11:34	mgsloan	codedmart: Yeah, add the package versions as "extra-deps"
2016-01-15 00:11:53	◀	mmhat (~mmh@x5f7584e2.dyn.telefonica.de) has quit (Ping timeout: 276 seconds)
2016-01-15 00:11:55	▶	wennergr (~textual@EARNEST-OPE.bar1.SanFrancisco1.Level3.net) has joined #haskell
2016-01-15 00:12:09	coeus	where Maybe is a Functor, so...  fmap :: (a->b) -> (Maybe a->Maybe b)
2016-01-15 00:12:45	◀	afcondon (~afcondon@109.76.224.121) has quit (Remote host closed the connection)
2016-01-15 00:12:48	sleblanc	shanemikel, the gtk3 should provide this
2016-01-15 00:13:18	◀	uncle-j_j (~unclechu@95.153.133.247) has quit (Quit: Leaving.)
2016-01-15 00:13:39	sleblanc	shanemikel, but it's in Graphics.UI.Gtk.Builder
2016-01-15 00:13:41	sleblanc	https://hackage.haskell.org/package/gtk3-0.14.2/docs/Graphics-UI-Gtk-Builder.html
2016-01-15 00:13:51	coeus	the part before the "=>" is some sort of implicit parameter (derived by the compiler) that contains the correct fmap function that will be used. (the instance of that class)
2016-01-15 00:14:56	SiGe	coeus: I see, but isn't this case just mapping the arrows?  a "function" from a -> b is mapped to a function from "Maybe a" -> "Maybe b", am I reading it correctly?  What about mapping the objects?
2016-01-15 00:15:19	shanemikel	okay, I see.. so I'm just using a really old tutorial
2016-01-15 00:15:26	coeus	so, you can read on all the given instances of the Functor class in ghci like this:  ":i Functor"
2016-01-15 00:15:32	▶	fizbin (~Adium@39.sub-70-215-74.myvzw.com) has joined #haskell
2016-01-15 00:15:33	shanemikel	thanks a bunch
2016-01-15 00:15:34	◀	strburst (~allen@128.61.88.50) has quit (Ping timeout: 272 seconds)
2016-01-15 00:15:51	SiGe	Thanks.  That's very useful!
2016-01-15 00:15:54	coeus	SiGe, you are right.
2016-01-15 00:15:55	sleblanc	shanemikel, welcome!
2016-01-15 00:16:05	shanemikel	Hackage deprecation feature? +1
2016-01-15 00:16:17	◀	eis (~eis@64.201.244.6) has quit (Disconnected by services)
2016-01-15 00:16:18	coeus	the objects are the Types, not the values.
2016-01-15 00:16:33	◀	suppi (~suppi@unaffiliated/suppi) has quit (Quit: Leaving)
2016-01-15 00:16:46	▶	eis__ (~eis@64.201.244.6) has joined #haskell
2016-01-15 00:16:56	maerwald	shanemikel: are you using the glade package?
2016-01-15 00:17:05	◀	JagaJaga (~JagaJaga@178.62.202.50) has quit (Ping timeout: 276 seconds)
2016-01-15 00:17:08	sleblanc	shanemikel, the glade package on hackage says to use gtk instead ;-) https://hackage.haskell.org/package/glade
2016-01-15 00:17:14	maerwald	exactly
2016-01-15 00:17:16	▶	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2016-01-15 00:17:30	coeus	so, they match all types "a" and "b" in the left category, and they are mapped to "f a" and "f b" in the right category.
2016-01-15 00:18:00	◀	xylen_ (~codywelsh@c-73-189-204-160.hsd1.ca.comcast.net) has quit (Quit: xylen_)
2016-01-15 00:18:17	sleblanc	Although I have no idea why there is a gtk and a gtk3 package; they look identical
2016-01-15 00:18:40	SiGe	I see.  Do we need another function to map the types?  I can't see an implicit way of doing it, i.e., going from type (a) to (f a)
2016-01-15 00:19:25	ReinH	SiGe: f maps objects to objects
2016-01-15 00:19:31	ReinH	:k Maybe
2016-01-15 00:19:33	lambdabot	* -> *
2016-01-15 00:19:37	ReinH	Maybe maps types to types
2016-01-15 00:19:47	◀	jomg (~jomg@dslc-082-083-170-154.pools.arcor-ip.net) has quit (Quit: Leaving)
2016-01-15 00:20:24	◀	zoku (kaizoku@unaffiliated/kaizoku) has left #haskell
2016-01-15 00:20:35	◀	Itkovian (~Itkovian@178-117-76-63.access.telenet.be) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-15 00:20:46	▶	zcourts (~zcourts@cpc5-croy18-2-0-cust555.croy.cable.virginm.net) has joined #haskell
2016-01-15 00:21:03	ReinH	iow, f maps a to f a
2016-01-15 00:21:18	▶	mmhat (~mmh@x5f7584e2.dyn.telefonica.de) has joined #haskell
2016-01-15 00:21:19	shanemikel	okay, so I'm pretty confused
2016-01-15 00:21:23	▶	wolfcub (~henrique_@177.55.195.209) has joined #haskell
2016-01-15 00:21:30	shanemikel	what's the difference between gtk and gtk2hs?
2016-01-15 00:21:34	coeus	SiGe, there is the tricky part where your usual view of functions can confuse you: fmap needs to map all types and all functions, not the values of types nor a few functions.
2016-01-15 00:21:40	coeus	the types are the objects.
2016-01-15 00:21:48	ReinH	fmap does not map types
2016-01-15 00:21:53	ReinH	the type constructor maps types
2016-01-15 00:21:56	ReinH	fmap maps functions
2016-01-15 00:22:30	zachk	gtk is a widget/gui library and cabal install gtk2hs-build-tools will give you the build tools for gtk 
2016-01-15 00:22:45	coeus	ReinH, i think you misunderstood something.
2016-01-15 00:22:51	zachk	for haskell at least, you still need the gtk-dev dependency libraries for your OS 
2016-01-15 00:22:54	▶	mjs2600 (~mjs2600@rrcs-98-101-134-254.midsouth.biz.rr.com) has joined #haskell
2016-01-15 00:22:56	ReinH	coeus: I'm just reading what you wrote.
2016-01-15 00:23:03	ReinH	"fmap needs to map all types"
2016-01-15 00:23:05	ReinH	fmap does not map types
2016-01-15 00:23:25	coeus	ReinH, you read out of context.
2016-01-15 00:23:39	ReinH	There is no context in which fmap maps types.
2016-01-15 00:23:42	sleblanc	shanemikel, I am not 100% confident, but I think gtk2hs is the project. A Haskell program that generates many bindings to Gtk. "gtk" (and gtk3) are Hackage modules generated with gtk2hs
2016-01-15 00:24:53	coeus	ReinH, that context is called category theory, or the context in the sense of the toppic of our current chat.
2016-01-15 00:25:03	shanemikel	okay, so unless I'm hacking on the bindings, I should only need the "gtk" or "gkt3" packages.. so gtk2hs is a metaprogramming project
2016-01-15 00:25:06	▶	mahasamoot (~mahasamoo@24.42.192.202) has joined #haskell
2016-01-15 00:25:11	sleblanc	shanemikel, in your case you should ignore gtk2hs
2016-01-15 00:25:16	sleblanc	shanemikel, yup, exactly
2016-01-15 00:25:20	ReinH	coeus: I know what category theory is. It remains true that fmap does not map types
2016-01-15 00:25:25	ReinH	fmap does not operate on types at all
2016-01-15 00:25:28	ReinH	fmap operates on values
2016-01-15 00:26:02	sleblanc	shanemikel, it's also the name of their GitHub group: https://github.com/gtk2hs
2016-01-15 00:26:19	▶	zcourts_ (~zcourts@94.173.214.44) has joined #haskell
2016-01-15 00:26:20	◀	lipkab (~the_new_l@host-91-147-210-58.biatv.hu) has quit (Quit: Leaving)
2016-01-15 00:26:24	coeus	ReinH, read the type of fmap. that type does not operate on values but types in the sense of a functor.
2016-01-15 00:26:29	▶	cir0x (~Adium@dslb-178-006-199-234.178.006.pools.vodafone-ip.de) has joined #haskell
2016-01-15 00:26:32	◀	cir0x (~Adium@dslb-178-006-199-234.178.006.pools.vodafone-ip.de) has quit (Max SendQ exceeded)
2016-01-15 00:26:44	▶	cir0x (~Adium@dslb-178-006-199-234.178.006.pools.vodafone-ip.de) has joined #haskell
2016-01-15 00:26:59	coeus	maybe i should say maps instead of operates?
2016-01-15 00:27:07	◀	baweaver (~baweaver@173.230.196.25) has quit (Remote host closed the connection)
2016-01-15 00:27:18	ReinH	I know what the type of fmap is.
2016-01-15 00:27:29	ReinH	fmap maps functions to functions, e.g., arrows to arrows.
2016-01-15 00:27:42	ReinH	It is the arrow mapping part of a functor, it is not also the object mapping part.
2016-01-15 00:27:57	ReinH	the object mapping is the type constructor f
2016-01-15 00:28:02	coeus	ReinH, if you do not understand what i'm talking about, then please do not assume that i'm wrong.
2016-01-15 00:28:48	▶	bvad (~bvad@50a1b03c.flatrate.dk) has joined #haskell
2016-01-15 00:29:26	◀	zcourts (~zcourts@cpc5-croy18-2-0-cust555.croy.cable.virginm.net) has quit (Ping timeout: 276 seconds)
2016-01-15 00:29:26	◀	dmj (~user@c-50-158-126-110.hsd1.il.comcast.net) has quit (Ping timeout: 276 seconds)
2016-01-15 00:29:28	coeus	that's what you did mean with type constructor...
2016-01-15 00:29:42	◀	aaronlevin (~aaronlevi@37.120.66.21) has quit (Ping timeout: 260 seconds)
2016-01-15 00:29:49	coeus	that's the part of the fmap i meant.
2016-01-15 00:29:59	◀	dwins (~dwins@c-73-200-135-248.hsd1.va.comcast.net) has quit (Remote host closed the connection)
2016-01-15 00:30:12	shanemikel	well, that's disheartening.. one of my biggest motivations for learning haskell was my frustration that other languages don't seem to be expressive enough to obsolete the practice of metaprogramming
2016-01-15 00:30:18	◀	kaictl_work (~kaictl@unaffiliated/kaisforza) has quit (Quit: WeeChat 1.3)
2016-01-15 00:30:59	▶	Tertain (~tertain@190.131.155.156) has joined #haskell
2016-01-15 00:31:08	SiGe	coeus: can you elaborate a bit on how fmap does "map all types and all functions, not the values of types nor a few functions" please?
2016-01-15 00:31:27	◀	fizruk_ (~anonymous@128-68-140-96.broadband.corbina.ru) has quit (Quit: fizruk_)
2016-01-15 00:31:32	Zekka|Sigfig	shanemikel: What would you expect Haskell to do in this case?
2016-01-15 00:31:33	coeus	anyway, to me f is not a type constructor but a type variable that contains a type constructor.
2016-01-15 00:31:38	MarcelineVQ	shanemikel: Unless you're writing assembly for a specific processor, it's all metaprogramming :>
2016-01-15 00:31:47	zachk	@type fmap id
2016-01-15 00:31:48	lambdabot	Functor f => f b -> f b
2016-01-15 00:31:54	zachk	:-/ 
2016-01-15 00:32:01	shanemikel	I mean metaprogramming a language within itself
2016-01-15 00:32:07	ReinH	SiGe: your question is about how the Functor typeclass is a functor in the category theoretical sense, right?
2016-01-15 00:32:22	shanemikel	but maybe that's unfair, i've never written bindings, so I don't know what they look like
2016-01-15 00:32:34	shanemikel	may very well be the exception
2016-01-15 00:32:46	coeus	SiGe, fmap as a haskell function maps functions. in the type of fmap there is that little f, which maps from the type (a) to the type (f a).
2016-01-15 00:32:56	◀	bvad (~bvad@50a1b03c.flatrate.dk) has quit (Ping timeout: 246 seconds)
2016-01-15 00:33:21	shanemikel	to elaborate further.. I mean specifically code generation (not the more flexible definition)
2016-01-15 00:33:31	▶	conal (~textual@104.255.240.10) has joined #haskell
2016-01-15 00:33:35	◀	dcoutts (~duncan@unaffiliated/dcoutts) has quit (Ping timeout: 260 seconds)
2016-01-15 00:33:49	◀	plucas (~plucas@8.18.218.175) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-15 00:34:15	SiGe	ReinH: coeus was helping me get a quick head start on category theory up until Monads and Endo-functors.  Maybe came up as an example of a functor.
2016-01-15 00:34:23	▶	wswiss (18befaa3@gateway/web/freenode/ip.24.190.250.163) has joined #haskell
2016-01-15 00:35:02	▶	cleamoon (~cleamoon@c213-89-124-61.bredband.comhem.se) has joined #haskell
2016-01-15 00:35:22	▶	baweaver (~baweaver@2601:644:8280:b3c:851f:80f2:768a:f5e1) has joined #haskell
2016-01-15 00:35:29	coeus	so, in that sense, you have all things you need to be defined for your Functor with a proper implementation of fmap.
2016-01-15 00:36:03	Zekka|Sigfig	shanemikel: Haskell doesn’t do anything *that* exciting to avoid code generation, although it can often infer how an operation should work using typeclass instances
2016-01-15 00:36:08	◀	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Quit: Leaving...)
2016-01-15 00:36:36	Zekka|Sigfig	(e.g. if you have a stack of monad transformers, each one says “if you already have the monad operations for everyone under me, here is how you get the monad operations for each one *including* me”)
2016-01-15 00:36:52	SiGe	coeus: Aaaaa! I think I get it now! (hopefully), so fmap is the arrow, f is the object transformer?  So everything is defined.
2016-01-15 00:37:02	coeus	and because you can write i.e. (fmap . fmap . fmap)(g::a->b)::[[[a]]]->[[[b]]] , fmap is actually an endo-functor.
2016-01-15 00:37:13	coeus	yes.
2016-01-15 00:37:14	ReinH	SiGe: yes, each instance of Functor is a type constructor, e.g., Maybe, that maps types to types
2016-01-15 00:37:20	zachk	all Monads in ghc are also Functor's 
2016-01-15 00:37:21	Zekka|Sigfig	Haskell doesn’t try very hard to enable stuff like introspecting over existing code to generate new code — there are constructions like free monads designed to enable that sort of thing, but they’re *not* part of the language, nor particularly Haskell-specific
2016-01-15 00:38:00	ReinH	SiGe: so Maybe is a functor from Hask to Hask where the object mapping is the Maybe type constructor itself and the arrow mapping is fmap.
2016-01-15 00:38:20	Zekka|Sigfig	shanemikel: Other than that Haskell provides compile-time ast-generation support similar to that in lisp, etc — except that Haskell’s ast representation is much more complicated to try to eliminate some obvious invalid ASTs
2016-01-15 00:38:24	Zekka|Sigfig	(it’s notj ust a list of lists)
2016-01-15 00:38:34	Zekka|Sigfig	Rather, *GHC* provides that. Haskell itself does not.
2016-01-15 00:38:38	▶	lemur (~baweaver@173.230.196.25) has joined #haskell
2016-01-15 00:38:58	zachk	wasn't the simple untyped lambda-calculus proved to be inconsistent and have an error in it? 
2016-01-15 00:39:08	SiGe	coeus: fmap is a (special) endo-functor because it maps anything to anything, i.e., I can compose it with itself as many times as possible, since it understands all objects and arrows.
2016-01-15 00:39:16	wswiss	is the rule declarations correct in this snippet: http://lpaste.net/149497 
2016-01-15 00:39:30	SiGe	ReinH: makes sense!
2016-01-15 00:39:37	ReinH	SiGe: no, fmap is a bunch of different functions
2016-01-15 00:39:42	ReinH	that happen to share the same name
2016-01-15 00:39:51	◀	chrisdotcode (~quassel@cpe-65-189-217-7.neo.res.rr.com) has quit (Remote host closed the connection)
2016-01-15 00:39:52	ReinH	each of those forms the arrow mapping for its respective type
2016-01-15 00:40:00	◀	baweaver (~baweaver@2601:644:8280:b3c:851f:80f2:768a:f5e1) has quit (Ping timeout: 260 seconds)
2016-01-15 00:40:38	Zekka|Sigfig	shanemikel: Most of the time when you’re getting Haskell to infer what it needs to do to complete your program, you’re just giving it a stack of types where each is associated with a group of functions provided in a typeclass, after which Haskell slurps everything together and composes them
2016-01-15 00:40:54	coeus	yeah... i'd say it is an endo- because the right category is a subset of the left category.
2016-01-15 00:40:56	Zekka|Sigfig	a lot of the simpler cases of this are not too hard to just do at runtime in an untricky way in languages other than Haskell
2016-01-15 00:41:24	◀	tel (~tel@204.148.29.50) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-15 00:41:25	ReinH	No, it's endo because they are the same category.
2016-01-15 00:42:04	ReinH	If we want, we can define it as a mapping between Hask and a (full) subcategory of Hask defined as the image of Maybe. Under this definition, it is not an endofunctor.
2016-01-15 00:42:04	Zekka|Sigfig	shanemikel: I think most of the “you won’t have to write nearly as much code!” and “you won’t have to do anything ugly!” promises people make about Haskell are pretty inaccurate, especially when they’re talking about things-that-would-be-macroing-in-languages-other-than-Haskell
2016-01-15 00:42:14	◀	codafi (~textual@128.237.219.108) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-15 00:42:19	coeus	ReinH, no, you confuse auto- with endo-. it is not the same category. [a] is the category of all haskell-list-types.
2016-01-15 00:42:31	ReinH	coeus: No, I do not.
2016-01-15 00:42:45	coeus	gaah
2016-01-15 00:43:13	zachk	the built in laziness get's rid of the need for alot of macros, that are required in other languages, cause they eagerly evaluate the arugments to functions
2016-01-15 00:43:23	wswiss	[a] is a subcategory of Hask for the type a
2016-01-15 00:43:24	◀	cleamoon (~cleamoon@c213-89-124-61.bredband.comhem.se) has quit (Read error: Connection reset by peer)
2016-01-15 00:43:28	ReinH	"subset of a category" is ill-posed. I assumed that you meant subcategory.
2016-01-15 00:43:30	▶	umib0zu (~umib0zu@146-115-43-219.c3-0.abr-ubr1.sbo-abr.ma.cable.rcn.com) has joined #haskell
2016-01-15 00:43:31	◀	salih666 (~user@unaffiliated/r420r) has quit (Quit: sleep)
2016-01-15 00:43:42	ReinH	And a subcategory of C is not C
2016-01-15 00:43:50	Zekka|Sigfig	zachk: That’s true, but imho it doesn’t have a big effect on program structure — you’re effectively writing the same thing except calling it a function instead of a macro
2016-01-15 00:43:54	ReinH	so a functor from C to a subcategory of C is not an endofunctor.
2016-01-15 00:44:07	Zekka|Sigfig	or in other cases you’re writing the same thing except you don’t need a \()-> in the source code and a () -> in the type
2016-01-15 00:44:11	▶	cleamoon (~cleamoon@c213-89-124-61.bredband.comhem.se) has joined #haskell
2016-01-15 00:44:24	zachk	so what do you need a macro system for other then autogenerating things such as lens for records? 
2016-01-15 00:44:43	◀	doomlord (~textual@host86-149-133-173.range86-149.btcentralplus.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-15 00:44:52	◀	path[l] (~vsi@199.201.64.3) has quit (Ping timeout: 250 seconds)
2016-01-15 00:44:59	Zekka|Sigfig	zachk: You don’t think that’s a big enough case on its own?
2016-01-15 00:45:17	◀	wolfcub (~henrique_@177.55.195.209) has quit (Ping timeout: 255 seconds)
2016-01-15 00:45:40	ReinH	When we say that Functor in Haskell is an endofunctor, it is because we mean that it is a mapping from Hask to *itself*.
2016-01-15 00:45:59	ReinH	Not to some subcategory of Hask, which is a different category.
2016-01-15 00:46:07	coeus	ReinH, do you try to be correct by all means? if you say subcategory, then you miss that subcategories are still not defined. this is a beginners course and fast introduction. "subset of category" is something one can understand without mathematical definition.
2016-01-15 00:46:38	◀	danvet (~daniel@2a02:168:56c9:0:22cf:30ff:fe4c:37d6) has quit (Ping timeout: 255 seconds)
2016-01-15 00:46:39	ReinH	It is understandable, and incorrect.
2016-01-15 00:46:44	coeus	where "subset" is not to be interpreted in the mathematical sense. 
2016-01-15 00:47:06	ReinH	what
2016-01-15 00:47:06	coeus	i try to maximize the understandable part.
2016-01-15 00:47:22	ReinH	It is possible to be both understandable and correct.
2016-01-15 00:47:26	▶	plucas (~plucas@8.18.218.175) has joined #haskell
2016-01-15 00:47:38	Zekka|Sigfig	I write a lot of Prolog, where I frequently map over “all the things of a certain kind” — in Prolog it’s irrelevant because there is no user-visible compilation step, but in Haskell it would probably be useful to know about all the things in that kind at compile time
2016-01-15 00:47:46	ReinH	There is no excuse for using mathematical terms incorrectly when trying to explain mathematics.
2016-01-15 00:47:54	ReinH	It would be better to not use them at all.
2016-01-15 00:47:59	coeus	yeah, well, i don't see anyone of us to be both.
2016-01-15 00:48:11	coeus	anyway...
2016-01-15 00:48:13	Zekka|Sigfig	To do this stuff in Haskell you either need to throw out type safety and use a runtime data structure to talk about things of that kind, or you need to split functionality between compile-time and runtime, then use language extensions to inspect the things defined at compile-time
2016-01-15 00:48:30	coeus	SiGe, back to cat theory.
2016-01-15 00:48:36	ReinH	You wouldn't say "If you add 2 and 3, you get blue. I of course don't mean 'add' in the mathematical sense."
2016-01-15 00:49:30	SiGe	coeus: I am listening.  ReinH: I won't fully understand the category theory in one go, using incorrect terms, just to add understandability helps a lot when someone doesn't have the rigorous mathematical background that you guys do :-)
2016-01-15 00:49:30	▶	RevBayes_ (~revbayes@168.215.217.226) has joined #haskell
2016-01-15 00:49:40	Zekka|Sigfig	Of course, tehre’s also the argument that you shouldn’t write programs like what I’m describing in Haskell (or at least you shouldn’t do it *that* way) and I’d agree (I don’t, usually)
2016-01-15 00:49:51	▶	strburst (~allen@res388d-128-61-88-50.res.gatech.edu) has joined #haskell
2016-01-15 00:50:01	SiGe	ReinH: I'll mostly remember the high level terms, and then read through the book that you guys suggested earlier and fix the errors.
2016-01-15 00:50:33	coeus	do you know Monoids?
2016-01-15 00:50:47	◀	croyd_ (~croyd@129.10.9.63) has quit (Remote host closed the connection)
2016-01-15 00:50:55	SiGe	coeus: that was my initial question, that I do not understand how a concept so simple can be useful.
2016-01-15 00:51:09	coeus	lol
2016-01-15 00:51:12	coeus	ok...
2016-01-15 00:51:48	coeus	the (.) operator in haskell is a (partial) monoid.
2016-01-15 00:52:01	ReinH	And yes, if you are going to use mathematical terms to explain mathematical concepts, I will to the best of my ability insist that they are used correctly.
2016-01-15 00:52:01	◀	cleamoon (~cleamoon@c213-89-124-61.bredband.comhem.se) has quit (Read error: Connection reset by peer)
2016-01-15 00:52:04	coeus	it is a monoid on endofunctions.
2016-01-15 00:52:12	ReinH	I think it's irresponsible to do otherwise.
2016-01-15 00:52:22	▶	chrisramsey (~chrisrams@2602:306:3762:700:b096:2579:8241:2582) has joined #haskell
2016-01-15 00:52:37	wswiss	SiGe: having an operation associated with the type itself then allows you to carry the operation to constructs like the Writer monad (the output is monoidal)
2016-01-15 00:52:38	coeus	ReinH, i think that's ok with me.
2016-01-15 00:52:56	◀	RevBayes (~revbayes@168.215.217.226) has quit (Ping timeout: 256 seconds)
2016-01-15 00:52:59	ReinH	And when I use terms incorrectly, I appreciate it when people correct me, as they often do in here.
2016-01-15 00:53:15	zachk	do I need gmake to build ghc? 
2016-01-15 00:53:19	▶	cleamoon (~cleamoon@c213-89-124-61.bredband.comhem.se) has joined #haskell
2016-01-15 00:53:40	▶	path[l] (~vsi@199.201.64.3) has joined #haskell
2016-01-15 00:54:04	coeus	wswiss, (this is about monoids of endofunctors)
2016-01-15 00:54:06	Zekka|Sigfig	coeus: My personal experience: when people have used terminology in a fuzzy way because it made sense to *them* when they used it that way, I’ve learned much less and been much more confused
2016-01-15 00:54:30	◀	erikd (~erikd@103.229.16.4) has quit (Ping timeout: 265 seconds)
2016-01-15 00:54:31	coeus	ok
2016-01-15 00:54:32	◀	hiroakip (~hiroaki@ip4d150c8e.dynamic.kabel-deutschland.de) has quit (Quit: Ex-Chat)
2016-01-15 00:55:45	◀	mclong (~mclong@unaffiliated/mclong) has quit (Ping timeout: 260 seconds)
2016-01-15 00:55:59	coeus	Zekka|Sigfig, to me fuzzy is ok iff i know it is fuzzy. (otherwise i switch personalities.)
2016-01-15 00:56:05	◀	umib0zu (~umib0zu@146-115-43-219.c3-0.abr-ubr1.sbo-abr.ma.cable.rcn.com) has quit (Quit: umib0zu)
2016-01-15 00:56:06	Zekka|Sigfig	Using terminology in a fuzzy way, to me, seems like it usually amounts to “the gap between my understanding and your understanding is hard enough to cross that I will only do it partway” — because before I as a learner can start understanding the concept I have to understand the analogy
2016-01-15 00:56:07	coeus	anyway.
2016-01-15 00:56:17	◀	chrisramsey (~chrisrams@2602:306:3762:700:b096:2579:8241:2582) has quit (Remote host closed the connection)
2016-01-15 00:56:44	◀	derdon (~derdon@91.49.204.240) has quit (Ping timeout: 272 seconds)
2016-01-15 00:57:26	◀	firstdayonthejob (~firstdayo@cpc91184-cmbg18-2-0-cust232.5-4.cable.virginm.net) has quit (Ping timeout: 250 seconds)
2016-01-15 00:57:33	coeus	SiGe, if f is an endo-functor, then you can imagine an operator * that is the monoid on the f type.
2016-01-15 00:57:35	ReinH	It's weird to say that "(.) is ... a monoid." A monoid is an algebraic structure. (.) is one of the operations in such a structure, bit it is not by itself "a monoid".
2016-01-15 00:57:52	◀	SCHAAP137 (SCHAPiE@unaffiliated/schaap137) has quit (Remote host closed the connection)
2016-01-15 00:57:54	▶	xelxebar (~xelxebar@wcache02.waseda.ac.jp) has joined #haskell
2016-01-15 00:58:09	johnw	also, it's not (.), but (.) confined to functions who domain = codomain
2016-01-15 00:58:11	ReinH	* is not a monoid. {Int, 1, *} is a monoid. (.) is not a monoid. for all a, {a, id, (.)} is a monoid.
2016-01-15 00:58:31	ReinH	er
2016-01-15 00:58:36	◀	plucas (~plucas@8.18.218.175) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-15 00:58:40	zachk	a monoid is a triple consisting of: a 1. binary operator that is algerbraically closed over a 2. set and 3. neutral element (correct me if I am wrong) 
2016-01-15 00:58:46	johnw	{a->a,id,(.)} :)
2016-01-15 00:58:49	ReinH	rather: {a -> a, id, (.) :: (a -> a) -> (a -> a) -> a ->  a} is a monoid
2016-01-15 00:59:12	zachk	but what about...
2016-01-15 00:59:18	zachk	@type (.) 
2016-01-15 00:59:20	lambdabot	(b -> c) -> (a -> b) -> a -> c
2016-01-15 00:59:27	▶	hiroakip (~hiroaki@ip4d150c8e.dynamic.kabel-deutschland.de) has joined #haskell
2016-01-15 00:59:29	◀	Nikotiini (~user@cable-roi-58c037-251.dhcp.inet.fi) has quit (Remote host closed the connection)
2016-01-15 00:59:30	coeus	a monoid is a tuple of a set and an operator, in the case of (.) that set is that of endo-functions, and in the case of (*) it is that of type constructors (of kind *->*).
2016-01-15 00:59:31	ReinH	zachk: you must restrict (.) to operate only on a's.
2016-01-15 00:59:32	◀	PizzaPortal (~PizzaPort@ip503c32de.speed.planet.nl) has quit (Quit: PizzaPortal)
2016-01-15 00:59:46	ReinH	A set and two operators.
2016-01-15 00:59:49	▶	plucas (~plucas@8.18.218.175) has joined #haskell
2016-01-15 00:59:50	johnw	coeus: a set, an operator, and a unit
2016-01-15 00:59:51	◀	twanvl (~twanvl@dhcp-077-250-086-217.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-15 01:00:05	zachk	so what is our (.) in Hask then? is it even a Cat? 
2016-01-15 01:00:10	ReinH	(unit is a nullary operator)
2016-01-15 01:00:17	ReinH	zachk: (.) is a category
2016-01-15 01:00:23	ReinH	when restricted to a single type, it is a monoid
2016-01-15 01:00:29	zachk	aren't categories monoids? 
2016-01-15 01:00:34	zachk	oh wait...
2016-01-15 01:00:35	ReinH	A monoid is exactly that: a single object category.
2016-01-15 01:00:44	⚡	zachk small light bulb goes on 
2016-01-15 01:00:47	zachk	ty :D 
2016-01-15 01:00:50	ReinH	I shouldn't make the same mistake
2016-01-15 01:01:00	ReinH	(.) is composition in a category
2016-01-15 01:01:06	◀	canyonero (~canyonero@66-195-4-2.static.twtelecom.net) has quit (Ping timeout: 240 seconds)
2016-01-15 01:01:06	◀	cleamoon (~cleamoon@c213-89-124-61.bredband.comhem.se) has quit (Read error: Connection reset by peer)
2016-01-15 01:01:23	◀	michaeln_ (~textual@ppp121-44-55-164.lns20.syd4.internode.on.net) has quit (Ping timeout: 264 seconds)
2016-01-15 01:01:27	coeus	the tuple is a monoid iff that operator is associative and has a neutral element in that set.
2016-01-15 01:01:34	◀	kurt11 (~Adium@207.191.34.198) has quit (Quit: Leaving.)
2016-01-15 01:01:52	▶	cleamoon (~cleamoon@c213-89-124-61.bredband.comhem.se) has joined #haskell
2016-01-15 01:01:56	ReinH	It's a 3-tuple, not a 2-tuple. You have to identify the neutral element.
2016-01-15 01:02:28	▶	tel (~tel@204.148.29.50) has joined #haskell
2016-01-15 01:02:57	◀	cschneid_ (~cschneid@c-67-165-246-146.hsd1.co.comcast.net) has quit (Remote host closed the connection)
2016-01-15 01:03:08	◀	tel (~tel@204.148.29.50) has quit (Client Quit)
2016-01-15 01:03:24	coeus	ReinH, not that i know of... it is given by law and it is unique. can you have two monoids that differ only by their neutral element?
2016-01-15 01:03:49	ReinH	coeus: Every definition of a monoid that I have ever seen is a triple.
2016-01-15 01:04:08	▶	bos_ (~bos@facebook/mercurial/bos) has joined #haskell
2016-01-15 01:04:35	ReinH	It has to be identified because there is no other way to produce it for all monoids
2016-01-15 01:05:03	ReinH	You can't just say "and there is an identity element, go find it"
2016-01-15 01:05:05	SiGe	ReinH: but can't you prove that it is unique for a specific operator?  if so, the operator uniquely identifies the identity element (?) I can be wrong.
2016-01-15 01:05:06	ReinH	because you can't find it
2016-01-15 01:05:10	ReinH	generally speaking
2016-01-15 01:05:14	coeus	if there are two neutral elements... hm. it is the same structure but different perspective, so yes ok, triple it is.
2016-01-15 01:05:22	ReinH	no, there is only one neutral element
2016-01-15 01:05:27	coeus	thx.
2016-01-15 01:05:32	ReinH	but you can't figure out which one it is
2016-01-15 01:05:34	ReinH	so you have to mention it
2016-01-15 01:05:37	▶	rdrx (~user@TOROON0547W-LP140-05-1279738290.dsl.bell.ca) has joined #haskell
2016-01-15 01:05:47	▶	binaryplease (~binaryple@xdsl-78-34-191-91.netcologne.de) has joined #haskell
2016-01-15 01:06:06	◀	fizbin (~Adium@39.sub-70-215-74.myvzw.com) has quit (Read error: Connection reset by peer)
2016-01-15 01:06:18	ReinH	SiGe: say you have two neutral elements, m and n, then you have m * n = n and m * n = m
2016-01-15 01:06:20	▶	erikd (~erikd@103.229.16.4) has joined #haskell
2016-01-15 01:06:35	◀	cleamoon (~cleamoon@c213-89-124-61.bredband.comhem.se) has quit (Ping timeout: 265 seconds)
2016-01-15 01:06:53	SiGe	ReinH: Right, that's exatly why it is unique (and what I wast thinking).  But I guess you have to specify it in case it does not exist.
2016-01-15 01:07:01	coeus	anyway, the function join is a monoid operator:  join::Monad m=> ((m * m) a) -> ((m) a) where * is pseudocode.
2016-01-15 01:07:06	◀	bos (~bos@facebook/mercurial/bos) has quit (Ping timeout: 256 seconds)
2016-01-15 01:07:09	ReinH	You have to specify it because otherwise there is no way to produce it from the information you have
2016-01-15 01:07:18	◀	cir0x (~Adium@dslb-178-006-199-234.178.006.pools.vodafone-ip.de) has quit (Quit: Leaving.)
2016-01-15 01:07:21	▶	Ziltrum (~Destol@public-112-129.nat.utoronto.ca) has joined #haskell
2016-01-15 01:07:30	▶	croyd (~croyd@146-115-81-34.c3-0.sbo-ubr1.sbo.ma.cable.rcn.com) has joined #haskell
2016-01-15 01:07:46	▶	bos (~bos@facebook/mercurial/bos) has joined #haskell
2016-01-15 01:08:16	◀	bos_ (~bos@facebook/mercurial/bos) has quit (Ping timeout: 250 seconds)
2016-01-15 01:08:43	SiGe	coeus: I see.
2016-01-15 01:08:56	coeus	ReinH, if you have the operator * defined, and m and n are elements of the given set, and both are neutral elements... than both are the same.
2016-01-15 01:09:06	◀	tristanp_ (~tristanp@c-50-159-71-64.hsd1.wa.comcast.net) has quit (Read error: Connection reset by peer)
2016-01-15 01:09:20	▶	asthasr_ (~asthasr__@cpe-69-132-118-91.carolina.res.rr.com) has joined #haskell
2016-01-15 01:09:30	coeus	argh... you got me. there is no monoid with two neutral elements.
2016-01-15 01:09:35	▶	tristanp (~tristanp@2601:602:8a00:1310::3) has joined #haskell
2016-01-15 01:09:35	SiGe	ReinH: Why does knowing which element is neutral matters?  It only matters if it exists or not.  What additional information would I have if I dont' know which element is identity but I know an identity element exists?  Asking from mathematical point of view.
2016-01-15 01:09:44	ReinH	coeus: Yes, that's what I just said.
2016-01-15 01:10:14	coeus	so, given the set and the operator, the neutral element is already unique.
2016-01-15 01:10:14	SiGe	I can always use the simple id or w/e to represent that element without losing information, correct?
2016-01-15 01:10:36	ReinH	To identify a monoid, you need to specify the set and its operations
2016-01-15 01:10:41	ℹ	irc: disconnected from server
2016-01-15 21:11:42	▶	psyq (~Psyq@unaffiliated/psyq) has joined #haskell
2016-01-15 21:11:42	ℹ	Topic for #haskell is "http://www.haskell.org/ | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | http://reddit.com/r/haskell | Administrative issues: #haskell-ops | Hackage status? http://status.haskell.org | http://downloads.haskell.org"
2016-01-15 21:11:42	ℹ	Topic set by quicksilver on Wed, 07 Oct 2015 16:39:51
2016-01-15 21:11:42	ℹ	Channel #haskell: 1528 nicks (1 op, 0 voices, 1527 normals)
2016-01-15 21:11:43	ℹ	URL for #haskell: http://www.haskell.org/
2016-01-15 21:11:43	◀	bamboo (~bamboo@187.74.58.125) has quit (Quit: bamboo)
2016-01-15 21:11:43	▶	timmy_tofu (~tofu@cpe-69-207-86-178.rochester.res.rr.com) has joined #haskell
2016-01-15 21:11:55	◀	Deadhand (~deadf00t@69-196-158-136.dsl.teksavvy.com) has quit (Ping timeout: 240 seconds)
2016-01-15 21:12:06	ℹ	Channel created on Sun, 26 Nov 2006 07:42:48
2016-01-15 21:13:41	◀	tomboy64 (~tomboy64@unaffiliated/tomboy64) has quit (Ping timeout: 246 seconds)
2016-01-15 21:15:14	◀	JCI (~JCI@75-144-75-149-Michigan.hfc.comcastbusiness.net) has quit (Ping timeout: 256 seconds)
2016-01-15 21:15:30	◀	ChiefTWiT (~leolaport@c-73-189-70-135.hsd1.ca.comcast.net) has quit (Ping timeout: 260 seconds)
2016-01-15 21:15:39	▶	huckleberry78 (~huckleber@104-176-154-16.lightspeed.tukrga.sbcglobal.net) has joined #haskell
2016-01-15 21:16:36	▶	thomie (~thomie@70-248-47-212.rev.cloud.scaleway.com) has joined #haskell
2016-01-15 21:16:40	▶	lethjakman-l (~lethjakma@71.56.221.51) has joined #haskell
2016-01-15 21:16:45	▶	haBuu (haBuu@ip-36-206-c42d-dc20-2aa6-55f7.dhcp6.opintanner.fi) has joined #haskell
2016-01-15 21:16:57	▶	tomboy64 (~tomboy64@unaffiliated/tomboy64) has joined #haskell
2016-01-15 21:17:15	◀	taira (~quassel@taira-comp.kvi.sgsnet.se) has quit (Ping timeout: 260 seconds)
2016-01-15 21:17:26	◀	jmcarthur (~jmcarthur@pool-72-89-137-39.nycmny.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2016-01-15 21:17:42	▶	m0li (~m0li@unaffiliated/m0li) has joined #haskell
2016-01-15 21:17:50	◀	haBuu^ (haBuu@ip-36-206-81b-ed63-be11-b2d6.dhcp6.opintanner.fi) has quit (Ping timeout: 255 seconds)
2016-01-15 21:18:40	▶	csd_ (~chris@pool-108-30-122-128.nycmny.fios.verizon.net) has joined #haskell
2016-01-15 21:18:42	◀	cheetah2 (~cheetah2@172.242.102.144) has quit (Remote host closed the connection)
2016-01-15 21:18:50	▶	Deadhand (~deadf00t@69-196-158-136.dsl.teksavvy.com) has joined #haskell
2016-01-15 21:19:47	▶	asheshambasta (~asheshamb@62.205.127.9) has joined #haskell
2016-01-15 21:19:48	◀	asheshambasta (~asheshamb@62.205.127.9) has quit (Client Quit)
2016-01-15 21:19:54	▶	plucas (~plucas@8.18.218.175) has joined #haskell
2016-01-15 21:19:56	▶	itsutsu (~user@ax313-2-82-224-224-85.fbx.proxad.net) has joined #haskell
2016-01-15 21:20:02	◀	itsutsu (~user@ax313-2-82-224-224-85.fbx.proxad.net) has left #haskell
2016-01-15 21:20:08	▶	drot (~user@unaffiliated/drot) has joined #haskell
2016-01-15 21:20:22	▶	Peaker (~Peaker@85.65.227.152.dynamic.barak-online.net) has joined #haskell
2016-01-15 21:20:36	▶	strburst (~allen@res388d-128-61-88-50.res.gatech.edu) has joined #haskell
2016-01-15 21:21:11	▶	itsu` (~user@ax313-2-82-224-224-85.fbx.proxad.net) has joined #haskell
2016-01-15 21:21:12	◀	redxaxder (~redxaxder@c-73-232-94-188.hsd1.tx.comcast.net) has quit (Ping timeout: 265 seconds)
2016-01-15 21:21:55	◀	lethjakman-l (~lethjakma@71.56.221.51) has quit (Ping timeout: 260 seconds)
2016-01-15 21:22:39	◀	tomboy64 (~tomboy64@unaffiliated/tomboy64) has quit (Ping timeout: 265 seconds)
2016-01-15 21:22:57	itsu`	anyone has an idea why fmap has the signature Functor f => (a -> b) -> f a -> f b
2016-01-15 21:23:10	◀	csd_ (~chris@pool-108-30-122-128.nycmny.fios.verizon.net) has quit (Ping timeout: 256 seconds)
2016-01-15 21:23:25	◀	amx (amx@percival.namespace.at) has left #haskell
2016-01-15 21:23:41	◀	usershell (~usershell@41.136.116.163) has quit (Remote host closed the connection)
2016-01-15 21:23:41	▶	csd_ (~chris@pool-108-30-122-128.nycmny.fios.verizon.net) has joined #haskell
2016-01-15 21:23:46	itsu`	and the instance functor (->) has fmap :: (b -> c) -> (a -> b) -> a -> c
2016-01-15 21:24:22	▶	danilo2 (5944f6e1@gateway/web/freenode/ip.89.68.246.225) has joined #haskell
2016-01-15 21:24:23	itsu`	why are the signatures different ?
2016-01-15 21:24:31	danilo2	Hello guys! What is the best regex library nowadays in Haskell? 
2016-01-15 21:25:03	johnw	itsu`: it's just different variable names; but f b == a -> b in this case
2016-01-15 21:25:53	◀	jgt1 (~jgt@eip202.neoplus.adsl.tpnet.pl) has quit (Ping timeout: 276 seconds)
2016-01-15 21:26:05	itsu`	johnw: oh ok, I see
2016-01-15 21:26:39	▶	rcosta (~rcosta@217.38.102.200) has joined #haskell
2016-01-15 21:26:42	▶	tomboy64 (~tomboy64@unaffiliated/tomboy64) has joined #haskell
2016-01-15 21:26:54	▶	yfeldblum (~yfeldblum@2620:10d:c090:180::5138) has joined #haskell
2016-01-15 21:27:18	▶	alarmmm (~alarmmm@cpe-65-190-48-161.nc.res.rr.com) has joined #haskell
2016-01-15 21:27:27	◀	danilo2 (5944f6e1@gateway/web/freenode/ip.89.68.246.225) has quit (Client Quit)
2016-01-15 21:27:35	◀	govg (~govg@unaffiliated/govg) has quit (Ping timeout: 240 seconds)
2016-01-15 21:27:47	itsu`	thanks!
2016-01-15 21:27:59	◀	griotspeak (~textual@c-73-237-161-156.hsd1.ga.comcast.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-15 21:28:09	▶	MarceColl (~MarceColl@2.Red-79-155-140.dynamicIP.rima-tde.net) has joined #haskell
2016-01-15 21:28:31	ralu	is there option for type alias in type signature?
2016-01-15 21:28:52	▶	oisdk_ (~oisdk_@95.45.70.25) has joined #haskell
2016-01-15 21:29:16	▶	eitanChatav (49df852d@gateway/web/freenode/ip.73.223.133.45) has joined #haskell
2016-01-15 21:29:38	▶	joof (~joof@c-50-171-127-73.hsd1.tx.comcast.net) has joined #haskell
2016-01-15 21:30:10	eitanChatav	what is the proper invocation to run `stack test` with a `quick-check-replay` seed?
2016-01-15 21:30:18	▶	SrPx_ (~v@179.86.129.158) has joined #haskell
2016-01-15 21:30:59	◀	favetelinguis (~favetelin@78-72-40-166-no186.tbcn.telia.com) has quit (Ping timeout: 245 seconds)
2016-01-15 21:30:59	▶	slomo (~slomo@coaxion.net) has joined #haskell
2016-01-15 21:30:59	◀	slomo (~slomo@coaxion.net) has quit (Changing host)
2016-01-15 21:30:59	▶	slomo (~slomo@unaffiliated/slomo) has joined #haskell
2016-01-15 21:31:06	◀	SrPx (~v@179.210.80.129) has quit (Ping timeout: 260 seconds)
2016-01-15 21:31:07	ℹ	SrPx_ is now known as SrPx
2016-01-15 21:33:17	◀	tomboy64 (~tomboy64@unaffiliated/tomboy64) has quit (Ping timeout: 265 seconds)
2016-01-15 21:34:03	◀	wennergr (~textual@EARNEST-OPE.bar1.SanFrancisco1.Level3.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-15 21:34:20	◀	zeroed (~zeroed@unaffiliated/zeroed) has quit (Quit: leaving)
2016-01-15 21:34:53	◀	huckleberry78 (~huckleber@104-176-154-16.lightspeed.tukrga.sbcglobal.net) has quit (Remote host closed the connection)
2016-01-15 21:35:33	eitanChatav	what is the proper invocation to run `stack test` with a `quickcheck-replay` seed?
2016-01-15 21:35:54	johnw	we saw the question the first time
2016-01-15 21:36:08	▶	fizruk (~anonymous@128-68-140-96.broadband.corbina.ru) has joined #haskell
2016-01-15 21:36:10	◀	lotharn (~lotharn@c-73-37-14-65.hsd1.or.comcast.net) has quit (Ping timeout: 272 seconds)
2016-01-15 21:37:35	◀	raichoo (~raichoo@i59F6A741.versanet.de) has quit (Ping timeout: 276 seconds)
2016-01-15 21:38:03	▶	govg (~govg@unaffiliated/govg) has joined #haskell
2016-01-15 21:38:53	◀	prkc (~prkc@46.166.190.181) has quit (Ping timeout: 246 seconds)
2016-01-15 21:39:30	▶	taira (~quassel@taira-comp.kvi.sgsnet.se) has joined #haskell
2016-01-15 21:40:37	eitanChatav	sorry
2016-01-15 21:40:47	▶	zudov (~zudov@dsl-espbrasgw1-54f9db-199.dhcp.inet.fi) has joined #haskell
2016-01-15 21:40:52	johnw	there is also #haskell-stack
2016-01-15 21:41:06	◀	Peaker (~Peaker@85.65.227.152.dynamic.barak-online.net) has quit (Ping timeout: 250 seconds)
2016-01-15 21:41:15	eitanChatav	thanks, I'll ask there
2016-01-15 21:41:35	johnw	at this time of day, it may be even quieter :(
2016-01-15 21:41:59	ℹ	ril is now known as ril[away]
2016-01-15 21:42:13	◀	Geff22 (~Geff@109.172.15.29) has quit (Read error: Connection reset by peer)
2016-01-15 21:42:44	▶	mgsloan (~mgsloan@157.130.186.54) has joined #haskell
2016-01-15 21:42:55	▶	cheetah2 (~cheetah2@172.242.102.144) has joined #haskell
2016-01-15 21:43:09	◀	fizbin (~Adium@pool-173-72-85-97.cmdnnj.east.verizon.net) has quit (Quit: Leaving.)
2016-01-15 21:43:59	▶	quakehead (~pemican@c-50-177-113-81.hsd1.ma.comcast.net) has joined #haskell
2016-01-15 21:44:15	▶	usr (~usr@unaffiliated/usr) has joined #haskell
2016-01-15 21:44:26	▶	fizbin (~Adium@pool-173-72-85-97.cmdnnj.east.verizon.net) has joined #haskell
2016-01-15 21:46:03	▶	BlueRavenGT (~BlueRaven@8-22-13-219.utopiafiber.net) has joined #haskell
2016-01-15 21:46:21	▶	KarolisK (~karolis@78-60-68-107.static.zebra.lt) has joined #haskell
2016-01-15 21:46:35	◀	FreeBirdLjj (~freebirdl@112.3.244.20) has quit (Remote host closed the connection)
2016-01-15 21:46:53	▶	tomboy64 (~tomboy64@unaffiliated/tomboy64) has joined #haskell
2016-01-15 21:47:44	◀	KarolisK (~karolis@78-60-68-107.static.zebra.lt) has quit (Client Quit)
2016-01-15 21:48:01	◀	baweaver (~baweaver@173.230.196.25) has quit (Remote host closed the connection)
2016-01-15 21:49:18	◀	jay6981 (~Adium@2601:646:8d01:7f7d:8d64:f6b2:1033:a05c) has quit (Quit: Leaving.)
2016-01-15 21:49:36	◀	gamsd (~gamsd@201.16.142.13) has quit (Quit: gamsd)
2016-01-15 21:49:39	◀	drot (~user@unaffiliated/drot) has quit (Quit: rcirc on GNU Emacs 24.5.1)
2016-01-15 21:49:54	◀	chrisramsey (~chrisrams@192.171.117.210) has quit (Read error: Connection reset by peer)
2016-01-15 21:50:07	◀	eitanChatav (49df852d@gateway/web/freenode/ip.73.223.133.45) has left #haskell
2016-01-15 21:50:09	◀	kurt11 (~Adium@207.191.34.198) has quit (Quit: Leaving.)
2016-01-15 21:50:20	▶	chrisramsey (~chrisrams@192.171.117.210) has joined #haskell
2016-01-15 21:50:32	▶	fseer (~adas@cpe-109-60-25-182.st3.cable.xnet.hr) has joined #haskell
2016-01-15 21:50:40	▶	griotspeak (~textual@c-73-237-161-156.hsd1.ga.comcast.net) has joined #haskell
2016-01-15 21:51:55	ℹ	ril[away] is now known as ril
2016-01-15 21:52:32	▶	zeroed (~zeroed@93-34-216-168.ip51.fastwebnet.it) has joined #haskell
2016-01-15 21:52:32	◀	zeroed (~zeroed@93-34-216-168.ip51.fastwebnet.it) has quit (Changing host)
2016-01-15 21:52:32	▶	zeroed (~zeroed@unaffiliated/zeroed) has joined #haskell
2016-01-15 21:52:51	▶	hexchat_ (~hexchat@95.63.152.106) has joined #haskell
2016-01-15 21:53:04	▶	tag (~tag@72.5.114.17) has joined #haskell
2016-01-15 21:53:08	quakehead	Anyone familiar with Parsec?
2016-01-15 21:53:13	◀	tag (~tag@72.5.114.17) has quit (Changing host)
2016-01-15 21:53:13	▶	tag (~tag@p3m/member/tag) has joined #haskell
2016-01-15 21:53:20	johnw	just ask your qustion
2016-01-15 21:53:20	▶	prkc (~prkc@gateway/vpn/privateinternetaccess/prkc) has joined #haskell
2016-01-15 21:53:36	◀	hexchat_ (~hexchat@95.63.152.106) has quit (Remote host closed the connection)
2016-01-15 21:53:40	▶	kurt11 (~Adium@207.191.34.198) has joined #haskell
2016-01-15 21:53:40	▶	bamboo (~bamboo@177.188.112.61) has joined #haskell
2016-01-15 21:53:44	▶	Peaker (~Peaker@85.65.227.152.dynamic.barak-online.net) has joined #haskell
2016-01-15 21:54:17	◀	_sjs (~steven.sp@108-228-29-235.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 255 seconds)
2016-01-15 21:54:18	quakehead	Why are some functions like "many" have the type signature "Text.Parsec.Prim.ParsecT s u m a" but the individual parsers we write are type "Parser <our type>"?
2016-01-15 21:54:29	quakehead	I'm following the "Write yourself a scheme" tutorial.
2016-01-15 21:55:10	tdammers	type synonyms
2016-01-15 21:55:11	◀	tlaxkit (~hexchat@95.63.152.106) has quit (Ping timeout: 255 seconds)
2016-01-15 21:55:21	quakehead	Oh.
2016-01-15 21:56:06	▶	vmesons (~rmacleod@24-212-184-107.cable.teksavvy.com) has joined #haskell
2016-01-15 21:56:12	tdammers	ParsecT s u m a is the most generalized way of writing the type
2016-01-15 21:56:15	◀	fseer (~adas@cpe-109-60-25-182.st3.cable.xnet.hr) has quit (Remote host closed the connection)
2016-01-15 21:56:31	◀	yellow_apple (~yapple@31.135.115.52) has quit (Quit: yellow_apple)
2016-01-15 21:56:35	tdammers	(s u m and a being the stream type, user state, underlying monad, and output type)
2016-01-15 21:56:36	tommd	Parser is an alias for ParsecT String () Identity
2016-01-15 21:57:05	▶	frsgdfs (~adas@cpe-109-60-25-182.st3.cable.xnet.hr) has joined #haskell
2016-01-15 21:57:17	▶	Adios (~Hinnyu@59-127-177-21.HINET-IP.hinet.net) has joined #haskell
2016-01-15 21:57:19	▶	_sjs (~steven.sp@108-228-29-235.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2016-01-15 21:57:44	▶	quchen (~quchen@ipb21a1330.dynamic.kabel-deutschland.de) has joined #haskell
2016-01-15 21:57:57	◀	quakehead (~pemican@c-50-177-113-81.hsd1.ma.comcast.net) has left #haskell ("Leaving")
2016-01-15 21:58:03	▶	quakehead (~pemican@c-50-177-113-81.hsd1.ma.comcast.net) has joined #haskell
2016-01-15 21:58:41	▶	castlelore (~Brian@unaffiliated/castlelore) has joined #haskell
2016-01-15 21:58:57	▶	pavonia (~user@dslb-178-000-102-193.178.000.pools.vodafone-ip.de) has joined #haskell
2016-01-15 21:59:16	quakehead	Thanks tdammers. I'll have to learn more about the type system I guess.
2016-01-15 21:59:21	◀	IrishPrime (~IrishPrim@74.202.224.66) has quit (Quit: Leaving)
2016-01-15 21:59:34	koz_	quakehead: If you want something a bit simpler for parser combinators, attoparsec is your game.
2016-01-15 21:59:43	koz_	I picked it up in, like, a few hours with some help.
2016-01-15 21:59:46	▶	rikonor (~rikonor@ool-457b460f.dyn.optonline.net) has joined #haskell
2016-01-15 22:00:03	koz_	It's not as powerful as Parsec, but for simpler stuff, it's a bit easier to make sense of.
2016-01-15 22:00:07	▶	tomboy65 (~tomboy64@unaffiliated/tomboy64) has joined #haskell
2016-01-15 22:00:21	◀	tomboy64 (~tomboy64@unaffiliated/tomboy64) has quit (Ping timeout: 265 seconds)
2016-01-15 22:01:10	▶	dgpratt (~dpratt71@207.182.208.2) has joined #haskell
2016-01-15 22:01:21	◀	frsgdfs (~adas@cpe-109-60-25-182.st3.cable.xnet.hr) has quit (Remote host closed the connection)
2016-01-15 22:01:32	▶	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has joined #haskell
2016-01-15 22:01:43	▶	xylen_ (~codywelsh@c-73-189-204-160.hsd1.ca.comcast.net) has joined #haskell
2016-01-15 22:01:43	quakehead	Thanks koz_
2016-01-15 22:01:56	quakehead	I still need to learn what a combinator is.
2016-01-15 22:02:08	koz_	quakehead: Basically, the idea is 'writing parsers in small parts'.
2016-01-15 22:02:09	▶	mfitton (~mfitton@c-76-115-184-183.hsd1.or.comcast.net) has joined #haskell
2016-01-15 22:02:23	▶	zcourts (~zcourts@cpc5-croy18-2-0-cust555.croy.cable.virginm.net) has joined #haskell
2016-01-15 22:02:26	koz_	So instead of writing a parser than can read something complicated, you write a series of simple alternatives and wire them together.
2016-01-15 22:02:33	▶	CatMtKing (~CatMtKing@wsip-70-167-11-90.sd.sd.cox.net) has joined #haskell
2016-01-15 22:02:46	◀	_sjs (~steven.sp@108-228-29-235.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 265 seconds)
2016-01-15 22:02:56	▶	bamboo_ (~bamboo@189.68.150.173) has joined #haskell
2016-01-15 22:03:15	◀	bamboo (~bamboo@177.188.112.61) has quit (Ping timeout: 265 seconds)
2016-01-15 22:03:16	ℹ	bamboo_ is now known as bamboo
2016-01-15 22:03:21	quakehead	thanks. gtg...
2016-01-15 22:03:28	koz_	quakehead: https://www.schoolofhaskell.com/school/starting-with-haskell/libraries-and-frameworks/text-manipulation/attoparsec
2016-01-15 22:03:34	koz_	Check that out some time.
2016-01-15 22:03:47	quakehead	alright...
2016-01-15 22:04:11	◀	Denommus (~user@unaffiliated/denommus) has quit (Quit: going home)
2016-01-15 22:04:12	◀	quakehead (~pemican@c-50-177-113-81.hsd1.ma.comcast.net) has quit (Quit: Leaving)
2016-01-15 22:04:14	◀	rikonor (~rikonor@ool-457b460f.dyn.optonline.net) has quit (Ping timeout: 260 seconds)
2016-01-15 22:04:17	◀	fizruk (~anonymous@128-68-140-96.broadband.corbina.ru) has quit (Quit: fizruk)
2016-01-15 22:04:37	▶	umib0zu (~umib0zu@c-50-177-152-117.hsd1.ma.comcast.net) has joined #haskell
2016-01-15 22:04:56	mfitton	Hey y'all, I'm getting an error where it's saying that some data constructors don't exist. I'm guessing it has something to do with how I set up my where statement http://lpaste.net/7628441489172856832
2016-01-15 22:05:04	mfitton	If someone could help me out I'd really appreciate it
2016-01-15 22:05:08	◀	gfixler (~gfixler@bur-inet-pa-2.disney.com) has quit (Ping timeout: 246 seconds)
2016-01-15 22:05:12	▶	pewu (pewu@91.185.191.213) has joined #haskell
2016-01-15 22:05:50	▶	fizruk (~anonymous@128-68-140-96.broadband.corbina.ru) has joined #haskell
2016-01-15 22:06:09	mfitton	Do I need to nest where clauses that are dependent on other where clauses?
2016-01-15 22:06:38	◀	tomboy65 (~tomboy64@unaffiliated/tomboy64) has quit (Ping timeout: 265 seconds)
2016-01-15 22:07:01	◀	pewu (pewu@91.185.191.213) has left #haskell
2016-01-15 22:07:23	◀	hrnz (hrnz@unaffiliated/hrnz) has quit (Ping timeout: 264 seconds)
2016-01-15 22:07:30	◀	noctux (noctux@karif.server-speed.net) has quit (Ping timeout: 260 seconds)
2016-01-15 22:07:32	◀	animated (~mike@207.35.29.137) has quit (Ping timeout: 250 seconds)
2016-01-15 22:08:13	◀	fizruk (~anonymous@128-68-140-96.broadband.corbina.ru) has quit (Client Quit)
2016-01-15 22:08:32	◀	castlelore (~Brian@unaffiliated/castlelore) has quit (Quit: WeeChat 1.3)
2016-01-15 22:08:39	◀	bamboo (~bamboo@189.68.150.173) has quit (Quit: bamboo)
2016-01-15 22:09:21	◀	ddellacosta (~ddellacos@ool-4578faa9.dyn.optonline.net) has quit (Remote host closed the connection)
2016-01-15 22:09:30	▶	jayne_ (~jayne@freenode/staff/jayne) has joined #haskell
2016-01-15 22:10:08	◀	osa1 (~omer@haskell/developer/osa1) has quit (Ping timeout: 250 seconds)
2016-01-15 22:10:35	◀	CatMtKing (~CatMtKing@wsip-70-167-11-90.sd.sd.cox.net) has quit (Quit: Leaving)
2016-01-15 22:10:57	▶	CatMtKing (~CatMtKing@wsip-70-167-11-90.sd.sd.cox.net) has joined #haskell
2016-01-15 22:11:22	◀	CatMtKing (~CatMtKing@wsip-70-167-11-90.sd.sd.cox.net) has quit (Client Quit)
2016-01-15 22:11:30	◀	Sigyn (sigyn@freenode/utility-bot/sigyn) has quit (*.net *.split)
2016-01-15 22:11:30	◀	jayne (~jayne@freenode/staff/jayne) has quit (*.net *.split)
2016-01-15 22:11:36	▶	wanderleyguima (~wanderley@199.201.64.2) has joined #haskell
2016-01-15 22:11:37	mfitton	Nevermind, I found the issue. identifiers have to be lower case in haskell!
2016-01-15 22:11:51	▶	cdg (~cdg@157.166.175.129) has joined #haskell
2016-01-15 22:12:32	Fuco	is there some built-in urldecode or should I get some package?
2016-01-15 22:12:39	▶	Sonolin (~michael@wsip-184-178-115-131.sd.sd.cox.net) has joined #haskell
2016-01-15 22:13:00	▶	kmein (~quassel@xd9bd5855.dyn.telefonica.de) has joined #haskell
2016-01-15 22:13:02	sleblanc	Can I pass args to ghci / cabal repl such that those args will be available from the System.Environ(getArgs) function?
2016-01-15 22:13:08	▶	osa1 (~omer@2001:18e8:2:28b6:2ab2:bdff:fedf:fa66) has joined #haskell
2016-01-15 22:13:08	◀	osa1 (~omer@2001:18e8:2:28b6:2ab2:bdff:fedf:fa66) has quit (Changing host)
2016-01-15 22:13:08	▶	osa1 (~omer@haskell/developer/osa1) has joined #haskell
2016-01-15 22:13:17	sleblanc	System.Environment*
2016-01-15 22:13:21	▶	kmein_ (~quassel@xd9bd5855.dyn.telefonica.de) has joined #haskell
2016-01-15 22:13:24	◀	kmein_ (~quassel@xd9bd5855.dyn.telefonica.de) has quit (Remote host closed the connection)
2016-01-15 22:13:30	◀	Shade_ (4666410a@gateway/web/freenode/ip.70.102.65.10) has quit (*.net *.split)
2016-01-15 22:13:31	koala_man	sleblanc: VAR=foo ghci 
2016-01-15 22:13:42	koala_man	oh I misread that
2016-01-15 22:13:44	◀	v_g (~vg@109.108.63.17) has quit
2016-01-15 22:13:47	◀	sinkensabe (~sinkensab@213-65-123-236-no78.tbcn.telia.com) has quit (Remote host closed the connection)
2016-01-15 22:14:03	◀	ph88 (~ph88@541E4F6E.cm-5-7b.dynamic.ziggo.nl) has quit (Quit: Leaving)
2016-01-15 22:14:15	▶	hrnz (hrnz@unaffiliated/hrnz) has joined #haskell
2016-01-15 22:14:22	bergmark	sleblanc: withArgs
2016-01-15 22:14:55	◀	govg (~govg@unaffiliated/govg) has quit (Quit: leaving)
2016-01-15 22:14:55	mauke	Fuco: nothing is built in
2016-01-15 22:15:09	▶	govg (~govg@unaffiliated/govg) has joined #haskell
2016-01-15 22:15:13	Fuco	well, some standard package... there's million things outside
2016-01-15 22:15:16	Fuco	half of it broken :P
2016-01-15 22:15:23	◀	kmein (~quassel@xd9bd5855.dyn.telefonica.de) has quit (Remote host closed the connection)
2016-01-15 22:15:24	mauke	sleblanc: :set args ...
2016-01-15 22:15:51	▶	noctux (noctux@karif.server-speed.net) has joined #haskell
2016-01-15 22:16:28	sleblanc	bergmark, withArgs is cool. mauke, exactly what I needed
2016-01-15 22:16:39	◀	altphi_ (~altphi@host-74-221-189-208.WISOLT1.epbfi.com) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-01-15 22:16:46	▶	broma0 (~broma0@ool-182e23f2.dyn.optonline.net) has joined #haskell
2016-01-15 22:17:47	▶	Sigyn (sigyn@freenode/utility-bot/sigyn) has joined #haskell
2016-01-15 22:18:08	◀	edon (~user@albalug/edon) has quit (Ping timeout: 255 seconds)
2016-01-15 22:18:13	▶	lethjakman-l (~lethjakma@71.56.221.51) has joined #haskell
2016-01-15 22:18:44	◀	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has quit (Remote host closed the connection)
2016-01-15 22:18:44	▶	asheshambasta (~asheshamb@d8D862362.access.telenet.be) has joined #haskell
2016-01-15 22:19:48	◀	broma0 (~broma0@ool-182e23f2.dyn.optonline.net) has quit (Client Quit)
2016-01-15 22:20:04	▶	tomboy65 (~tomboy64@unaffiliated/tomboy64) has joined #haskell
2016-01-15 22:20:50	Cale	mfitton: Yeah, this is just so that it's easy to syntactically distinguish, when reading a pattern to be matched, which things are data constructors to be matched, and which things are variables to be bound
2016-01-15 22:21:25	◀	|node (uid125132@gateway/web/irccloud.com/x-hfwmhiyrcezdexkv) has quit (Quit: Connection closed for inactivity)
2016-01-15 22:21:33	Cale	mfitton: data constructors always start with an uppercase letter (or if they're infix symbols, a colon), while other variables don't.
2016-01-15 22:21:48	◀	griotspeak (~textual@c-73-237-161-156.hsd1.ga.comcast.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-15 22:22:17	◀	wanderleyguima (~wanderley@199.201.64.2) has quit (Ping timeout: 246 seconds)
2016-01-15 22:22:35	◀	lethjakman-l (~lethjakma@71.56.221.51) has quit (Ping timeout: 240 seconds)
2016-01-15 22:22:35	◀	Zekka (~zekka@uawifi-nat-210-69.arizona.edu) has quit (Ping timeout: 240 seconds)
2016-01-15 22:22:43	◀	sanitypassing (~sanitypas@unaffiliated/sanitypassing) has quit (Quit: ZNC 1.6.1 - http://znc.in)
2016-01-15 22:22:43	▶	wennergr (~textual@EARNEST-OPE.bar1.SanFrancisco1.Level3.net) has joined #haskell
2016-01-15 22:22:45	exio4	sleblanc: :main ab cde works too
2016-01-15 22:23:51	◀	uncle-j_j (~unclechu@95.153.133.180) has quit (Quit: Leaving.)
2016-01-15 22:23:53	◀	hannelita (~hannelita@c9066748.static.spo.virtua.com.br) has quit (Remote host closed the connection)
2016-01-15 22:23:57	◀	wennergr (~textual@EARNEST-OPE.bar1.SanFrancisco1.Level3.net) has quit (Client Quit)
2016-01-15 22:24:17	◀	xylen_ (~codywelsh@c-73-189-204-160.hsd1.ca.comcast.net) has quit (Quit: xylen_)
2016-01-15 22:24:32	▶	tomboy64 (~tomboy64@unaffiliated/tomboy64) has joined #haskell
2016-01-15 22:24:35	◀	Sigyn (sigyn@freenode/utility-bot/sigyn) has quit (Remote host closed the connection)
2016-01-15 22:24:47	▶	Sigyn (sigyn@freenode/utility-bot/sigyn) has joined #haskell
2016-01-15 22:24:55	▶	kalail (uid62296@gateway/web/irccloud.com/x-fqkcfzavpgvqslgk) has joined #haskell
2016-01-15 22:24:55	◀	rodolfowtf (~quassel@187.39.13.235) has quit (Read error: Connection reset by peer)
2016-01-15 22:25:09	◀	micmus (~micmus@anx156.neoplus.adsl.tpnet.pl) has quit (Ping timeout: 245 seconds)
2016-01-15 22:25:20	◀	tomboy65 (~tomboy64@unaffiliated/tomboy64) has quit (Ping timeout: 255 seconds)
2016-01-15 22:26:11	sleblanc	exio4, good for one-off changes, thanks
2016-01-15 22:26:36	▶	wanderleyguima (~wanderley@199.201.64.2) has joined #haskell
2016-01-15 22:26:55	◀	yfeldblum (~yfeldblum@2620:10d:c090:180::5138) has quit (Ping timeout: 240 seconds)
2016-01-15 22:26:58	▶	wennergr (~textual@EARNEST-OPE.bar1.SanFrancisco1.Level3.net) has joined #haskell
2016-01-15 22:27:08	◀	Mediogre (~Mediogre@50-197-231-5-static.hfc.comcastbusiness.net) has quit (Ping timeout: 255 seconds)
2016-01-15 22:27:10	jgrocho	quit
2016-01-15 22:27:37	◀	jgrocho (jgrocho@2600:3c01::f03c:91ff:fe37:4783) has quit (Quit: WeeChat 1.3)
2016-01-15 22:28:02	◀	mfitton (~mfitton@c-76-115-184-183.hsd1.or.comcast.net) has quit (Ping timeout: 255 seconds)
2016-01-15 22:28:14	▶	losingkeys (~losingkey@172.56.12.252) has joined #haskell
2016-01-15 22:28:47	◀	Xilov (~Xilov@unaffiliated/xilov) has quit (Quit: I just want you to be happy. And maybe a little bit naked.)
2016-01-15 22:29:31	▶	jsqr (~jj@thalia.jsqr.org) has joined #haskell
2016-01-15 22:29:37	◀	Th30n (~Th30n@93-139-92-192.adsl.net.t-com.hr) has quit (Quit: leaving)
2016-01-15 22:29:58	▶	rikonor (~rikonor@ool-457b460f.dyn.optonline.net) has joined #haskell
2016-01-15 22:30:04	▶	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined #haskell
2016-01-15 22:30:12	▶	quakehead (~pemican@50.153.135.3) has joined #haskell
2016-01-15 22:30:23	◀	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has quit (Quit: caumeslasal)
2016-01-15 22:30:26	▶	tomboy65 (~tomboy64@unaffiliated/tomboy64) has joined #haskell
2016-01-15 22:31:02	▶	juliohm (~julio@2607:f6d0:ced:5b3:e206:e6ff:fed1:451b) has joined #haskell
2016-01-15 22:31:02	◀	juliohm (~julio@2607:f6d0:ced:5b3:e206:e6ff:fed1:451b) has quit (Changing host)
2016-01-15 22:31:02	▶	juliohm (~julio@unaffiliated/juliohm) has joined #haskell
2016-01-15 22:31:16	▶	fizruk (~anonymous@128-68-140-96.broadband.corbina.ru) has joined #haskell
2016-01-15 22:31:36	◀	iwmrby (~iwmrby@2a02:2f0b:b0e0:106a:f1a9:3584:1bc:dace) has quit (Quit: WeeChat 1.4)
2016-01-15 22:31:58	◀	plucas (~plucas@8.18.218.175) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-15 22:32:05	◀	tomboy64 (~tomboy64@unaffiliated/tomboy64) has quit (Ping timeout: 255 seconds)
2016-01-15 22:33:14	▶	plucas (~plucas@8.18.218.175) has joined #haskell
2016-01-15 22:33:51	⚡	hackagebot fltkhs 0.4.0.0 - FLTK bindings  https://hackage.haskell.org/package/fltkhs-0.4.0.0 (deech)
2016-01-15 22:33:58	▶	Swizec (~swizec@c-67-164-98-169.hsd1.ca.comcast.net) has joined #haskell
2016-01-15 22:33:58	◀	osa1 (~omer@haskell/developer/osa1) has quit (Ping timeout: 250 seconds)
2016-01-15 22:34:09	▶	jay6981 (~Adium@2601:646:8d01:7f7d:8d64:f6b2:1033:a05c) has joined #haskell
2016-01-15 22:34:11	◀	oisdk_ (~oisdk_@95.45.70.25) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-15 22:34:20	▶	broma0 (~broma0@ool-182e23f2.dyn.optonline.net) has joined #haskell
2016-01-15 22:35:23	▶	afcondon (~afcondon@109.76.71.126) has joined #haskell
2016-01-15 22:36:09	broma0	So i know we can't have two record types with the same record field names, but is there any template-haskell / lensy magic somewhere that will satisfy my need for OverloadedRecordFields before it's out?
2016-01-15 22:36:36	◀	tomboy65 (~tomboy64@unaffiliated/tomboy64) has quit (Ping timeout: 265 seconds)
2016-01-15 22:37:09	broma0	basically, are there any libraries out there that to any degree provides what OverloadedRecordFields will? 
2016-01-15 22:37:50	▶	micmus (~micmus@bpc46.neoplus.adsl.tpnet.pl) has joined #haskell
2016-01-15 22:38:02	◀	lynnard (~lingnan@cpc1-walt13-2-0-cust402.13-2.cable.virginm.net) has quit (Ping timeout: 276 seconds)
2016-01-15 22:38:33	mauke	I remember some TH thing for first-class record types
2016-01-15 22:38:43	mauke	does anyone remember the name?
2016-01-15 22:39:05	◀	slomo (~slomo@unaffiliated/slomo) has quit (Quit: Ex-Chat)
2016-01-15 22:39:06	◀	zeroed (~zeroed@unaffiliated/zeroed) has quit (Quit: leaving)
2016-01-15 22:39:12	◀	fizruk (~anonymous@128-68-140-96.broadband.corbina.ru) has quit (Quit: fizruk)
2016-01-15 22:39:23	◀	asheshambasta (~asheshamb@d8D862362.access.telenet.be) has quit (Quit: Leaving.)
2016-01-15 22:39:32	▶	fizruk (~anonymous@128-68-140-96.broadband.corbina.ru) has joined #haskell
2016-01-15 22:40:04	broma0	was it fclabels?
2016-01-15 22:40:10	◀	fizruk (~anonymous@128-68-140-96.broadband.corbina.ru) has quit (Client Quit)
2016-01-15 22:40:41	▶	tomboy65 (~tomboy64@unaffiliated/tomboy64) has joined #haskell
2016-01-15 22:40:43	mauke	unlikely, that says it is "first class accessor labels"
2016-01-15 22:41:38	▶	emilypi (~emilypi@2604:2000:8006:ef00:610f:5fcb:20eb:daa4) has joined #haskell
2016-01-15 22:41:46	◀	wildsebastian (~wildsebas@2a02:810d:1b80:1d24:a5b7:3aee:7d37:a4cb) has quit (Ping timeout: 240 seconds)
2016-01-15 22:42:00	mauke	https://nikita-volkov.github.io/record/
2016-01-15 22:42:30	▶	asthasr_ (~asthasr__@cpe-69-132-118-91.carolina.res.rr.com) has joined #haskell
2016-01-15 22:42:40	◀	noddy2OOO (~self@82.193.222.101) has quit (Ping timeout: 272 seconds)
2016-01-15 22:43:04	◀	insitu (~textual@105.196.201.77.rev.sfr.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-01-15 22:43:20	broma0	mauke: ooo fancy
2016-01-15 22:43:40	ℹ	asthasr_ is now known as asthasr
2016-01-15 22:44:10	◀	ril (~ril@c-98-210-195-123.hsd1.ca.comcast.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-15 22:44:15	▶	insitu (~textual@77.201.196.105) has joined #haskell
2016-01-15 22:45:39	◀	kurt11 (~Adium@207.191.34.198) has quit (Quit: Leaving.)
2016-01-15 22:46:32	▶	kurt11 (~Adium@207.191.34.198) has joined #haskell
2016-01-15 22:47:02	▶	neoncontrails (~neoncontr@2602:304:cc4e:9410:80ba:d82e:ce92:bc1) has joined #haskell
2016-01-15 22:48:26	◀	tomboy65 (~tomboy64@unaffiliated/tomboy64) has quit (Ping timeout: 276 seconds)
2016-01-15 22:48:38	▶	baweaver (~baweaver@173.230.196.25) has joined #haskell
2016-01-15 22:48:52	⚡	hackagebot fltkhs-fluid-examples 0.0.0.3 - Fltkhs Fluid Examples  https://hackage.haskell.org/package/fltkhs-fluid-examples-0.0.0.3 (deech)
2016-01-15 22:48:54	⚡	hackagebot fltkhs-hello-world 0.0.0.2 - Fltkhs template project  https://hackage.haskell.org/package/fltkhs-hello-world-0.0.0.2 (deech)
2016-01-15 22:50:22	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-15 22:50:39	▶	ph88 (~ph88@541E4F6E.cm-5-7b.dynamic.ziggo.nl) has joined #haskell
2016-01-15 22:51:29	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-15 22:51:49	◀	algae (~algae@blk-138-28-208.eastlink.ca) has quit (Quit: leaving)
2016-01-15 22:51:54	▶	asheshambasta (~asheshamb@d8D862362.access.telenet.be) has joined #haskell
2016-01-15 22:52:51	▶	gfixler (~gfixler@bur-inet-pa-2.disney.com) has joined #haskell
2016-01-15 22:53:50	◀	losingkeys (~losingkey@172.56.12.252) has quit (Ping timeout: 256 seconds)
2016-01-15 22:54:00	◀	baweaver (~baweaver@173.230.196.25) has quit (Ping timeout: 265 seconds)
2016-01-15 22:54:00	◀	clynamen (~clynamen@93-50-191-217.ip153.fastwebnet.it) has quit (Read error: Connection reset by peer)
2016-01-15 22:54:12	◀	croyd (~croyd@129.10.9.72) has quit (Read error: Connection reset by peer)
2016-01-15 22:54:16	▶	noddy2OOO (~self@82.193.222.101) has joined #haskell
2016-01-15 22:54:21	▶	croyd (~croyd@129.10.9.72) has joined #haskell
2016-01-15 22:54:41	◀	suppi (~suppi@unaffiliated/suppi) has quit (Quit: Leaving)
2016-01-15 22:54:46	▶	rcyr (~rcyr@unaffiliated/rcyr) has joined #haskell
2016-01-15 22:55:17	▶	Wes[SA-PHI] (~textual@cpe-66-68-133-135.austin.res.rr.com) has joined #haskell
2016-01-15 22:55:53	▶	cleamoon (~cleamoon@c213-89-124-61.bredband.comhem.se) has joined #haskell
2016-01-15 22:56:33	◀	path[l] (~vsi@c-73-158-39-31.hsd1.ca.comcast.net) has quit (Quit: path[l])
2016-01-15 22:57:11	◀	cpup (~cpup@32.218.117.148) has quit (Ping timeout: 264 seconds)
2016-01-15 22:57:28	▶	steamboat (~sehrlich@pool-96-237-243-68.bstnma.fios.verizon.net) has joined #haskell
2016-01-15 22:57:55	◀	davidfetter (~chatzilla@2601:643:8100:f00:ca60:ff:fe2a:7216) has quit (Ping timeout: 240 seconds)
2016-01-15 22:57:56	◀	Luke (~Luke@unaffiliated/luke) has quit (Quit: sleep)
2016-01-15 22:57:58	▶	redxaxder (~redxaxder@c-73-232-94-188.hsd1.tx.comcast.net) has joined #haskell
2016-01-15 22:57:59	▶	bamboo (~bamboo@201-69-166-128.dial-up.telesp.net.br) has joined #haskell
2016-01-15 22:58:00	▶	lynnard (~lingnan@cpc1-walt13-2-0-cust402.13-2.cable.virginm.net) has joined #haskell
2016-01-15 22:58:10	▶	YP-HW7 (~YP-Win10@5ec019cd.skybroadband.com) has joined #haskell
2016-01-15 22:58:26	◀	plucas (~plucas@8.18.218.175) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-15 22:58:38	▶	cpup (~cpup@32.218.119.15) has joined #haskell
2016-01-15 22:58:39	◀	bb010g (uid21050@gateway/web/irccloud.com/x-zaftewabykefftgv) has quit (Quit: Connection closed for inactivity)
2016-01-15 22:58:58	monochrom	haha I love what lukewarm says about industry quality software
2016-01-15 22:59:01	◀	insitu (~textual@77.201.196.105) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-01-15 22:59:07	▶	clynamen (~clynamen@93-50-191-217.ip153.fastwebnet.it) has joined #haskell
2016-01-15 22:59:51	◀	emilypi (~emilypi@2604:2000:8006:ef00:610f:5fcb:20eb:daa4) has quit (Remote host closed the connection)
2016-01-15 23:00:21	▶	emilypi (~emilypi@2604:2000:8006:ef00:610f:5fcb:20eb:daa4) has joined #haskell
2016-01-15 23:02:11	◀	lynnard (~lingnan@cpc1-walt13-2-0-cust402.13-2.cable.virginm.net) has quit (Ping timeout: 246 seconds)
2016-01-15 23:02:12	tdammers	"industry", "quality", and "software", right next to each other? hah!
2016-01-15 23:02:47	▶	|node (uid125132@gateway/web/irccloud.com/x-czlcgqtblyxidtwm) has joined #haskell
2016-01-15 23:02:48	monochrom	yeah! he wrote something sarcastic
2016-01-15 23:03:03	◀	mizu_no_oto (~textual@c-67-189-145-156.hsd1.ma.comcast.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-15 23:03:47	▶	osa1 (~omer@haskell/developer/osa1) has joined #haskell
2016-01-15 23:03:50	▶	davidfetter (~chatzilla@2601:643:8100:f00:ca60:ff:fe2a:7216) has joined #haskell
2016-01-15 23:04:15	◀	quakehead (~pemican@50.153.135.3) has quit (Ping timeout: 240 seconds)
2016-01-15 23:05:11	◀	wennergr (~textual@EARNEST-OPE.bar1.SanFrancisco1.Level3.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-15 23:06:27	◀	cheetah2 (~cheetah2@172.242.102.144) has quit (Remote host closed the connection)
2016-01-15 23:06:48	▶	cheetah2 (~cheetah2@172.242.102.144) has joined #haskell
2016-01-15 23:07:14	◀	pmade (~pjones@pmade.com) has quit (Ping timeout: 260 seconds)
2016-01-15 23:07:21	▶	ddellacosta (~ddellacos@ool-4578faa9.dyn.optonline.net) has joined #haskell
2016-01-15 23:07:54	▶	baweaver (~baweaver@2601:644:8280:b3c:d5ac:2472:a4e9:3b87) has joined #haskell
2016-01-15 23:08:08	▶	wennergr (~textual@EARNEST-OPE.bar1.SanFrancisco1.Level3.net) has joined #haskell
2016-01-15 23:08:16	▶	pmade (~pjones@69.164.204.29) has joined #haskell
2016-01-15 23:08:47	◀	itsu` (~user@ax313-2-82-224-224-85.fbx.proxad.net) has left #haskell ("ERC (IRC client for Emacs 24.5.1)")
2016-01-15 23:08:55	▶	ype (~ype@cpc45-slam6-2-0-cust434.2-4.cable.virginm.net) has joined #haskell
2016-01-15 23:09:24	Cale	monochrom: lukewarm?
2016-01-15 23:09:29	◀	silver (~silver@93.85.61.139) has quit (Quit: >>=)
2016-01-15 23:10:16	sleblanc	Hiding a data constructor in an internal module seems like a good way to enforce value-dependent types, by exposing functions that have access to the constructor. If I cannot afford to put things in a sub-module (as in a GHCI session) is there a way to hide a data constructor?
2016-01-15 23:10:22	◀	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has quit (Remote host closed the connection)
2016-01-15 23:10:35	◀	wanderleyguima (~wanderley@199.201.64.2) has quit (Ping timeout: 240 seconds)
2016-01-15 23:10:45	▶	mac10688 (~mac10688@c-69-180-251-120.hsd1.tn.comcast.net) has joined #haskell
2016-01-15 23:10:54	▶	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #haskell
2016-01-15 23:10:54	sleblanc	Like a compiler pragma that would tell GHC/GHCI "From now on, newly-defined functions cannot refer to this constructor anymore"
2016-01-15 23:11:34	◀	sepp2k (~sepp2k@141.83.118.210) has quit (Quit: Leaving.)
2016-01-15 23:11:46	◀	emmanuel_erc (~user@d-128-74-143.bootp.Virginia.EDU) has quit (Remote host closed the connection)
2016-01-15 23:12:30	▶	lynnard (~lingnan@cpc1-walt13-2-0-cust402.13-2.cable.virginm.net) has joined #haskell
2016-01-15 23:13:10	▶	path[l] (~vsi@c-73-158-39-31.hsd1.ca.comcast.net) has joined #haskell
2016-01-15 23:13:15	◀	baweaver (~baweaver@2601:644:8280:b3c:d5ac:2472:a4e9:3b87) has quit (Ping timeout: 240 seconds)
2016-01-15 23:13:16	◀	chrisramsey (~chrisrams@192.171.117.210) has quit (Remote host closed the connection)
2016-01-15 23:13:29	◀	quchen (~quchen@ipb21a1330.dynamic.kabel-deutschland.de) has quit (Ping timeout: 245 seconds)
2016-01-15 23:14:10	◀	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-01-15 23:14:41	▶	emirypi (~emilypi@2604:2000:8006:ef00:ddcb:5a24:f595:44cc) has joined #haskell
2016-01-15 23:15:05	◀	emilypi (~emilypi@2604:2000:8006:ef00:610f:5fcb:20eb:daa4) has quit (Ping timeout: 260 seconds)
2016-01-15 23:16:03	◀	dsh (~daishi@ool-18bd7436.dyn.optonline.net) has quit (Quit: Leaving)
2016-01-15 23:16:58	◀	chaosmasttter (~chaosmast@p54B7F8CF.dip0.t-ipconnect.de) has quit (Quit: WeeChat 1.3)
2016-01-15 23:17:04	▶	chrisramsey (~chrisrams@192.171.117.210) has joined #haskell
2016-01-15 23:17:37	▶	tomboy65 (~tomboy64@unaffiliated/tomboy64) has joined #haskell
2016-01-15 23:17:40	◀	dgpratt (~dpratt71@207.182.208.2) has quit (Ping timeout: 276 seconds)
2016-01-15 23:18:53	▶	crikiit (~crikitz@50.248.81.65) has joined #haskell
2016-01-15 23:19:11	◀	pmade (~pjones@69.164.204.29) has quit (Quit: ZNC - http://znc.in)
2016-01-15 23:19:29	▶	haskell800 (bff27012@gateway/web/freenode/ip.191.242.112.18) has joined #haskell
2016-01-15 23:19:47	▶	wanderleyguima (~wanderley@199.201.64.2) has joined #haskell
2016-01-15 23:20:35	◀	micmus (~micmus@bpc46.neoplus.adsl.tpnet.pl) has quit (Ping timeout: 264 seconds)
2016-01-15 23:20:43	▶	Welkin (~Welkin@rrcs-97-78-71-197.se.biz.rr.com) has joined #haskell
2016-01-15 23:21:26	◀	path[l] (~vsi@c-73-158-39-31.hsd1.ca.comcast.net) has quit (Quit: path[l])
2016-01-15 23:22:11	▶	sanitypassing (~sanitypas@104.131.118.227) has joined #haskell
2016-01-15 23:22:11	◀	sanitypassing (~sanitypas@104.131.118.227) has quit (Changing host)
2016-01-15 23:22:11	▶	sanitypassing (~sanitypas@unaffiliated/sanitypassing) has joined #haskell
2016-01-15 23:22:33	◀	sanitypassing (~sanitypas@unaffiliated/sanitypassing) has quit (Client Quit)
2016-01-15 23:23:10	◀	quaestor3 (~quaestor@ipbcc25c72.dynamic.kabel-deutschland.de) has quit (Quit: WeeChat 1.3)
2016-01-15 23:23:11	◀	L8D (~L8D@cpe-70-123-155-208.austin.res.rr.com) has quit (Ping timeout: 246 seconds)
2016-01-15 23:23:14	Cale	sleblanc: Not as far as I'm aware. Modules are the main way to abstract things.
2016-01-15 23:23:16	◀	cheetah2 (~cheetah2@172.242.102.144) has quit (Remote host closed the connection)
2016-01-15 23:23:32	◀	NoCreativity (~quassel@187.110.234.144) has quit (Ping timeout: 246 seconds)
2016-01-15 23:23:35	◀	wennergr (~textual@EARNEST-OPE.bar1.SanFrancisco1.Level3.net) has quit (Ping timeout: 240 seconds)
2016-01-15 23:23:48	◀	haskell800 (bff27012@gateway/web/freenode/ip.191.242.112.18) has quit (Ping timeout: 252 seconds)
2016-01-15 23:23:49	Cale	sleblanc: Generally you want to keep the amount of important code and definitions that you type into ghci to a minimum, since it's easy to lose things that way
2016-01-15 23:24:10	▶	rzl (~rzl@a95-92-89-249.cpe.netcabo.pt) has joined #haskell
2016-01-15 23:24:18	▶	CatMtKing (~CatMtKing@wsip-70-167-11-90.sd.sd.cox.net) has joined #haskell
2016-01-15 23:24:27	◀	CatMtKing (~CatMtKing@wsip-70-167-11-90.sd.sd.cox.net) has quit (Client Quit)
2016-01-15 23:24:44	◀	cleamoon (~cleamoon@c213-89-124-61.bredband.comhem.se) has quit (Ping timeout: 255 seconds)
2016-01-15 23:25:38	◀	danvet (~daniel@2a02:168:56c9:0:22cf:30ff:fe4c:37d6) has quit (Ping timeout: 255 seconds)
2016-01-15 23:25:39	◀	rzl (~rzl@a95-92-89-249.cpe.netcabo.pt) has quit (Client Quit)
2016-01-15 23:25:49	◀	rikonor (~rikonor@ool-457b460f.dyn.optonline.net) has quit (Remote host closed the connection)
2016-01-15 23:25:51	▶	cheetah2 (~cheetah2@172.242.102.144) has joined #haskell
2016-01-15 23:26:01	▶	rikonor (~rikonor@ool-457b460f.dyn.optonline.net) has joined #haskell
2016-01-15 23:28:17	◀	hellertime (~hellertim@72.246.3.14) has quit (Quit: Leaving.)
2016-01-15 23:28:20	▶	sanitypassing (~sanitypas@2604:a880:800:10::262:3001) has joined #haskell
2016-01-15 23:28:20	◀	sanitypassing (~sanitypas@2604:a880:800:10::262:3001) has quit (Changing host)
2016-01-15 23:28:20	▶	sanitypassing (~sanitypas@unaffiliated/sanitypassing) has joined #haskell
2016-01-15 23:28:36	◀	sanitypassing (~sanitypas@unaffiliated/sanitypassing) has quit (Client Quit)
2016-01-15 23:29:14	◀	ype (~ype@cpc45-slam6-2-0-cust434.2-4.cable.virginm.net) has quit (Ping timeout: 255 seconds)
2016-01-15 23:29:15	▶	dgpratt (~dpratt71@pool-72-65-102-4.ptldme.east.myfairpoint.net) has joined #haskell
2016-01-15 23:29:32	▶	cleamoon (~cleamoon@c213-89-124-61.bredband.comhem.se) has joined #haskell
2016-01-15 23:29:43	sleblanc	Cale, yeah, I get it. It seems like a :delete or :hide command would be useful in GHCI.
2016-01-15 23:30:15	Welkin	Cale: or have one giagantic let ... in
2016-01-15 23:30:18	▶	sanitypassing (~sanitypas@2604:a880:800:10::262:3001) has joined #haskell
2016-01-15 23:30:18	◀	sanitypassing (~sanitypas@2604:a880:800:10::262:3001) has quit (Changing host)
2016-01-15 23:30:18	▶	sanitypassing (~sanitypas@unaffiliated/sanitypassing) has joined #haskell
2016-01-15 23:30:47	◀	t0by (~t0by@host100-217-dynamic.24-79-r.retail.telecomitalia.it) has quit (Remote host closed the connection)
2016-01-15 23:30:53	◀	afcondon (~afcondon@109.76.71.126) has quit (Remote host closed the connection)
2016-01-15 23:30:56	◀	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2016-01-15 23:31:00	Cale	Yeah, I guess if we're going to have all these declaration forms, we could also just allow module declarations
2016-01-15 23:31:35	◀	chrisramsey (~chrisrams@192.171.117.210) has quit (Remote host closed the connection)
2016-01-15 23:31:45	Cale	But I don't know how I feel about allowing declarations in the first place :P
2016-01-15 23:32:20	▶	aigbem (~ksternhag@142-254-102-34.dedicated.static.sonic.net) has joined #haskell
2016-01-15 23:32:42	Cale	I guess I grew up in a time when what GHCi did was much more straightforward
2016-01-15 23:32:55	◀	asheshambasta (~asheshamb@d8D862362.access.telenet.be) has quit (Quit: Leaving.)
2016-01-15 23:33:04	Welkin	Cale: get off my lawn!
2016-01-15 23:33:20	Cale	(it used to be that you couldn't even make new declarations, let alone data declarations)
2016-01-15 23:33:36	◀	aigbem (~ksternhag@142-254-102-34.dedicated.static.sonic.net) has left #haskell
2016-01-15 23:33:37	◀	firstdayonthejob (~firstdayo@cpc91184-cmbg18-2-0-cust232.5-4.cable.virginm.net) has quit (Read error: Connection reset by peer)
2016-01-15 23:33:45	▶	bennofs (~benno@2a02:810a:8200:2934:56ee:75ff:fe53:d108) has joined #haskell
2016-01-15 23:33:57	▶	lethjakman-l (~lethjakma@71.56.221.51) has joined #haskell
2016-01-15 23:34:04	▶	codesoup (~codesoup@CPE00fc8de45853-CM00fc8de45850.cpe.net.cable.rogers.com) has joined #haskell
2016-01-15 23:34:25	▶	nomeata (~jojo@nomeata.de) has joined #haskell
2016-01-15 23:34:57	Cale	Which while it seems like a convenience (and I'll admit, sometimes is), it's also asking users to shoot themselves in the foot to some extent. Maybe ghci should only let you make declarations if it had a file to put them in for you, and it should work by adding to that file and reloading it as you go.
2016-01-15 23:35:05	◀	bamboo (~bamboo@201-69-166-128.dial-up.telesp.net.br) has quit (Quit: bamboo)
2016-01-15 23:35:17	▶	paxxonick (5ff567b5@gateway/web/freenode/ip.95.245.103.181) has joined #haskell
2016-01-15 23:35:25	▶	Zekka (~zekka@ip24-251-69-145.ph.ph.cox.net) has joined #haskell
2016-01-15 23:35:27	◀	dwins (~dwins@c-73-200-135-248.hsd1.va.comcast.net) has quit (Remote host closed the connection)
2016-01-15 23:35:30	sleblanc	Cale, at this point, you might as well make GHCI an Emacs mode or Vim extension
2016-01-15 23:35:42	◀	JagaJaga (~JagaJaga@178.62.202.50) has quit (Ping timeout: 260 seconds)
2016-01-15 23:35:47	▶	huckleberry78 (~huckleber@104-176-154-16.lightspeed.tukrga.sbcglobal.net) has joined #haskell
2016-01-15 23:36:08	▶	bb010g (uid21050@gateway/web/irccloud.com/x-pqkpjpdirxycolsj) has joined #haskell
2016-01-15 23:36:12	Cale	sleblanc: I like that it's editor agnostic though
2016-01-15 23:36:20	◀	Ziltrum (~Destol@public-116-143.nat.utoronto.ca) has quit (Ping timeout: 256 seconds)
2016-01-15 23:36:23	▶	oisdk_ (~oisdk_@95.45.70.25) has joined #haskell
2016-01-15 23:36:25	▶	afcondon (~afcondon@109.76.71.126) has joined #haskell
2016-01-15 23:36:36	Cale	sleblanc: The standard thing to do is just to always have your favourite text editor open alongside ghci
2016-01-15 23:36:40	◀	canyonero (~canyonero@66-195-4-2.static.twtelecom.net) has quit (Ping timeout: 260 seconds)
2016-01-15 23:36:52	Cale	sleblanc: when you make changes to the set of declarations, you type :r in ghci and it reloads
2016-01-15 23:37:23	▶	path[l] (~vsi@c-73-158-39-31.hsd1.ca.comcast.net) has joined #haskell
2016-01-15 23:37:56	▶	yfeldblum (~yfeldblum@2620:10d:c090:200::a:8709) has joined #haskell
2016-01-15 23:37:57	◀	rodlogic (~rodlogic@179.159.96.218) has quit (Read error: Connection reset by peer)
2016-01-15 23:38:04	▶	jmcarthur (~jmcarthur@pool-72-89-137-39.nycmny.fios.verizon.net) has joined #haskell
2016-01-15 23:38:25	▶	bamboo (~bamboo@201-69-166-128.dial-up.telesp.net.br) has joined #haskell
2016-01-15 23:38:29	▶	rodlogic (~rodlogic@179.159.96.218) has joined #haskell
2016-01-15 23:38:41	◀	lethjakman-l (~lethjakma@71.56.221.51) has quit (Ping timeout: 255 seconds)
2016-01-15 23:40:29	◀	huckleberry78 (~huckleber@104-176-154-16.lightspeed.tukrga.sbcglobal.net) has quit (Ping timeout: 255 seconds)
2016-01-15 23:41:02	◀	doomlord (~textual@host86-149-133-173.range86-149.btcentralplus.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-15 23:41:15	▶	micmus (~micmus@eaq159.neoplus.adsl.tpnet.pl) has joined #haskell
2016-01-15 23:41:48	▶	amdi_ (~amdi_@pool-173-75-44-5.pitbpa.fios.verizon.net) has joined #haskell
2016-01-15 23:43:39	◀	cereal_killer_ (~ernesto@179-8-245-190.fibertel.com.ar) has quit (Quit: Konversation terminated!)
2016-01-15 23:43:43	◀	rdrx (~user@TOROON0547W-LP140-05-1279738290.dsl.bell.ca) has quit (Quit: ERC (IRC client for Emacs 24.5.1))
2016-01-15 23:44:32	◀	cleamoon (~cleamoon@c213-89-124-61.bredband.comhem.se) has quit (Ping timeout: 255 seconds)
2016-01-15 23:45:01	◀	micmus (~micmus@eaq159.neoplus.adsl.tpnet.pl) has quit (Client Quit)
2016-01-15 23:45:25	◀	HylianSavior (~mafuyu@unaffiliated/hyliansavior) has quit (Ping timeout: 260 seconds)
2016-01-15 23:46:35	▶	firstdayonthejob (~firstdayo@cpc91184-cmbg18-2-0-cust232.5-4.cable.virginm.net) has joined #haskell
2016-01-15 23:47:10	▶	psyq_ (~psyq@178.62.210.183) has joined #haskell
2016-01-15 23:48:03	◀	afcondon (~afcondon@109.76.71.126) has quit (Remote host closed the connection)
2016-01-15 23:48:17	▶	cleamoon (~cleamoon@c213-89-124-61.bredband.comhem.se) has joined #haskell
2016-01-15 23:48:41	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Remote host closed the connection)
2016-01-15 23:48:54	◀	aartamonau (~shaleny@206.169.106.2) has quit (Ping timeout: 245 seconds)
2016-01-15 23:49:49	▶	doomlord (~textual@host86-149-133-173.range86-149.btcentralplus.com) has joined #haskell
2016-01-15 23:50:25	▶	Philonous_ (~Philonous@unaffiliated/philonous) has joined #haskell
2016-01-15 23:50:37	◀	doomlord (~textual@host86-149-133-173.range86-149.btcentralplus.com) has quit (Client Quit)
2016-01-15 23:51:38	▶	doomlord (~textual@host86-149-133-173.range86-149.btcentralplus.com) has joined #haskell
2016-01-15 23:51:41	◀	path[l] (~vsi@c-73-158-39-31.hsd1.ca.comcast.net) has quit (Quit: path[l])
2016-01-15 23:51:54	▶	Ab123 (0e8b7a72@gateway/web/freenode/ip.14.139.122.114) has joined #haskell
2016-01-15 23:52:16	◀	itsu (~user@ax313-2-82-224-224-85.fbx.proxad.net) has quit (Remote host closed the connection)
2016-01-15 23:52:30	▶	HylianSavior (~mafuyu@unaffiliated/hyliansavior) has joined #haskell
2016-01-15 23:52:37	◀	doomlord (~textual@host86-149-133-173.range86-149.btcentralplus.com) has quit (Client Quit)
2016-01-15 23:52:52	◀	etcinit (uid138708@gateway/web/irccloud.com/x-jqfsvunehopwxqdr) has quit (Quit: Connection closed for inactivity)
2016-01-15 23:53:00	◀	Philonous (~Philonous@unaffiliated/philonous) has quit (Ping timeout: 260 seconds)
2016-01-15 23:53:29	◀	cyborg-one (~cyborg-on@31.31.100.51) has quit (Quit: cyborg-one)
2016-01-15 23:53:37	▶	doomlord (~textual@host86-149-133-173.range86-149.btcentralplus.com) has joined #haskell
2016-01-15 23:53:38	▶	plucas (~plucas@8.18.218.175) has joined #haskell
2016-01-15 23:53:53	ReinH	 sleblanc well, there is an interactive mode for emacs that gives you a ghci window
2016-01-15 23:54:05	ReinH	but there's no reason to get rid of plain ghci
2016-01-15 23:54:12	◀	plucas (~plucas@8.18.218.175) has quit (Client Quit)
2016-01-15 23:54:27	◀	doomlord (~textual@host86-149-133-173.range86-149.btcentralplus.com) has quit (Client Quit)
2016-01-15 23:55:09	◀	paxxonick (5ff567b5@gateway/web/freenode/ip.95.245.103.181) has quit (Ping timeout: 252 seconds)
2016-01-15 23:55:27	▶	doomlord (~textual@host86-149-133-173.range86-149.btcentralplus.com) has joined #haskell
2016-01-15 23:55:32	◀	ianhedoesit (~ian@c-24-21-188-17.hsd1.or.comcast.net) has quit (Quit: leaving)
2016-01-15 23:56:17	◀	doomlord (~textual@host86-149-133-173.range86-149.btcentralplus.com) has quit (Client Quit)
2016-01-15 23:57:11	◀	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has quit (Ping timeout: 264 seconds)
2016-01-15 23:57:17	▶	doomlord (~textual@host86-149-133-173.range86-149.btcentralplus.com) has joined #haskell
2016-01-15 23:57:23	◀	tomboy65 (~tomboy64@unaffiliated/tomboy64) has quit (Read error: Connection reset by peer)
2016-01-15 23:57:54	▶	javjarfer (~javjarfer@75.Red-81-44-195.dynamicIP.rima-tde.net) has joined #haskell
2016-01-15 23:58:13	▶	path[l] (~vsi@c-73-158-39-31.hsd1.ca.comcast.net) has joined #haskell
2016-01-15 23:58:30	◀	doomlord (~textual@host86-149-133-173.range86-149.btcentralplus.com) has quit (Client Quit)
2016-01-15 23:59:06	▶	NoCreativity (~quassel@187.110.234.144) has joined #haskell
2016-01-15 23:59:10	▶	tomboy65 (~tomboy64@unaffiliated/tomboy64) has joined #haskell
2016-01-15 23:59:38	▶	sepp2k (~Sepp2k@x5ce77c92.dyn.telefonica.de) has joined #haskell
2016-01-16 00:00:04	◀	umib0zu (~umib0zu@c-50-177-152-117.hsd1.ma.comcast.net) has quit (Quit: umib0zu)
2016-01-16 00:00:11	◀	mgsloan (~mgsloan@157.130.186.54) has quit (Ping timeout: 264 seconds)
2016-01-16 00:01:18	◀	lyuha (uid43824@gateway/web/irccloud.com/x-xpvbwctmtilzmkwg) has quit (Quit: Connection closed for inactivity)
2016-01-16 00:01:36	▶	mgsloan (~mgsloan@157.130.186.54) has joined #haskell
2016-01-16 00:01:37	◀	pyon (~user@unaffiliated/pyon) has quit (Quit: Loops are hard. Let's GOTO shopping!)
2016-01-16 00:01:48	▶	PatrickRobotham (uid18270@gateway/web/irccloud.com/x-tcbjnwcimvqquyez) has joined #haskell
2016-01-16 00:03:29	◀	guampa (~guampa@unaffiliated/guampa) has quit (Ping timeout: 245 seconds)
2016-01-16 00:03:41	▶	ype (~ype@cpc45-slam6-2-0-cust434.2-4.cable.virginm.net) has joined #haskell
2016-01-16 00:03:53	▶	acowley (~user@pool-72-82-172-59.cmdnnj.east.verizon.net) has joined #haskell
2016-01-16 00:04:22	◀	tomboy65 (~tomboy64@unaffiliated/tomboy64) has quit (Ping timeout: 272 seconds)
2016-01-16 00:04:32	◀	dadaro (~androidde@78.173.237.110) has quit (Read error: Connection reset by peer)
2016-01-16 00:04:42	▶	aarvar (~foewfoiew@c-66-235-6-23.sea.wa.customer.broadstripe.net) has joined #haskell
2016-01-16 00:04:59	◀	ype (~ype@cpc45-slam6-2-0-cust434.2-4.cable.virginm.net) has quit (Read error: Connection reset by peer)
2016-01-16 00:05:13	▶	ype (~ype@cpc45-slam6-2-0-cust434.2-4.cable.virginm.net) has joined #haskell
2016-01-16 00:05:19	◀	Arkooi (~Arkooij@095-096-221-109.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-16 00:05:20	◀	Sonolin (~michael@wsip-184-178-115-131.sd.sd.cox.net) has quit (Quit: Lost terminal)
2016-01-16 00:06:47	▶	haslklklk (25c9abf1@gateway/web/freenode/ip.37.201.171.241) has joined #haskell
2016-01-16 00:07:08	◀	alem0lars (alem0lars@0xcc.alem0lars.me) has quit (Ping timeout: 250 seconds)
2016-01-16 00:07:08	◀	Guest56043 (no-n@that.bitch.stole-your.pw) has quit (Ping timeout: 250 seconds)
2016-01-16 00:07:34	◀	SolarAquarion (SolarAquar@the.feds.nullrouted.us) has quit (Ping timeout: 250 seconds)
2016-01-16 00:07:34	◀	xacktm (xacktm@unaffiliated/xacktm) has quit (Ping timeout: 250 seconds)
2016-01-16 00:08:48	▶	lethjakman-l (~lethjakma@71.56.221.51) has joined #haskell
2016-01-16 00:09:06	◀	Wes[SA-PHI] (~textual@cpe-66-68-133-135.austin.res.rr.com) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-16 00:09:18	◀	acowley (~user@pool-72-82-172-59.cmdnnj.east.verizon.net) has quit (Ping timeout: 260 seconds)
2016-01-16 00:09:18	◀	Klumben (Nsaiswatch@elmo.stole-your.pw) has quit (Ping timeout: 250 seconds)
2016-01-16 00:10:31	◀	nomeata (~jojo@nomeata.de) has quit (Quit: Client exiting)
2016-01-16 00:11:22	◀	ralu (~ralu@188-230-130-87.dynamic.t-2.net) has quit (Remote host closed the connection)
2016-01-16 00:11:33	▶	doomlord (~textual@host86-149-133-173.range86-149.btcentralplus.com) has joined #haskell
2016-01-16 00:12:01	▶	t7 (~chatzilla@5-179-100-38.glidedsl.com) has joined #haskell
2016-01-16 00:12:23	▶	acowley (~user@pool-72-82-172-59.cmdnnj.east.verizon.net) has joined #haskell
2016-01-16 00:12:59	◀	saml (~saml@adfb12c6.cst.lightpath.net) has quit (Quit: Leaving)
2016-01-16 00:13:13	haslklklk	hello (i hope this is the correct place to ask this), i recently started learning haskell and I run in a problem when I try to compile my code. Haskell seems to expect a bool where I expect an Int: https://gist.github.com/anonymous/fb01d317bf7e7700658d  
2016-01-16 00:13:36	◀	broma0 (~broma0@ool-182e23f2.dyn.optonline.net) has quit (Quit: WeeChat 1.3)
2016-01-16 00:13:53	◀	cheetah2 (~cheetah2@172.242.102.144) has quit (Remote host closed the connection)
2016-01-16 00:14:07	glguy	haslklklk: The second clause in your containsFour definition is matching on the number 4, not a list starting with a 4
2016-01-16 00:14:14	◀	ype (~ype@cpc45-slam6-2-0-cust434.2-4.cable.virginm.net) has quit (Ping timeout: 255 seconds)
2016-01-16 00:14:19	acowley	haslklklk: You have a couple problems there. The one you're referring to is due to returning a list.
2016-01-16 00:14:28	glguy	haslklklk: the third clause is returning a new list instead of the boolean answer
2016-01-16 00:14:30	◀	lethjakman-l (~lethjakma@71.56.221.51) has quit (Ping timeout: 272 seconds)
2016-01-16 00:14:56	◀	strburst (~allen@res388d-128-61-88-50.res.gatech.edu) has quit (Ping timeout: 250 seconds)
2016-01-16 00:15:12	acowley	haslklklk: What do you intend "x:" to be doing on the right-hand side of the third equation?
2016-01-16 00:16:06	◀	Ab123 (0e8b7a72@gateway/web/freenode/ip.14.139.122.114) has left #haskell
2016-01-16 00:16:49	haslklklk	i have a list of ints (i.e 1,2,3,4) and want to get the first number as an integer. The rest of the list should be checked again  
2016-01-16 00:17:05	◀	gfixler (~gfixler@bur-inet-pa-2.disney.com) has quit (Ping timeout: 246 seconds)
2016-01-16 00:17:24	acowley	haslklklk: The type you've written for your function says it returns a Bool
2016-01-16 00:18:05	acowley	haslklklk: So it's not clear how you could "get the first number as an integer" if you are producing a Bool
2016-01-16 00:18:13	◀	croyd (~croyd@129.10.9.72) has quit (Remote host closed the connection)
2016-01-16 00:18:46	haslklklk	i have to write a programm that checks if a list of ints contains a "4" and return true or false, and i should use recursion
2016-01-16 00:19:17	acowley	haslklklk: Okay, so when you're working with a list, the way to approach it is to break it down: A list can be empty, or non-empty.
2016-01-16 00:19:32	acowley	haslklklk: You've written the first equation correctly, so you're half done! :)
2016-01-16 00:19:55	◀	Wizek (~Wizek@catv-89-132-132-110.catv.broadband.hu) has quit (Ping timeout: 240 seconds)
2016-01-16 00:20:28	acowley	haslklklk: The next case to consider is a non-empty list. So you pattern-match on that as you've done in the third equation.
2016-01-16 00:20:44	acowley	haslklklk: Those two patterns cover all possible lists!
2016-01-16 00:21:27	acowley	haslklklk: Now you've got x and xs from the pattern match, what do we do with the x?
2016-01-16 00:21:34	▶	u-ou (no-n@that.bitch.stole-your.pw) has joined #haskell
2016-01-16 00:21:49	◀	rcyr (~rcyr@unaffiliated/rcyr) has quit (Quit: Bye!)
2016-01-16 00:21:58	ℹ	u-ou is now known as Guest91784
2016-01-16 00:22:03	haslklklk	I'd to check if the x equals 4
2016-01-16 00:22:05	▶	SolarAquarion (SolarAquar@the.feds.nullrouted.us) has joined #haskell
2016-01-16 00:22:07	haslklklk	*want
2016-01-16 00:22:13	acowley	haslklklk: Right!
2016-01-16 00:22:31	acowley	haslklklk: There are several ways to write this, but we'll stick to the way you've done it.
2016-01-16 00:22:58	acowley	haslklklk: So we'll take the pattern (x:xs), and replace the x with 4 in the pattern.
2016-01-16 00:23:20	▶	tomboy64 (~tomboy64@unaffiliated/tomboy64) has joined #haskell
2016-01-16 00:23:27	acowley	haslklklk: That gives you an equation "containsFour (4:xs) = _". What do we replace the "_" with?
2016-01-16 00:23:33	▶	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has joined #haskell
2016-01-16 00:24:49	▶	usershell (~usershell@41.136.116.163) has joined #haskell
2016-01-16 00:25:18	haslklklk	um, we still want to have :containsFour(xs) at the end I guess?
2016-01-16 00:25:23	◀	kurt11 (~Adium@207.191.34.198) has quit (Quit: Leaving.)
2016-01-16 00:25:43	haslklklk	no wait, we want a bool at the end right?
2016-01-16 00:25:52	acowley	haslklklk: Right, we need to replace "_" with a Bool
2016-01-16 00:26:02	acowley	haslklklk: And we know we have a list that begins with a 4
2016-01-16 00:26:18	haslklklk	we would need true there
2016-01-16 00:27:00	haslklklk	(since our lists starts with a four)
2016-01-16 00:27:10	acowley	haslklklk: Right! So we've considered empty lists, and lists that begin with 4.
2016-01-16 00:27:31	◀	path[l] (~vsi@c-73-158-39-31.hsd1.ca.comcast.net) has quit (Quit: path[l])
2016-01-16 00:27:33	acowley	haslklklk: So, writing things this way, we'll need one more equation that will look at lot like the second.
2016-01-16 00:27:48	acowley	"a lot like"
2016-01-16 00:28:06	◀	timmy_tofu (~tofu@cpe-69-207-86-178.rochester.res.rr.com) has quit (Ping timeout: 240 seconds)
2016-01-16 00:28:13	acowley	haslklklk: What do the lists we haven't pattern matched look like? Can they be empty?
2016-01-16 00:28:40	haslklklk	They can't be empty (would be first case) and they can't begin with 4 (second case)
2016-01-16 00:29:15	◀	neoncontrails (~neoncontr@2602:304:cc4e:9410:80ba:d82e:ce92:bc1) has quit (Ping timeout: 240 seconds)
2016-01-16 00:29:32	acowley	haslklklk: Awesome, so how can we match a non-empty list where we don't look for any particular value in its head?
2016-01-16 00:30:53	◀	cleamoon (~cleamoon@c213-89-124-61.bredband.comhem.se) has quit (Ping timeout: 255 seconds)
2016-01-16 00:30:55	▶	jgrocho (jgrocho@2600:3c01::f03c:91ff:fe37:4783) has joined #haskell
2016-01-16 00:30:55	◀	usershell (~usershell@41.136.116.163) has quit (Ping timeout: 240 seconds)
2016-01-16 00:31:07	▶	michas (~michas@f049155062.adsl.alicedsl.de) has joined #haskell
2016-01-16 00:31:17	haslklklk	something along the lines of x:xs ?
2016-01-16 00:31:24	acowley	haslklklk: You got it!
2016-01-16 00:31:43	acowley	haslklklk: And now we know what about x?
2016-01-16 00:31:44	▶	bos (~bos@facebook/mercurial/bos) has joined #haskell
2016-01-16 00:32:18	▶	path[l] (~vsi@c-73-158-39-31.hsd1.ca.comcast.net) has joined #haskell
2016-01-16 00:32:34	haslklklk	it's an int (except 4)
2016-01-16 00:33:07	◀	cdg (~cdg@157.166.175.129) has quit (Remote host closed the connection)
2016-01-16 00:33:43	acowley	haslklklk: Exactly right, so what's left is to figure out if the rest of the list containsFour, and you know how to do that, right?
2016-01-16 00:35:13	▶	croyd (~croyd@146-115-81-34.c3-0.sbo-ubr1.sbo.ma.cable.rcn.com) has joined #haskell
2016-01-16 00:35:22	haslklklk	I'd cut the first element of the list until it starts with 4 or it's empty
2016-01-16 00:35:49	acowley	haslklklk: We already have a name for that from the pattern we used in the third equation!
2016-01-16 00:36:20	◀	csd_ (~chris@pool-108-30-122-128.nycmny.fios.verizon.net) has quit (Ping timeout: 246 seconds)
2016-01-16 00:36:50	acowley	haslklklk: The third equation we've written thus far is "containsFour (x:xs) = _" We know x is not 4, and we need to return a Bool. What do have left to work with?
2016-01-16 00:37:02	▶	Heasummn (~Heasummn@c-73-51-87-243.hsd1.il.comcast.net) has joined #haskell
2016-01-16 00:37:05	▶	Gurkenglas (Gurkenglas@dslb-188-103-077-131.188.103.pools.vodafone-ip.de) has joined #haskell
2016-01-16 00:37:20	◀	bos (~bos@facebook/mercurial/bos) has quit (Ping timeout: 260 seconds)
2016-01-16 00:37:54	haslklklk	containsFour(xs) ?
2016-01-16 00:38:04	acowley	haslklklk: Bingo!
2016-01-16 00:38:12	acowley	haslklklk: Except we'd write it "containsFour xs"
2016-01-16 00:38:34	◀	mgsloan (~mgsloan@157.130.186.54) has quit (Ping timeout: 272 seconds)
2016-01-16 00:38:37	haslklklk	thanks, a lot acowley
2016-01-16 00:38:54	acowley	haslklklk: One way to think about getting there is to consider that we still have "xs" from our pattern, and we need to turn it, an [Int], to a Bool. A function that does that is containsFour.
2016-01-16 00:39:21	acowley	haslklklk: No problem!
2016-01-16 00:39:50	▶	mgsloan (~mgsloan@157.130.186.54) has joined #haskell
2016-01-16 00:40:14	▶	mfitton (~mfitton@c-76-115-184-183.hsd1.or.comcast.net) has joined #haskell
2016-01-16 00:40:32	◀	ziocroc (~ziocroc@151.74.99.167) has quit (Ping timeout: 246 seconds)
2016-01-16 00:40:57	▶	ziocroc (~ziocroc@151.74.99.167) has joined #haskell
2016-01-16 00:41:00	◀	takle (~takle@cpc73668-dals20-2-0-cust505.20-2.cable.virginm.net) has quit (Remote host closed the connection)
2016-01-16 00:41:36	▶	cleamoon (~cleamoon@c213-89-124-61.bredband.comhem.se) has joined #haskell
2016-01-16 00:41:38	haslklklk	I understood it now (and it compiles now), thanks for that awesome explaination 
2016-01-16 00:41:47	◀	josdeha_rt (~josdehart@535299F3.cm-6-3c.dynamic.ziggo.nl) has quit (Quit: josdeha_rt)
2016-01-16 00:41:58	▶	Wes[SA-PHI] (~textual@cpe-66-68-133-135.austin.res.rr.com) has joined #haskell
2016-01-16 00:42:02	haslklklk	*explanation
2016-01-16 00:42:05	▶	dobq (~tulcod@unaffiliated/tulcod) has joined #haskell
2016-01-16 00:44:18	▶	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined #haskell
2016-01-16 00:44:44	◀	rcosta (~rcosta@217.38.102.200) has quit (Ping timeout: 245 seconds)
2016-01-16 00:45:09	◀	IlanGodik (uid40361@gateway/web/irccloud.com/x-nrxgxwblgkfmzdpi) has quit (Quit: Connection closed for inactivity)
2016-01-16 00:45:26	▶	baweaver (~baweaver@173.230.196.25) has joined #haskell
2016-01-16 00:45:43	▶	homovitruvius (~user@pool-108-17-70-127.pitbpa.fios.verizon.net) has joined #haskell
2016-01-16 00:45:59	dobq	is it right that STM objects are destroyed/freed by the garbage collector? since there are new* but no free* methods
2016-01-16 00:46:07	◀	darkbolt (~darkbolt@64.187.165.143) has quit (Remote host closed the connection)
2016-01-16 00:48:16	▶	felixn (~felixn@c-24-20-160-85.hsd1.or.comcast.net) has joined #haskell
2016-01-16 00:48:16	◀	zipper (~luv_panda@unaffiliated/zipper) has quit (Quit: Gone to pet the sleepy panda.)
2016-01-16 00:49:22	◀	disgrntld (~levi@12.228.157.10) has quit (Quit: Leaving.)
2016-01-16 00:50:14	◀	fizbin (~Adium@pool-173-72-85-97.cmdnnj.east.verizon.net) has quit (Quit: Leaving.)
2016-01-16 00:50:19	▶	plucas (~plucas@8.18.218.175) has joined #haskell
2016-01-16 00:50:38	◀	haslklklk (25c9abf1@gateway/web/freenode/ip.37.201.171.241) has quit (Quit: Page closed)
2016-01-16 00:50:51	◀	Guest46277 (~vexed__@anon-41-238.vpn.ipredator.se) has quit (Remote host closed the connection)
2016-01-16 00:50:52	▶	Guest5473 (Haigha@gateway/vpn/mullvad/x-pdpcnqvokmvinuhl) has joined #haskell
2016-01-16 00:51:01	▶	strburst (~allen@res388d-128-61-88-50.res.gatech.edu) has joined #haskell
2016-01-16 00:51:41	▶	kurt11 (~Adium@207.191.34.198) has joined #haskell
2016-01-16 00:52:09	◀	hamishmack (~hamishmac@121.73.30.206) has quit (Quit: hamishmack)
2016-01-16 00:52:22	▶	bobvh (~bobvh@s55962b81.adsl.online.nl) has joined #haskell
2016-01-16 00:52:25	▶	alem0lars (alem0lars@0xcc.alem0lars.me) has joined #haskell
2016-01-16 00:52:59	◀	kurt11 (~Adium@207.191.34.198) has quit (Client Quit)
2016-01-16 00:53:05	◀	javjarfer (~javjarfer@75.Red-81-44-195.dynamicIP.rima-tde.net) has quit (Ping timeout: 260 seconds)
2016-01-16 00:53:19	▶	adamCS (~textual@cpe-74-71-211-64.nyc.res.rr.com) has joined #haskell
2016-01-16 00:54:57	▶	umib0zu (~umib0zu@146-115-43-219.c3-0.abr-ubr1.sbo-abr.ma.cable.rcn.com) has joined #haskell
2016-01-16 00:56:06	◀	hiratara (~hiratara@240f:7:4708:1:d886:382e:da1:1f4) has quit (Quit: ZNC - http://znc.in)
2016-01-16 00:56:06	◀	firstdayonthejob (~firstdayo@cpc91184-cmbg18-2-0-cust232.5-4.cable.virginm.net) has quit (Ping timeout: 240 seconds)
2016-01-16 00:56:15	◀	TDJACR (~TDJACR@lilug/member/tdjacr) has quit (Ping timeout: 240 seconds)
2016-01-16 00:56:59	◀	python476 (~user@2a02-8420-6f5c-4200-021f-3bff-fe7d-f603.rev.sfr.net) has quit (Ping timeout: 255 seconds)
2016-01-16 00:57:29	▶	Mayoi (~erkin@unaffiliated/erkin) has joined #haskell
2016-01-16 00:57:29	▶	kurt11 (~Adium@207.191.34.198) has joined #haskell
2016-01-16 00:57:55	▶	hiratara (~hiratara@240f:7:4708:1:70b2:6a49:ff48:3735) has joined #haskell
2016-01-16 00:58:05	◀	Mayoi (~erkin@unaffiliated/erkin) has quit (Remote host closed the connection)
2016-01-16 00:58:35	◀	cschneid_ (~cschneid@c-67-165-246-146.hsd1.co.comcast.net) has quit (Remote host closed the connection)
2016-01-16 00:59:15	◀	MarceColl (~MarceColl@2.Red-79-155-140.dynamicIP.rima-tde.net) has quit (Remote host closed the connection)
2016-01-16 01:00:33	▶	lkba_ (~AndChat43@ear92.neoplus.adsl.tpnet.pl) has joined #haskell
2016-01-16 01:00:44	◀	plucas (~plucas@8.18.218.175) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-16 01:01:10	◀	bamboo (~bamboo@201-69-166-128.dial-up.telesp.net.br) has quit (Quit: bamboo)
2016-01-16 01:01:26	▶	griotspeak (~textual@c-73-237-161-156.hsd1.ga.comcast.net) has joined #haskell
2016-01-16 01:01:37	◀	jomg (~jomg@dslc-082-083-170-154.pools.arcor-ip.net) has quit (Quit: Leaving)
2016-01-16 01:02:02	▶	plucas (~plucas@8.18.218.175) has joined #haskell
2016-01-16 01:02:13	▶	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2016-01-16 01:02:15	◀	spuz_ (~spuzz@host-78-149-193-7.as13285.net) has quit (Ping timeout: 240 seconds)
2016-01-16 01:02:35	jsqr	
2016-01-16 01:03:17	◀	lkba (~AndChat43@aekf121.neoplus.adsl.tpnet.pl) has quit (Ping timeout: 246 seconds)
2016-01-16 01:03:35	◀	jsqr (~jj@thalia.jsqr.org) has left #haskell
2016-01-16 01:04:32	◀	sepp2k (~Sepp2k@x5ce77c92.dyn.telefonica.de) has quit (Read error: Connection reset by peer)
2016-01-16 01:04:55	◀	lamilami (~lamilami@199.101.96.108) has quit (Ping timeout: 276 seconds)
2016-01-16 01:05:15	▶	ril (~ril@c-98-210-195-123.hsd1.ca.comcast.net) has joined #haskell
2016-01-16 01:06:32	◀	martingale (~textual@pool-74-108-27-107.nycmny.fios.verizon.net) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-01-16 01:07:40	◀	tomboy64 (~tomboy64@unaffiliated/tomboy64) has quit (Ping timeout: 260 seconds)
2016-01-16 01:08:06	◀	wanderleyguima (~wanderley@199.201.64.2) has quit (Ping timeout: 240 seconds)
2016-01-16 01:08:13	▶	jgt1 (~jgt@eip202.neoplus.adsl.tpnet.pl) has joined #haskell
2016-01-16 01:08:20	◀	govg (~govg@unaffiliated/govg) has quit (Ping timeout: 272 seconds)
2016-01-16 01:08:54	◀	Peaker (~Peaker@85.65.227.152.dynamic.barak-online.net) has quit (Quit: Leaving)
2016-01-16 01:09:56	▶	cheetah2 (~cheetah2@172.242.102.144) has joined #haskell
2016-01-16 01:10:08	◀	acowley (~user@pool-72-82-172-59.cmdnnj.east.verizon.net) has quit (Read error: Connection reset by peer)
2016-01-16 01:10:24	◀	homovitruvius (~user@pool-108-17-70-127.pitbpa.fios.verizon.net) has quit (Ping timeout: 250 seconds)
2016-01-16 01:10:53	▶	martingale (~textual@pool-74-108-27-107.nycmny.fios.verizon.net) has joined #haskell
2016-01-16 01:11:14	ℹ	xeno__ is now known as xeno
2016-01-16 01:11:30	▶	ype (~ype@cpc45-slam6-2-0-cust434.2-4.cable.virginm.net) has joined #haskell
2016-01-16 01:11:37	◀	adamCS (~textual@cpe-74-71-211-64.nyc.res.rr.com) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-16 01:12:02	▶	tomboy64 (~tomboy64@unaffiliated/tomboy64) has joined #haskell
2016-01-16 01:12:23	▶	saulzar (~oliver@121-74-245-78.telstraclear.net) has joined #haskell
2016-01-16 01:12:34	▶	kadoban (~mud@unaffiliated/kadoban) has joined #haskell
2016-01-16 01:12:38	▶	predator217 (~predator1@p4FDC1979.dip0.t-ipconnect.de) has joined #haskell
2016-01-16 01:12:41	▶	markus1199 (~markus118@p4FDC1979.dip0.t-ipconnect.de) has joined #haskell
2016-01-16 01:12:46	▶	MorpheusB (~morpheusb@95.211.172.97) has joined #haskell
2016-01-16 01:13:45	▶	TDJACR (~TDJACR@lilug/member/tdjacr) has joined #haskell
2016-01-16 01:14:35	▶	jdt (~user@208.85.233.130) has joined #haskell
2016-01-16 01:14:38	▶	aaronlevin (~aaronlevi@37.120.111.61) has joined #haskell
2016-01-16 01:15:01	▶	achernyak (~artem@24-217-172-238.dhcp.stls.mo.charter.com) has joined #haskell
2016-01-16 01:15:08	▶	Klumben (Nsaiswatch@elmo.stole-your.pw) has joined #haskell
2016-01-16 01:15:12	◀	carella (~ilyasov@2a02:6b8:0:408:9033:97da:2435:8e26) has quit (Remote host closed the connection)
2016-01-16 01:15:31	▶	jgt2 (~jgt@acrc73.neoplus.adsl.tpnet.pl) has joined #haskell
2016-01-16 01:15:39	◀	cheetah2 (~cheetah2@172.242.102.144) has quit (Remote host closed the connection)
2016-01-16 01:15:50	◀	markus1189 (~markus118@p4FDC1F8A.dip0.t-ipconnect.de) has quit (Ping timeout: 260 seconds)
2016-01-16 01:15:51	▶	tomboy65 (~tomboy64@unaffiliated/tomboy64) has joined #haskell
2016-01-16 01:15:53	◀	predator117 (~predator1@p4FDC1F8A.dip0.t-ipconnect.de) has quit (Ping timeout: 255 seconds)
2016-01-16 01:15:55	◀	jgt2 (~jgt@acrc73.neoplus.adsl.tpnet.pl) has quit (Client Quit)
2016-01-16 01:16:07	Enigmagic	dobq: yes
2016-01-16 01:16:26	◀	tomboy64 (~tomboy64@unaffiliated/tomboy64) has quit (Ping timeout: 240 seconds)
2016-01-16 01:16:29	▶	xacktm (xacktm@unaffiliated/xacktm) has joined #haskell
2016-01-16 01:17:32	▶	cheetah2 (~cheetah2@172.242.102.144) has joined #haskell
2016-01-16 01:17:46	◀	griotspeak (~textual@c-73-237-161-156.hsd1.ga.comcast.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-01-16 01:18:35	◀	jgt1 (~jgt@eip202.neoplus.adsl.tpnet.pl) has quit (Ping timeout: 255 seconds)
2016-01-16 01:18:50	▶	griotspeak (~textual@c-73-237-161-156.hsd1.ga.comcast.net) has joined #haskell
2016-01-16 01:18:52	◀	zcourts (~zcourts@cpc5-croy18-2-0-cust555.croy.cable.virginm.net) has quit (Remote host closed the connection)
2016-01-16 01:19:48	▶	govg (~govg@unaffiliated/govg) has joined #haskell
2016-01-16 01:20:24	◀	kurt11 (~Adium@207.191.34.198) has quit (Quit: Leaving.)
2016-01-16 01:21:03	◀	yfeldblum (~yfeldblum@2620:10d:c090:200::a:8709) has quit (Remote host closed the connection)
2016-01-16 01:21:06	◀	mgsloan (~mgsloan@157.130.186.54) has quit (Ping timeout: 240 seconds)
2016-01-16 01:21:07	▶	kurt11 (~Adium@207.191.34.198) has joined #haskell
2016-01-16 01:21:48	◀	baweaver (~baweaver@173.230.196.25) has quit (Remote host closed the connection)
2016-01-16 01:23:06	▶	mgsloan (~mgsloan@157.130.186.54) has joined #haskell
2016-01-16 01:23:30	▶	acowley (~user@pool-72-82-172-59.cmdnnj.east.verizon.net) has joined #haskell
2016-01-16 01:24:09	▶	yfeldblum (~yfeldblum@199.201.64.131) has joined #haskell
2016-01-16 01:24:11	ℹ	irc: disconnected from server
2016-01-16 14:28:56	▶	psyq (~Psyq@unaffiliated/psyq) has joined #haskell
2016-01-16 14:28:56	ℹ	Topic for #haskell is "http://www.haskell.org/ | https://wiki.haskell.org/IRC_channel | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | http://reddit.com/r/haskell | Administrative issues: #haskell-ops | Hackage status? http://status.haskell.org | http://downloads.haskell.org"
2016-01-16 14:28:56	ℹ	Topic set by quicksilver on Wed, 07 Oct 2015 16:39:51
2016-01-16 14:28:56	ℹ	Channel #haskell: 1477 nicks (1 op, 0 voices, 1476 normals)
2016-01-16 14:28:56	ℹ	URL for #haskell: http://www.haskell.org/
2016-01-16 14:29:21	ℹ	Channel created on Sun, 26 Nov 2006 07:42:48
2016-01-16 14:30:12	◀	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has quit (Remote host closed the connection)
2016-01-16 14:30:16	▶	Wuzzy (~Wuzzy@p549F9031.dip0.t-ipconnect.de) has joined #haskell
2016-01-16 14:30:28	▶	castlelore (~Brian@unaffiliated/castlelore) has joined #haskell
2016-01-16 14:30:45	▶	hannelita (~hannelita@2804:14c:a8:27a5:8025:56ea:f48c:8984) has joined #haskell
2016-01-16 14:30:45	◀	Sindriava (~textual@250.99.broadband10.iol.cz) has quit (Read error: Connection reset by peer)
2016-01-16 14:30:54	▶	YP-HW7 (~YP-Win10@5ec019cd.skybroadband.com) has joined #haskell
2016-01-16 14:30:59	▶	usershel_ (~usershell@41.136.106.244) has joined #haskell
2016-01-16 14:31:11	◀	usershell (~usershell@41.136.116.163) has quit (Ping timeout: 265 seconds)
2016-01-16 14:31:16	◀	cir0x (~Adium@dslb-178-002-192-055.178.002.pools.vodafone-ip.de) has quit (Quit: Leaving.)
2016-01-16 14:32:17	▶	qubitnerd (~neutrino@unaffiliated/electron/x-8286743) has joined #haskell
2016-01-16 14:33:10	▶	XniX23 (~phyro@BSN-77-69-224.static.siol.net) has joined #haskell
2016-01-16 14:35:06	◀	hannelita (~hannelita@2804:14c:a8:27a5:8025:56ea:f48c:8984) has quit (Ping timeout: 240 seconds)
2016-01-16 14:35:06	◀	cleamoon_ (cleamoon@2001:6b0:1:1041:1405:6ce6:95ed:bdd9) has quit (Ping timeout: 250 seconds)
2016-01-16 14:35:08	▶	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has joined #haskell
2016-01-16 14:35:48	▶	caumeslasal (~Thunderbi@mar92-10-82-239-65-141.fbx.proxad.net) has joined #haskell
2016-01-16 14:37:18	▶	lynn (~lynn@unaffiliated/lynn) has joined #haskell
2016-01-16 14:37:27	◀	qubitnerd (~neutrino@unaffiliated/electron/x-8286743) has quit (Quit: WeeChat 1.3)
2016-01-16 14:38:49	▶	wanderleyguima (~wanderley@199.201.64.3) has joined #haskell
2016-01-16 14:39:08	◀	dramforever (~wang_rk@unaffiliated/dramforever) has quit (Quit: Leaving.)
2016-01-16 14:39:52	◀	SCHAAP137 (SCHAPiE@unaffiliated/schaap137) has quit (Ping timeout: 250 seconds)
2016-01-16 14:40:26	◀	nidr0x (~textual@nidr0x.ddns.jazztel.es) has quit (Ping timeout: 240 seconds)
2016-01-16 14:40:50	◀	kosorith (~kosorith@dynamic-78-8-95-88.ssp.dialog.net.pl) has quit (Ping timeout: 260 seconds)
2016-01-16 14:43:26	▶	SCHAAP137 (SCHAPiE@unaffiliated/schaap137) has joined #haskell
2016-01-16 14:44:04	◀	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 272 seconds)
2016-01-16 14:46:24	◀	oisdk_ (~oisdk_@95.45.70.25) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-16 14:46:26	▶	tomus (~tomus@li351-236.members.linode.com) has joined #haskell
2016-01-16 14:46:29	◀	nkaretnikov (~nikita@unaffiliated/nkar) has quit (Ping timeout: 246 seconds)
2016-01-16 14:46:43	▶	oisdk_ (~oisdk_@95.45.70.25) has joined #haskell
2016-01-16 14:46:45	▶	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2016-01-16 14:48:02	▶	darkbolt (~darkbolt@64.187.165.143) has joined #haskell
2016-01-16 14:49:38	◀	TOB1 (~ObitO@41.101.164.20) has quit (Ping timeout: 246 seconds)
2016-01-16 14:50:12	tremon	John[Lisbeth]: use div instead of (/) ?
2016-01-16 14:50:16	◀	javjarfer (~javjarfer@75.Red-81-44-195.dynamicIP.rima-tde.net) has quit (Ping timeout: 250 seconds)
2016-01-16 14:50:42	◀	diggle (chatzilla@27.255.159.196) has quit (Quit: ChatZilla 0.9.92 [Firefox 43.0.4/20160105164030])
2016-01-16 14:51:09	haskell886	hey everyone, I need some help with this problem : If a "book" is a tuple with components ("Title", "Year of release") and a "library" is a list of "books", I need to write two functions. findUniques returns a list of all the "books" released in a unique year. longestTitleYear returns the year of the book with the longest title. I'm a begginer in Haskell so any help is welcome.
2016-01-16 14:51:42	tremon	:t 27 `div` 3
2016-01-16 14:51:43	lambdabot	Integral a => a
2016-01-16 14:52:38	◀	danthemyth (~danthemyt@c-73-135-109-146.hsd1.wv.comcast.net) has quit (Remote host closed the connection)
2016-01-16 14:52:38	◀	chatsiri_ (~chatsiri_@119-46-191-20.static.asianet.co.th) has quit (Ping timeout: 255 seconds)
2016-01-16 14:53:02	▶	T0BI (~ObitO@41.101.173.90) has joined #haskell
2016-01-16 14:53:04	◀	pimlu (~pimlu@pool-173-53-75-246.rcmdva.fios.verizon.net) has quit (Ping timeout: 245 seconds)
2016-01-16 14:53:13	◀	oisdk_ (~oisdk_@95.45.70.25) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-16 14:53:40	◀	darkbolt (~darkbolt@64.187.165.143) has quit (Ping timeout: 276 seconds)
2016-01-16 14:53:59	◀	clynamen (~clynamen@93-50-191-217.ip153.fastwebnet.it) has quit (Read error: Connection reset by peer)
2016-01-16 14:54:03	▶	aarvar (~foewfoiew@c-66-235-6-23.sea.wa.customer.broadstripe.net) has joined #haskell
2016-01-16 14:55:08	▶	chatsiri_ (~chatsiri_@119-46-191-20.static.asianet.co.th) has joined #haskell
2016-01-16 14:55:10	▶	oisdk_ (~oisdk_@95.45.70.25) has joined #haskell
2016-01-16 14:55:28	▶	dadaro (~androidde@78.173.237.110) has joined #haskell
2016-01-16 14:55:33	◀	astrofog (~astrofog@unaffiliated/astrofog) has quit (Quit: Quite)
2016-01-16 14:56:38	▶	kosorith (~kosorith@dynamic-78-8-95-88.ssp.dialog.net.pl) has joined #haskell
2016-01-16 14:56:57	▶	slomo (~slomo@unaffiliated/slomo) has joined #haskell
2016-01-16 14:56:59	▶	gseitz (~gseitz@217-162-127-140.dynamic.hispeed.ch) has joined #haskell
2016-01-16 14:57:48	◀	elementalest (~elemental@unaffiliated/elementalest) has quit (Ping timeout: 272 seconds)
2016-01-16 14:57:51	▶	lynnard (~lingnan@cpc1-walt13-2-0-cust402.13-2.cable.virginm.net) has joined #haskell
2016-01-16 14:58:26	▶	zeroed (~zeroed@unaffiliated/zeroed) has joined #haskell
2016-01-16 14:58:35	▶	elementalest (~elemental@ppp118-209-55-124.lns20.mel4.internode.on.net) has joined #haskell
2016-01-16 14:58:35	◀	elementalest (~elemental@ppp118-209-55-124.lns20.mel4.internode.on.net) has quit (Changing host)
2016-01-16 14:58:35	▶	elementalest (~elemental@unaffiliated/elementalest) has joined #haskell
2016-01-16 14:58:45	▶	csd_ (~chris@cpe-24-90-169-55.nyc.res.rr.com) has joined #haskell
2016-01-16 14:58:56	▶	clynamen (~clynamen@93-50-191-217.ip153.fastwebnet.it) has joined #haskell
2016-01-16 14:59:42	◀	wanderleyguima (~wanderley@199.201.64.3) has quit (Ping timeout: 260 seconds)
2016-01-16 15:00:00	▶	mag__ (~mag@190.167.39.228) has joined #haskell
2016-01-16 15:00:11	◀	codedmart (~codedmart@c-24-10-135-105.hsd1.ut.comcast.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-16 15:00:40	◀	nshepperd (~nshepperd@124-168-65-96.dyn.iinet.net.au) has quit (Ping timeout: 265 seconds)
2016-01-16 15:01:23	◀	oisdk_ (~oisdk_@95.45.70.25) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-01-16 15:01:25	▶	taira (~quassel@taira-comp.kvi.sgsnet.se) has joined #haskell
2016-01-16 15:01:55	▶	mac10688 (~mac10688@c-69-180-251-120.hsd1.tn.comcast.net) has joined #haskell
2016-01-16 15:02:02	haskell886	anyone?
2016-01-16 15:02:26	▶	angerman (~m@199.241.146.163) has joined #haskell
2016-01-16 15:02:46	◀	thunderrd__ (~thunderrd@110.77.238.204) has quit (Quit: If it wasn't written down, it didn't happen...)
2016-01-16 15:03:15	◀	SrPx (~v@177.144.9.90) has quit (Quit: SrPx)
2016-01-16 15:03:35	◀	csd_ (~chris@cpe-24-90-169-55.nyc.res.rr.com) has quit (Ping timeout: 260 seconds)
2016-01-16 15:04:20	◀	lynnard (~lingnan@cpc1-walt13-2-0-cust402.13-2.cable.virginm.net) has quit (Ping timeout: 246 seconds)
2016-01-16 15:04:32	▶	nkaretnikov (~nikita@unaffiliated/nkar) has joined #haskell
2016-01-16 15:06:08	▶	drot (~user@unaffiliated/drot) has joined #haskell
2016-01-16 15:06:26	▶	wanderleyguima (~wanderley@199.201.64.3) has joined #haskell
2016-01-16 15:06:27	pavonia	haskell886: What do you have so far?
2016-01-16 15:06:28	◀	mag__ (~mag@190.167.39.228) has quit (Ping timeout: 265 seconds)
2016-01-16 15:06:31	◀	usershel_ (~usershell@41.136.106.244) has quit (Remote host closed the connection)
2016-01-16 15:07:32	▶	MarceColl (~MarceColl@2.Red-79-155-140.dynamicIP.rima-tde.net) has joined #haskell
2016-01-16 15:07:33	◀	hamid (~nithp@unaffiliated/hamid) has quit (Read error: Connection reset by peer)
2016-01-16 15:07:39	haskell886	nothing is you are asking me :/
2016-01-16 15:08:02	jdnavarro	haskell886: are you aware of `nub`? https://hackage.haskell.org/package/base-4.8.1.0/docs/Data-List.html#g:20
2016-01-16 15:08:04	▶	nshepperd (~nshepperd@124-168-65-96.dyn.iinet.net.au) has joined #haskell
2016-01-16 15:08:40	jdnavarro	for short lists should be fine
2016-01-16 15:08:48	◀	michas (~michas@f053018140.adsl.alicedsl.de) has quit (Quit: Verlassend)
2016-01-16 15:09:40	▶	bamboo (~bamboo@201-68-34-79.dsl.telesp.net.br) has joined #haskell
2016-01-16 15:10:23	maerwald	I wouldn't even start with a tuple, but with my own ADT
2016-01-16 15:10:38	maerwald	(String, String) is somewhat random IMO
2016-01-16 15:11:17	jdnavarro	with a `Map` should be straightforward
2016-01-16 15:12:01	haskell886	can someone write the code with explanations or is it too much to ask?
2016-01-16 15:12:34	jdnavarro	for the longest year I'd look into `sortBy` `on`
2016-01-16 15:12:35	◀	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has quit (Read error: Connection reset by peer)
2016-01-16 15:12:43	jdnavarro	https://hackage.haskell.org/package/base-4.8.1.0/docs/Data-List.html#g:20
2016-01-16 15:13:03	▶	edwinvdgraaf (~edwinvdgr@095-096-024-193.static.chello.nl) has joined #haskell
2016-01-16 15:13:06	jdnavarro	sorry, this link: https://hackage.haskell.org/package/base-4.8.1.0/docs/Data-Function.html#v:on
2016-01-16 15:13:20	▶	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2016-01-16 15:13:54	jdnavarro	or with `comparing` https://hackage.haskell.org/package/base-4.8.1.0/docs/Data-Ord.html#v:comparing
2016-01-16 15:16:31	▶	raichoo (~raichoo@dsl102-244.pool.bitel.net) has joined #haskell
2016-01-16 15:16:59	◀	JagaJaga (~JagaJaga@178.62.202.50) has quit (Ping timeout: 264 seconds)
2016-01-16 15:17:11	▶	Stratege (~Stratege@unaffiliated/stratege) has joined #haskell
2016-01-16 15:17:23	ℹ	irc: disconnected from server
