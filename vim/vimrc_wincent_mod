" {{{ Key mappings

"{{{ Make the leader key be space
let mapleader = "\<Space>"

" }}}

" I hate the Escape key
inoremap jj <Esc>

" easymotion <leader> remap
" Easymotion shortcut
map <leader>e <leader><leader>W
map <leader>e <leader><leader>W

" space-n to open a new file (in a new tab)
nnoremap <leader>n :tabnew<cr>
" space-t to open a new tab
"nnoremap <leader>t :tabnew<cr>

" yanking the rest of the line
noremap Y y$
" Disabling the arrow keys
nnoremap <Up> <NOP>
nnoremap <Down> <NOP>
nnoremap <Left> <NOP>
nnoremap <Right> <NOP>
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>
" {{{ tab stuff
nnoremap tn :tabnew<cr>
nnoremap tc :tabclose<cr>
nnoremap tk :tabnext<cr>
nnoremap tj :tabprev<cr>
nnoremap th :tabfirst<cr>
nnoremap tl :tablast<cr>

" <shift-tab> to go to next tab
nnoremap <s-tab> :tabnext<cr>
inoremap <s-tab> <esc>:tabnext<cr>

" <c-shift-tab> to go to previous tab
nnoremap <c-s-tab> :tabprev<cr>
inoremap <c-s-tab> <esc>:tabprev<cr>

" }}}

" {{{ Buffer management
" closing a buffer
nnoremap <c-b>d :bd<cr>


" }}}
" space-f to open fuzzy file finder for CtrlP plugin
"nnoremap <leader>f :CtrlPClearCache<cr>:CtrlP .<cr>

" space-o to open the file browser
nnoremap <leader>o :NERDTreeToggle<cr>
nnoremap <leader>O :NERDTreeFocus<cr>

" space-s to save
nnoremap <leader>s :w<cr>

" space-shift-s to save as
nnoremap <leader><s-s> :w

" space-q to quit (doesn't save, watch out!)
nnoremap <leader>q :q!<cr>

" alt-x to Esc
inoremap <a-d> <esc>

" Leader v for vertical split
nnoremap <c-v> :vsplit<cr>
vnoremap <c-v> :vsplit<cr>

" Leader h for horizontal split
nnoremap <c-h> :split<cr>
vnoremap <c-h> :split<cr>

" pageup and page down
nnoremap <leader>u :<PageUp><cr>
nnoremap <leader>d :<PageDown><cr>

" space-1 insert "!" commenting
nnoremap <leader>1 :norm ^i!<cr>
vnoremap <leader>1 :norm ^i!<cr>

" space-' insert """ commenting
nnoremap <leader>' :norm ^i"<cr>
vnoremap <leader>' :norm ^i"<cr>

" space-3 insert "#" commenting
nnoremap <leader>3 :norm ^i#<cr>
vnoremap <leader>3 :norm ^i#<cr>

" space-- insert "--" commenting
nnoremap <leader>- :norm ^i--<cr>
vnoremap <leader>- :norm ^i--<cr>

" space-7 insert "//" commenting
nnoremap <leader>7 :norm ^i//<cr>
vnoremap <leader>7 :norm ^i//<cr>

" space-6 uncomment
nnoremap <leader>6 :norm ^x<cr>
vnoremap <leader>6 :norm ^x<cr>

" edit config files
nnoremap <leader>ez :tabnew ~/.zshrc<cr>

" set relative number
"nnoremap <c-n> set rnu<cr>
"nnoremap <c-s-n> set number<cr>
" Clears the search register
nnoremap <silent> <leader>/ :nohlsearch<CR>
" Strip all trailing whitespace from a file, using ,W
nnoremap <leader>W :%s/\s\+$//<CR>:let @/=''<CR>


function! NumberToggle()
  if(&relativenumber == 1)
    set number
  else
    set relativenumber
  endif
endfunc

nnoremap <c-n> :call NumberToggle()<cr>

" space-rv to reload vimrc
nnoremap <leader>rv :source<Space>$MYVIMRC<cr>

" space-ev to edit the vimrc file (think: edit-vim)
nnoremap <leader>ev :tabnew $MYVIMRC<cr>

" Other keymappings to make the experience less painful
"make j and k keys go up normally instead of to the previous line number
nnoremap j gj
nnoremap k gk

" }}}

" {{{ Setting
scriptencoding utf-8

set autoindent                        " maintain indent of current line
set backspace=indent,start,eol        " allow unrestricted backspacing in insert mode
set nomodeline                        " disable mode lines (security measure)
set title                             " change the terminal's title
set noshowmode                        "display the current mode

if exists('$SUDO_USER')
  set nobackup                        " don't create root-owned files
  set nowritebackup                   " don't create root-owned files
else
  set backupdir=~/local/.vim/tmp/backup
  set backupdir+=~/.vim/tmp/backup    " keep backup files out of the way
  set backupdir+=.
endif

if has('wildignore')
  set backupskip+=*.re,*.rei          " prevent bsb's watch mode from getting confused
endif

if exists('&belloff')
  set belloff=all                     " never ring the bell for any reason
endif

if exists('+colorcolumn')
  " Highlight up to 255 columns (this is the current Vim max) beyond 'textwidth'
  let &l:colorcolumn='+' . join(range(0, 254), ',+')
endif

set cursorline                        " highlight current line

if exists('$SUDO_USER')
  set noswapfile                      " don't create root-owned files
else
  set directory=~/local/.vim/tmp/swap//
  set directory+=~/.vim/tmp/swap//    " keep swap files out of the way
  set directory+=.
endif

set expandtab                         " always use spaces instead of tabs

if has('folding')
  if has('windows')
    set fillchars=vert:┃              " BOX DRAWINGS HEAVY VERTICAL (U+2503, UTF-8: E2 94 83)
    set fillchars+=fold:·             " MIDDLE DOT (U+00B7, UTF-8: C2 B7)
  endif
  set foldenable                      " enable folding
  set foldmethod=marker               " not as cool as syntax, but faster
  set foldcolumn=2                " add a fold column
  set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo
  set foldlevelstart=99               " start unfolded
  set foldtext=wincent#settings#foldtext()
endif

if v:version > 703 || v:version == 703 && has('patch541')
  set formatoptions+=j                " remove comment leader when joining comment lines
endif

set formatoptions+=n                  " smart auto-indenting inside numbered lists
set guifont=Source\ Code\ Pro\ Light:h13
set guioptions-=T                     " don't show toolbar
set hidden                            " allows you to hide buffers with unsaved changes without being prompted

if !has('nvim')
  " Sync with corresponding nvim settings in ~/.vim/plugin/autocmds.vim:
  set highlight+=@:ColorColumn        " ~/@ at end of window, 'showbreak'
  set highlight+=N:DiffText           " make current line number stand out a little
  set highlight+=c:LineNr             " blend vertical separators with line numbers
endif

if exists('&inccommand')
  set inccommand=split                " live preview of :s results
endif

set laststatus=2                      " always show status line
set lazyredraw                        " don't bother updating screen during macro playback

if has('linebreak')
  set linebreak                       " wrap long lines at characters in 'breakat'
endif

set list                              " show whitespace
set listchars=nbsp:⦸                  " CIRCLED REVERSE SOLIDUS (U+29B8, UTF-8: E2 A6 B8)
set listchars+=tab:▷┅                 " WHITE RIGHT-POINTING TRIANGLE (U+25B7, UTF-8: E2 96 B7)
                                      " + BOX DRAWINGS HEAVY TRIPLE DASH HORIZONTAL (U+2505, UTF-8: E2 94 85)
set listchars+=extends:»              " RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK (U+00BB, UTF-8: C2 BB)
set listchars+=precedes:«             " LEFT-POINTING DOUBLE ANGLE QUOTATION MARK (U+00AB, UTF-8: C2 AB)
set listchars+=trail:•                " BULLET (U+2022, UTF-8: E2 80 A2)
set nojoinspaces                      " don't autoinsert two spaces after '.', '?', '!' for join command
set number                            " show line numbers in gutter

if exists('+relativenumber')
  set relativenumber                  " show relative numbers in gutter
endif

set scrolloff=3                       " start scrolling 3 lines before edge of viewport
set shiftround                        " always indent by multiple of shiftwidth
set shiftwidth=2                      " spaces per tab (when shifting)
set shortmess+=A                      " ignore annoying swapfile messages
set shortmess+=I                      " no splash screen
set shortmess+=O                      " file-read message overwrites previous
set shortmess+=T                      " truncate non-file messages in middle
set shortmess+=W                      " don't echo "[w]"/"[written]" when writing
set shortmess+=a                      " use abbreviations in messages eg. `[RO]` instead of `[readonly]`
set shortmess+=o                      " overwrite file-written messages
set shortmess+=t                      " truncate file messages at start

if has('linebreak')
  let &showbreak='↳ '                 " DOWNWARDS ARROW WITH TIP RIGHTWARDS (U+21B3, UTF-8: E2 86 B3)
endif

if has('showcmd')
  set noshowcmd                       " don't show extra info at end of command line
endif

set sidescrolloff=3                   " same as scrolloff, but for columns
set smarttab                          " <tab>/<BS> indent/dedent in leading whitespace

if v:progname !=# 'vi'
  set softtabstop=-1                  " use 'shiftwidth' for tab/bs at end of line
endif

if has('syntax')
  set spellcapcheck=                  " don't check for capital letters at start of sentence
endif

if has('windows')
  set splitbelow                      " open horizontal splits below current window
endif

if has('vertsplit')
  set splitright                      " open vertical splits to the right of the current window
endif

if exists('&swapsync')
  set swapsync=                       " let OS sync swapfiles lazily
endif
set switchbuf=usetab                  " try to reuse windows/tabs when switching buffers

if has('syntax')
  set synmaxcol=200                   " don't bother syntax highlighting long lines
endif

set tabstop=2                         " spaces per tab

if has('termguicolors')
  set termguicolors                   " use guifg/guibg instead of ctermfg/ctermbg in terminal
endif

set textwidth=80                      " automatically hard wrap at 80 columns

if has('persistent_undo')
  if exists('$SUDO_USER')
    set noundofile                    " don't create root-owned files
  else
    set undodir=~/local/.vim/tmp/undo
    set undodir+=~/.vim/tmp/undo      " keep undo files out of the way
    set undodir+=.
    set undofile                      " actually use undo files
  endif
endif

set updatecount=80                    " update swapfiles every 80 typed chars
set updatetime=2000                   " CursorHold interval

if has('viminfo')
  if exists('$SUDO_USER')
    set viminfo=                      " don't create root-owned files
  else
    if isdirectory('~/local/.vim/tmp')
      set viminfo+=n~/local/.vim/tmp/viminfo
    else
      set viminfo+=n~/.vim/tmp/viminfo " override ~/.viminfo default
    endif

    if !empty(glob('~/.vim/tmp/viminfo'))
      if !filereadable(expand('~/.vim/tmp/viminfo'))
        echoerr 'warning: ~/.vim/tmp/viminfo exists but is not readable'
      endif
    endif
  endif
endif

if has('mksession')
  if isdirectory('~/local/.vim/tmp')
    set viewdir=~/local/.vim/tmp/view
  else
    set viewdir=~/.vim/tmp/view       " override ~/.vim/view default
  endif
  set viewoptions=cursor,folds        " save/restore just these (with `:{mk,load}view`)
endif

if has('virtualedit')
  set virtualedit=block               " allow cursor to move where there is no text in visual block mode
endif
set visualbell t_vb=                  " stop annoying beeping for non-error errors
set whichwrap=b,h,l,s,<,>,[,],~       " allow <BS>/h/l/<Left>/<Right>/<Space>, ~ to cross line boundaries
set wildcharm=<C-z>                   " substitute for 'wildchar' (<Tab>) in macros
if has('wildignore')
  set wildignore+=*.o,*.rej           " patterns to ignore during file-navigation
endif
if has('wildmenu')
  set wildmenu                        " show options as list when switching buffers etc
endif
set wildmode=longest:full,full        " shell-like autocomplete to unambiguous portion
set path+=**
" }}}

" {{{ Color configurations
let base16colorspace=256
let g:Powerline_symbols = "fancy"
let g:Powerline_dividers_override = ["\Ue0b0","\Ue0b1","\Ue0b2","\Ue0b3"]
let g:Powerline_symbols_override = {'BRANCH': "\Ue0a0", 'LINE': "\Ue0a1", 'RO': "\Ue0a2"}
let g:airline_powerline_fonts = 1
let g:airline_right_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_left_alt_sep= ''
let g:airline_left_sep = ''
let g:airline#extensions#tabline#enabled = 1

"Airline Themes
"let g:airline_theme='dark'
"let g:airline_theme='badwolf'
"let g:airline_theme='ravenpower'
"let g:airline_theme='simple'
"let g:airline_theme='bubblegum'
"let g:airline_theme='laederon'
"let g:airline_theme='molokai'
"let g:airline_theme='powerlineish'
"let g:airline_theme='base16'
"let g:airline_theme='base16_tomorrow'
let g:airline_theme='distinguished'

"colorscheme wombat256
"colorscheme tango
"colorscheme railscasts
"colorscheme vividchalk
"colorscheme base16-tomorrow-night
"colorscheme monokai
"colorscheme molokai
"colorscheme ir_black
"colorscheme jellybeans

"let g:neodark#terminal_transparent = 1
let g:deoplete#enable_at_startup = 1
" }}}

" Pathogen
execute pathogen#infect()
syntax on



" {{{ Plugins and Settings
" {{{ Settings vim-plug
"*****************************************************************************
"" Vim-PLug core
"*****************************************************************************
if has('vim_starting')
  set nocompatible               " Be iMproved
endif

let vimplug_exists=expand('~/.vim/autoload/plug.vim')

let g:vim_bootstrap_langs = "go,html,javascript,perl,php,python"
let g:vim_bootstrap_editor = "vim"				" nvim or vim

if !filereadable(vimplug_exists)
  if !executable("curl")
    echoerr "You have to install curl or first install vim-plug yourself!"
    execute "q!"
  endif
  echo "Installing Vim-Plug..."
  echo ""
  silent !\curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  let g:not_finish_vimplug = "yes"

  autocmd VimEnter * PlugInstall
endif

" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/bundle')

" Make sure you use single quotes
" start plugin defintion

" }}}

Plug 'chriskempson/base16-vim'
Plug 'chrisbra/vim-zsh'
Plug 'Lokaltog/vim-easymotion'
Plug 'tpope/vim-surround'

" vim-commentary: gc is an operator to toggle comments; gcc linewise
Plug 'tpope/vim-commentary'

" vim-repeat: make vim-commentary and vim-surround work with .
Plug 'tpope/vim-repeat'

" vim-liquid: syntax stuff
Plug 'tpope/vim-liquid'

" vim-markdown: some stuff for fenced language highlighting
Plug 'tpope/vim-markdown'
let g:markdown_fenced_languages = ['html', 'python', 'ruby', 'yaml', 'haml', 'bash=sh', 'javascript']
Plug 'wincent/command-t', {
    \   'do': 'cd ruby/command-t/ext/command-t && ruby extconf.rb && make'
    \ }
Plug 'wincent/ferret'
Plug 'Yggdroot/indentLine'
Plug 'SirVer/ultisnips'
"Plug 'ctrlpvim/ctrlp.vim'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'jiangmiao/auto-pairs'
Plug 'flazz/vim-colorschemes'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'Lokaltog/vim-powerline'
Plug 'powerline/powerline'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tomasr/molokai'
Plug 'Shougo/deoplete.nvim'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
let g:deoplete#enable_at_startup = 1
" -- Web Development
Plug 'Shutnik/jshint2.vim'
Plug 'mattn/emmet-vim'
Plug 'skammer/vim-css-color'
Plug 'hail2u/vim-css3-syntax'
Plug 'https://github.com/shmargum/vim-sass-colors.git'
Plug 'zeekay/vim-beautify'

" }}}

" {{{ netrw: Configuration
"     ====================

let g:netrw_banner=0        " disable banner
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
" hide gitignore'd files
let g:netrw_list_hide=netrw_gitignore#Hide()
" hide dotfiles by default (this is the string toggled by netrw-gh)
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

" }}}

" </PLUGINS>

" {{{ VUNDLE TEARDOWN

" All of your Plugins must be added before the following line
" Initialize plugin system
call plug#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on

" }}}

" {{{ Autocmd
autocmd filetype html,xml set listchars-=tab:>.		" HTML and XML files, tabs disabled

" }}}
if filereadable(expand("~/.vimrc_background"))
 " let base16colorspace=256
  source ~/.vimrc_background
endif

" vim: set ft=vim :
